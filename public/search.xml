<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo-插件系列</title>
      <link href="2020/11/17/hexo-%E6%8F%92%E4%BB%B6%E7%B3%BB%E5%88%97/"/>
      <url>2020/11/17/hexo-%E6%8F%92%E4%BB%B6%E7%B3%BB%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-filter-sequence"><a href="#hexo-filter-sequence" class="headerlink" title="hexo-filter-sequence"></a>hexo-filter-sequence</h2><p>用于画时序图的，使用比较麻烦，<a href="https://github.com/bubkoo/hexo-filter-sequence" target="_blank" rel="noopener">参考1</a><a href="https://helenzhanglp.github.io/2019/01/31/hexo-%E5%9D%91/">参考2</a> 如果要画时序图，可以采用下面两种插件替换</p><h2 id="hexo-tag-plantuml"><a href="#hexo-tag-plantuml" class="headerlink" title="hexo-tag-plantuml"></a>hexo-tag-plantuml</h2><p>画各种图形，种类多。<a href="https://plantuml.com/zh/sequence-diagram" target="_blank" rel="noopener">使用方法具体参考文档</a><br>安装方法，<a href="https://github.com/two/hexo-tag-plantuml" target="_blank" rel="noopener">见 github</a></p><h2 id="hexo-filter-mermaid-diagrams"><a href="#hexo-filter-mermaid-diagrams" class="headerlink" title="hexo-filter-mermaid-diagrams"></a>hexo-filter-mermaid-diagrams</h2><p>可以用来画流程图、时序图等，但文档不全。<a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams" target="_blank" rel="noopener">安装参考</a><br>使用方法见以下 demo.</p><a id="more"></a><pre class="mermaid">graph LR;    用户界面交互-->状态;    状态-->UI渲染;    UI渲染-->|用户界面与数据保持一致|数据;</pre>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理——从输入URL 到页面展示，这中间发生了什么</title>
      <link href="2020/11/17/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E4%BB%8E%E8%BE%93%E5%85%A5URL-%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%EF%BC%8C%E8%BF%99%E4%B8%AD%E9%97%B4%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/"/>
      <url>2020/11/17/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E4%BB%8E%E8%BE%93%E5%85%A5URL-%E5%88%B0%E9%A1%B5%E9%9D%A2%E5%B1%95%E7%A4%BA%EF%BC%8C%E8%BF%99%E4%B8%AD%E9%97%B4%E5%8F%91%E7%94%9F%E4%BA%86%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<h2 id="1-用户输入"><a href="#1-用户输入" class="headerlink" title="1. 用户输入"></a>1. 用户输入</h2><pre class="mermaid">graph TD;    A[用户输入] --> B{判断用户输入关键字}    B --> C[用户搜索]    B --> D[加协议合成完整的 URL]    D --> |用户可以在beforeunload事件上取消导航 或 执行退出来的数据清理|E{beforeunload<br>询问用户是否离开页面}    E --> |用户同意继续后续流程|F[等待提交文档页面进入加载状态]    E --> |beforeunload取消导航|G[留在当前页面]</pre><a id="more"></a><h2 id="2-URL-请求过程"><a href="#2-URL-请求过程" class="headerlink" title="2. URL 请求过程"></a>2. URL 请求过程</h2><p>浏览器会通过进程间通信（IPC) 把 url 请求发送至网络进程。接下来网络进程发起真正的 url 请求流程。</p><pre class="mermaid">graph TD;  A[网络进程] --> B{本地缓存}  B --> C[缓存]  B --> D[网络请求]  C --> browser[浏览器主进程]  D --> |1.获取服务品IP端口号<br>2.如果是https协议需要建立TLS链接|DNS[DNS解析]  DNS --> TCP[建立 tcp 连接]  TCP --> |浏览器构建请求头请求行cookie等数据|b[向服务器发起构建请求]  b --> |响应头响应行响应体|s[服务端解析请求生成响应数据]  s --> D</pre><p>1.网络进程首先要找缓存，如果有缓存，直接返回资源给浏览器进程；<br>2.没有缓存资源，则进程 dns 解析，拿到 ip 和 端口。若 https 请求，还需要建立 TLS 连接；<br>3.建立 tcp 链接，浏览器构建请求行、请求头，并把和该域名相关的 cookie 等数据加入请求头；</p><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>接收到服务器的响应头后，网络进程开始解析响应头，如果发现返回的状态码 301 或 302，说明需要浏览器重定向到其它 url, 这里网络进程会从响应头的 location 字段中读取重定向的地址，再次发起请求。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 302 Found</span><br><span class="line">Server: Tengine</span><br><span class="line">Date: Tue, 17 Nov 2020 09:05:14 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 258</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Location: http://www.taobao.com/</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 307 Internal Redirect</span><br><span class="line">Location: https://www.taobao.com/</span><br><span class="line">Non-Authoritative-Reason: HSTS</span><br></pre></td></tr></table></figure><p><code>content-type</code> 返回的数据类型，<code>text/html</code> 返回的是 html 类型，浏览器会继续渲染。如果 <code>content-type: application/octet-stream</code> 类型，那么显示的数据是字节流类型的。请求会被提交给<strong>浏览器的下载管理器，同时 url 结束导航</strong></p><h2 id="3-准备渲染进程"><a href="#3-准备渲染进程" class="headerlink" title="3. 准备渲染进程"></a>3. 准备渲染进程</h2><h3 id="同一站点（same-site）"><a href="#同一站点（same-site）" class="headerlink" title="同一站点（same-site）"></a>同一站点（same-site）</h3><p>根域名加上协议，还包括根域名下的所有子域名和不同端口。都为<strong>同一站点</strong></p><h3 id="process-per-site-instance"><a href="#process-per-site-instance" class="headerlink" title="process-per-site-instance"></a>process-per-site-instance</h3><p>默认一个标签对应一个渲染进程，如果从一个页面打开另一个新页面，而新页面和当前页面属于同一站点的话，那么新页面复用父页面的渲染进程。</p><h2 id="4-提交文档"><a href="#4-提交文档" class="headerlink" title="4. 提交文档"></a>4. 提交文档</h2><p>提交文档是指浏览器进程将网络进程接收到的 HTML 数据提交给渲染进程。</p><pre class="mermaid">graph TDnetwortProcess[网络进程] --> |数据管道<br>提交文档|renderProcess[渲染进程]renderProcess-->|确认提交|browserProcess[浏览器进程<br>更新包括安全状态<br>地址栏的 url<br>前进后退的历史状态<br>更新 web 页面]</pre><h2 id="5-渲染阶段"><a href="#5-渲染阶段" class="headerlink" title="5. 渲染阶段"></a>5. 渲染阶段</h2><h2 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h2><img src="http://www.plantuml.com/plantuml/svg/TLFTIXj15BwVfnYy5zfw8UH2QEj51P6muWFCxfx6GJEpdPrjx5rI1DEVg86sf3484R6XKAEGOgbA7gRkxEGjEhjfR2VTNCsUl--SxtndNRw3vrp1Ao48N2QKuK1m3y9m3WL4IEhHW3298nDUOK4aBUycOVusPFvb8ebT8RRNo4jQ8f8BA-20JmLuDb8Wm9ZW0FD15CSJM0aUPy-fA2zpBoe3a-kHMwOIV2kd0cwHb62L4zz431Hs-Gv2RagHWQnmiPNFBZIv6ywg0oyY2Et1113VWJ3WB8HdvXl4pF0Jxh-QwYeoFZEQPXGcXEnj4152IkKnyrCswpmI7lp5lbS3pozDYr30gjLFFlHK_KeTTfB1YHwsZ2VL0yVz6rt_YgOgyBn1iUJwryYYze8AU5Hjw-4UNYa-nNS_zfFRPdBTqSEZfFVEHEw6NSIu12neQLCYzVr0Vwd7dtlgU3U-_gdxL-hoTNmw-5MjeR6Xk-zJ8pvigauZVjirkV51SrIj9UrT8ppVee2IRs_KnmlLEC-saCAZ_wN9PftSLm4lF7Y8LVsJUH_zUHVnVGVT7wZM_gXJrMUrqLuZFc-R_cXIdCDwLh_yqyrnZZ5jrMqpovXrwTEdDcwUVodvxgp2-ab-0m00">]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器 chrome 打开一个页面执行的进程</title>
      <link href="2020/11/13/%E6%B5%8F%E8%A7%88%E5%99%A8-chrome-%E6%89%93%E5%BC%80%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2%E6%89%A7%E8%A1%8C%E7%9A%84%E8%BF%9B%E7%A8%8B/"/>
      <url>2020/11/13/%E6%B5%8F%E8%A7%88%E5%99%A8-chrome-%E6%89%93%E5%BC%80%E4%B8%80%E4%B8%AA%E9%A1%B5%E9%9D%A2%E6%89%A7%E8%A1%8C%E7%9A%84%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>网络流程、<br>页面渲染过程、<br>javascript 执行流程<br>网络安全理论</p><p>了解 chrome 浏览器启动了几个进程</p><blockquote><p>chrome 选项 -&gt; more tools -&gt; task manager</p></blockquote><p>多线程并行处理能大大提升性能，但是线程不能单独存在，需要进行来启动、管理。一个进程是一个程序的运行实例。也就是说，启动一个程序时，操作系统为该程序创建一个内存空间，用于存放代码、运行数据和执行任务的主线程。这个运行环境就是一个进程。</p><a id="more"></a><h2 id="进程与线程的关系·"><a href="#进程与线程的关系·" class="headerlink" title="进程与线程的关系·"></a>进程与线程的关系·</h2><ol><li>进程中的任意线程执行出错，整个进程崩溃；</li><li>线程之间共享进程中的数据；</li><li>当一个进程关闭之后，操作系统会回收进程战胜的内存；</li><li>进程之间的内容相互隔离。</li></ol><h2 id="单进程浏览器时代"><a href="#单进程浏览器时代" class="headerlink" title="单进程浏览器时代"></a>单进程浏览器时代</h2><p>浏览器的所有功能模块（像网络、插件、javascript 运行环境、渲染引擎和页面）运行在同一个进程里。多个功能模块运行在一个进程中，导致浏览器不稳定、不安全、不流畅。<br>2007 年前的浏览器大多都是单线程，早期浏览器需要借助插件实现 Web 视频和 web 游戏的功能，插件是最容易出问题的模块，运行在浏览器进程中，很容易由于插件崩溃引起浏览器崩溃。另外渲染模块也不稳定。复杂的 javascript 代码就有可能引起渲染引擎模块崩溃，导致整个浏览器崩溃。<br>通常一个线程一直占用，或内存泄漏。运行比较复杂的页面会存在内存不能完全回收的情况，如此使用时间越长、内存占用越高、浏览器会变得越来越慢。<br>使用插件意味着该插件可以完全操作你的电脑，恶意插件会释放病毒、窃取账号密码。存在安全问题。</p><h2 id="多进程浏览器时代"><a href="#多进程浏览器时代" class="headerlink" title="多进程浏览器时代"></a>多进程浏览器时代</h2><img src="http://www.plantuml.com/plantuml/svg/TP7FJi904CRl-nGR7e0d8BruqfDtoe50GqZ8GWfwCIOI27-4IXKrb89DnQGS32g2LahnOMndbnElu68rmQ397YOpl_tcopTHQ5rupWjxr-cm4SEHI2vpa4eJd9Ep2IcV5mI4I3OfOPYsc5NpjQ5dEm7CsUqccnXiCl3i1dDTDYt3J1K97PbKhU3T_HsHG6T1xsPWZy5e1p_efG4rbNRBlhwWzUfweImb2d6IoaWuj4a6sgjvLoJC6i2D-d5I3EQys8iVnlC9EPqhOAXRp6podaXyjROMTy-NvdJz-hUhkSvTRAZwlI6CDJfwMbQRN_EcI3nROIMNFJX-HQFcFTKxddtABSBL8oYZ07aplgcpLxzr3Mt5StlqsQ6E0VtIKbD3F1zP8ab9_iaI1ti40HyXZAER9cB_mrjeE2nivuwE4Oh-EYN7_ZWQ-WG0"><p>Chrome 插件及渲染都运行在各自单独的进程中，进程之间通过 ipc 机制进行通信。<br>当前页面或插件崩溃，只影响到当前页面或插件进程，浏览器的其它页面不受影响，解决了页面或插件崩溃导致的整个浏览器崩溃的 <strong>不稳定</strong> 的问题。<br>渲染页面是在沙箱中进行的，不能在硬盘上写入任何数据，也不能在敏感位置读取数据，恶意程序不能通过沙箱破坏系统，解决了 <strong>不安全</strong> 的问题。<br>Javascript 渲染进程中，阻塞渲染进程，并不会影响到浏览器其它页面，脚本运行在自己的沉浸进程中，死循环影响的仅仅是当前页面的渲染进程，解决了 <strong>不流畅</strong> 的问题。内存泄漏，只需要关闭当前页面，资源就能被系统回收。</p><h2 id="目前的多进程框架"><a href="#目前的多进程框架" class="headerlink" title="目前的多进程框架"></a>目前的多进程框架</h2><img src="http://www.plantuml.com/plantuml/svg/RLBDJXfH6Dtp53Vn4PeqDJ4kQfEcNJKnTYDTZ3Wg1MR83DP5qmJ5o21_8sYa2WfMscahOXl4SOQHTwdtk_UowYlq3eCKr6GoY-_ddFETU-Q9-PiS5rdta1ffz2U-opz4gYPq4zYsORj6Iasus48hiKZuDhuUK5N-Vozy4DI04ep6a5zYpXd9dc3Jehi6qQuWtyHs7PivV9t6rYcs2lHWapexlThbRNp3Bv5SWQOqwEoHOWuz3mUb48921ht-3pdelNs6UWc7qxEkpcePA1kiMVTqOhFn3arDAQAqA2eegiW1KLMdfttp95_0Tdly6DOwPgqlTnqNwcyduvTmjyAQwzZCuiu175QzFhI-4oi1pGvBjiXbddtJuBF1vN7nlSe9vFV1-GN5h4iU3Qyk1wLHSduajSkFaGywbvl4qc6xoXp7at2TXbIMNuYTClSFct5i_Y163Ihxmvk7AeQNzrT9ESwwEpHzHd-c8McHIfsNYQOFORmMjzxRSnLBOcnDLaAZab--cHlNomk8Bu5MORKhz-dFZsZk0ZrvWMPcPn7PqyXHcJC5LXGv8hgJQEuLediPxaulcUG9w2DmETGkWTPsQTt2w1FT7OHDUvoR6y9BNzS7dlL1IUc6dbeySdx9YvSNgNu16he7GCzhLD_g-m9wXkotILx7DuVGAC66GHifs3vc2SVLig38Q-fOP7ngA2X51KM8e80SYSgIACNGHnz22q8WjAp8gzBYZ1oMbOTfGnDBavEF3TvF1ffuAWYF3JvGmo6NbdoV_W40"><p>因为每个进程都会包含基本框架副本，多进程浏览器会 <strong>占用更高资源</strong>，这就意味着浏览器会消耗更多内存资源。更复杂的体系架构，模块之间会有耦合高，扩展性差。现在的框架难适应新的需求。</p><h2 id="面向服务的架构-Services-Oriented-Architecture-SOA"><a href="#面向服务的架构-Services-Oriented-Architecture-SOA" class="headerlink" title="面向服务的架构(Services Oriented Architecture,SOA)"></a>面向服务的架构(Services Oriented Architecture,SOA)</h2><p>也就是说 Chrome 会朝向现代操作系统所采用的“面向服务的架构”方向发展，原来的各种模块会被重构成独立的服务（Service），每个服务都在独立的进程中运行。访问服务必须采用接口，通过 ipc 来通信，从而构建一个更内聚，松耦合、易于维护和扩展的系统，更好的实现 Chrome 简单、稳定、高速、安全的目标。</p>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理——http</title>
      <link href="2020/11/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94http/"/>
      <url>2020/11/12/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94http/</url>
      
        <content type="html"><![CDATA[<p>XHR -&gt; Request Headers -&gt; view source</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /shakespeare/jsd/exchange_rates/current HTTP/1.1</span><br><span class="line">Host: www.jianshu.com</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Accept: application/json</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36</span><br><span class="line">Sec-Fetch-Site: same-origin</span><br><span class="line">Sec-Fetch-Mode: cors</span><br><span class="line">Sec-Fetch-Dest: empty</span><br><span class="line">Referer: https://www.jianshu.com/p/6dbcc3aff98b</span><br><span class="line">Accept-Encoding: gzip, deflate, br</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9,en;q=0.8</span><br><span class="line">Cookie: __yadk_uid=b5C1W8FTbvn2CMErMOWLRvRBfqtcfZyR; _ga=GA1.2.1361763253.1581860875; __gads=ID=e22e0402239bcdd8-22e9450047c200f4:T=1593494469:RT=1593494469:S=ALNI_MbgAdC1pDH1wBUKwaWC6teLb00cyg; read_mode=day; default_font=font2; locale=zh-CN; UM_distinctid=175537082be1a1-08e93312a69e19-4d112a29-38400-175537082bf1b5; CNZZDATA1278917561=2017572215-1603418142-https%253A%252F%252Fwww.jianshu.com%252F%7C1603447023; sensorsdata2015jssdkcross=%7B%22distinct_id%22%3A%2216e7305e1e716c-046300c902b66b-123b6a5d-1024000-16e7305e1e881a%22%2C%22%24device_id%22%3A%2216e7305e1e716c-046300c902b66b-123b6a5d-1024000-16e7305e1e881a%22%2C%22props%22%3A%7B%22%24latest_referrer%22%3A%22https%3A%2F%2Fwww.baidu.com%2Flink%22%2C%22%24latest_traffic_source_type%22%3A%22%E8%87%AA%E7%84%B6%E6%90%9C%E7%B4%A2%E6%B5%81%E9%87%8F%22%2C%22%24latest_search_keyword%22%3A%22%E6%9C%AA%E5%8F%96%E5%88%B0%E5%80%BC%22%7D%7D; _gid=GA1.2.1053313438.1605150552; _m7e_session_core=559108e9b8dcd6adff1770cd4662ce96; signin_redirect=https://www.jianshu.com/p/6dbcc3aff98b; Hm_lvt_0c0e9d9b1e7d617b3e6842e85b9fb068=1604707994,1604975982,1605150555,1605156601; _gat=1; Hm_lpvt_0c0e9d9b1e7d617b3e6842e85b9fb068=1605170209</span><br></pre></td></tr></table></figure><a id="more"></a><p>HTTP 是一种允许浏览器向服务器发起资源的请求的协议，是 Web 的基础。</p><h2 id="浏览器发起-HTTP-请求流程"><a href="#浏览器发起-HTTP-请求流程" class="headerlink" title="浏览器发起 HTTP 请求流程"></a>浏览器发起 HTTP 请求流程</h2><ol><li><p>构建请求</p><blockquote><p>GET /shakespeare/jsd/exchange_rates/current HTTP/1.1</p></blockquote></li><li><p>查找缓存<br>浏览器缓存是在本地保存资源副本，以供下次请求时直接使用的技术。如果浏览器资源的副本存在，请求被拦截，返回副本，结束请求。从而缓解服务器压力，提升性能。对于网站来说，缓存是实现资源加载最重要的部分。</p></li><li><p>准备 IP 和 端口 并等待 TCP 队列<br>如果浏览器请求缓存资源失败，就会进入网络请求。<br>怎么通过 url 获取 ip 地址和端口号呢？ip 地址是数字标识，从请求里面可获取，如下请求 ip 地址为 47.92.108.93：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Request URL: https://www.jianshu.com/shakespeare/jsd/exchange_rates/current</span><br><span class="line">Request Method: GET</span><br><span class="line">Status Code: 200 OK</span><br><span class="line">Remote Address: 47.92.108.93:443</span><br><span class="line">Referrer Policy: no-referrer-when-downgrade</span><br></pre></td></tr></table></figure></li></ol><p>ip 数字难记。我们一般记的是域名，如上请求 <code>jianshu.com</code>，需要使用 <strong>域名系统</strong> （Domain Name System，DNS）将域名和ip进行映射。浏览器有<code>DNS</code>数据缓存服务。<strong><code>总结下来：第一步浏览器从 DNS 缓存数据里面查找 ip，如果没有再请求 DNS 返回域名对应的 ip</code></strong><br>端口号在没有指定的情况下是 80 端口，像上面的案例中，端口号为 443。</p><blockquote><p>chrome 机制，同一个域名最多只建立 6 个 tcp 链接，多于 6 个请求会进入排队等待状态，走到进行中的请求完成。</p></blockquote><ol start="4"><li><p>建立 TCP 连接<br>三次握手，传输数据，断开链接</p></li><li><p>发送 HTTP 请求<br>建立 TCP 链接后浏览器和服务器便可以通信了。</p></li></ol><ul><li>发送请求行，包括请求方法、请求的 URI(Uniform Resource Identifier)统一资源标识、HTTP 版本协议<blockquote><p>GET /shakespeare/jsd/exchange_rates/current HTTP/1.1</p></blockquote></li></ul><p>上面的案例是 get 请求，除此之外还有 post 请求，即发送一些数据给服务器，浏览器会把需要发送给服务器的数据通过<code>请求体</code>发送。<br>发送请求行之后，浏览器还要以<code>请求头</code>形式发送一些其他信息，把浏览器的基本信息告诉给服务器。</p><blockquote><p>User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36<br>Host: <a href="http://www.jianshu.com" target="_blank" rel="noopener">www.jianshu.com</a><br>Cookie: __yadk_uid=b5C1W8FTbvn2CMErMOWLRvRBfqtcfZyR; _ga=GA1.2.1361763253.1581860875;</p></blockquote><h2 id="服务器处理-HTTP-请求"><a href="#服务器处理-HTTP-请求" class="headerlink" title="服务器处理 HTTP 请求"></a>服务器处理 HTTP 请求</h2><ol><li>返回请求<br>可以通过命令 <code>curl -i https://www.jianshu.com/p/6dbcc3aff98b</code> 查看返回的请求数据，如响应行，响应头，响应体等数据<br><code>curl -I jianshu.com</code> -I 只获取响应头和响应行数据。</li></ol><p>Response Headers</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: Tengine</span><br><span class="line">Date: Thu, 12 Nov 2020 08:36:49 GMT</span><br><span class="line">Content-Type: application/json; charset=utf-8</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">X-Frame-Options: DENY</span><br><span class="line">X-XSS-Protection: 1; mode=block</span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line">ETag: W/&quot;4a327be29535622a46f3b610df2a02c1&quot;</span><br><span class="line">Cache-Control: max-age=0, private, must-revalidate</span><br><span class="line">Set-Cookie: locale=zh-CN; path=/</span><br><span class="line">Set-Cookie: _m7e_session_core=559108e9b8dcd6adff1770cd4662ce96; domain=.jianshu.com; path=/; expires=Thu, 12 Nov 2020 14:36:49 -0000; secure; HttpOnly</span><br><span class="line">X-Request-Id: 503c9b5a-3190-4e2a-9060-ead15564caa1</span><br><span class="line">X-Runtime: 0.007053</span><br><span class="line">Strict-Transport-Security: max-age=31536000; includeSubDomains; preload</span><br><span class="line">Content-Encoding: gzip</span><br></pre></td></tr></table></figure><p><strong>响应行</strong> <code>HTTP/1.1 200 OK</code> 协议版本与状态码。我们这里的状态码是 200 表示处理成功，遇到其它无法处理或处理出错的会有其它的状态码，如：没有找到返回页面 404。301 状态码表示重定向，需要重定向的网址包含在 <strong>响应头</strong> Location 字段中。<br>服务器随响应向浏览器发送 <strong>响应头</strong> 信息。包括了：<br><code>Date: Thu, 12 Nov 2020 08:36:49 GMT</code> 返回数据的时间；<br><code>Content-Type: application/json; charset=utf-8</code> 返回数据的类型；<br><code>Set-Cookie: _m7e_session_core=559108e9b8dcd6adff1770cd4662ce96; domain=.jianshu.com; path=/; expires=Thu, 12 Nov</code> 服务器在客户端保存的 cookie。</p><ol start="2"><li>断开链接<br>通常情况下，服务向浏览器返回数据后，会断开链接。<code>Connection: keep-alive</code> 表示 TCP 连接在发送后保持打开状态，浏览器可以通过同一个 TCP 发送请求。<strong>保持 TCP 连接可以省去下次请求建立连接的时间，提升资源加载速度</strong></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器工作原理——数据的传输过程</title>
      <link href="2020/11/11/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B/"/>
      <url>2020/11/11/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BC%A0%E8%BE%93%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>First Print 简称 FP，是指页面加载到首次开始绘制的时长。网络的加载速度是影响 FP 的重要因素。网络协议 HTTP、WebSocket 都是基于 TCP/IP 的。那么 web 世界中，tcp/ip 是如何工作的呢？</p><h2 id="数据的传输过程"><a href="#数据的传输过程" class="headerlink" title="数据的传输过程"></a>数据的传输过程</h2><p>互联网中数据是通过数据包传递。如果数据量很大时会拆成很多小的数据包传输。</p><h3 id="1-数据包如何送达主机"><a href="#1-数据包如何送达主机" class="headerlink" title="1.  数据包如何送达主机"></a>1.  数据包如何送达主机</h3><p>数据包在互联网上进行传输需要符合网际协议（Internet Protocol, IP）标准。</p><div id="sequence-0"></div><a id="more"></a><h3 id="2-主机如何将数据转交给应用"><a href="#2-主机如何将数据转交给应用" class="headerlink" title="2.  主机如何将数据转交给应用"></a>2.  主机如何将数据转交给应用</h3><p>通过用户数据协议（User Datagram Protocol）把指定的数据包发送给指定的程序。UDP 通过端口号把数据包分发给正确的程序。</p><div id="sequence-1"></div><h3 id="3-数据是如何被完整地送达应用程序"><a href="#3-数据是如何被完整地送达应用程序" class="headerlink" title="3.  数据是如何被完整地送达应用程序"></a>3.  数据是如何被完整地送达应用程序</h3><p>UDP 存在两个问题：</p><ol><li>传输过程中容易丢包；</li><li>大文件拆分成多个小文件传输，这些文件会经过不同的路由器，在不同的时间送达接收端。UDP 不知道如何组装这些数据包，把这些数据包还原成完整的文件。</li></ol><p>TCP(Transmission Control Protocol,传输控制协议)。面向链接、可靠、基于字节流的传输层通信协议。</p><p>TCP 的优点在于：</p><ol><li>对于丢包的情况会提供重传机制；</li><li>TCP 引入数据包排序机制，保证乱序数据包组合成一个完整的文件。</li></ol><div id="sequence-2"></div><p>TCP 的生命周期包括：<code>建立连接</code>、<code>传输数据</code>、<code>断开链接</code></p><ul><li><code>建立连接阶段</code>。这个阶段是通过“三次握手”来建立客户端和服务器之间的连接。TCP 提供面向连接的通信传输。面向连接是指在数据通信开始之前先做好两端之间的准备工作。所谓三次握手，是指在建立一个 TCP 连接时，客户端和服务器总共要发送三个数据包以确认连接的建立。</li><li><code>传输数据阶段</code>。在该阶段，接收端需要对每个数据包进行确认操作，也就是接收端在接收到数据包之后，需要发送确认数据包给发送端。所以当发送端发送了一个数据包之后，在规定时间内没有接收到接收端反馈的确认消息，则判断为数据包丢失，并触发发送端的重发机制。同样，一个大的文件在传输过程中会被拆分成很多小的数据包，这些数据包到达接收端后，接收端会按照 TCP 头中的序号为其排序，从而保证组成完整的数据。</li><li><code>断开连接阶段</code>。数据传输完毕之后，就要终止连接了，涉及到最后一个阶段“四次挥手”来保证双方都能断开连接。<script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">Note left of 主机A: 主机A\n上层数据包交给\n网络层Note left of 主机A: 主机A\n网络层带ip头与数据包\n交给底层主机A-->主机B:主机A通过底层将数据包与ip头交给主机BNote right of 主机B: 主机B\n网络层数据包\n交给上层Note right of 主机B: 数据包到达\n主机B上层</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script><textarea id="sequence-1-code" style="display: none">上层-->传输层:主机A\n上层将数据包给到\n传输层传输层-->网络层:主机A传输层\n将数据包与UDP头\n给到网络层网络层-->底层:主机A\n将数据包、UDP外加IP头\n给到低层底层->底层:主机A底层\n将数据、UDP头、IP 头\n给到主机B底层-->网络层:网络层解开ip，\n将数据与UDP给到传输层网络层-->传输层:传输层解开 udp 头，\n识别端口号将数据\n给到上层应用上层->上层:主机B某应用\n最终拿到数据</textarea><textarea id="sequence-1-options" style="display: none">{"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-1-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-1-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-1", options);</script><textarea id="sequence-2-code" style="display: none">上层-->传输层:主机A\n上层将数据包给到\n传输层传输层-->网络层:主机A传输层\n将数据包与TCP头\n给到网络层网络层-->底层:主机A\n将数据包、TCP外加IP头\n给到低层底层->底层:主机A底层\n将数据、TCP头、IP 头\n给到主机B底层-->网络层:网络层解开ip，\n将数据与TCP给到传输层网络层-->传输层:传输层解开 TCP 头，\n识别端口号将数据\n给到上层应用上层->上层:主机B某应用\n最终拿到数据</textarea><textarea id="sequence-2-options" style="display: none">{"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-2-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-2-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-2", options);</script></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浏览器兼容问题</title>
      <link href="2020/11/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/"/>
      <url>2020/11/10/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="windows-safari-浏览器对于-UTC-amp-amp-GMT-时间转换存在兼容性问题。"><a href="#windows-safari-浏览器对于-UTC-amp-amp-GMT-时间转换存在兼容性问题。" class="headerlink" title="windows safari 浏览器对于 UTC &amp;&amp; GMT 时间转换存在兼容性问题。"></a>windows safari 浏览器对于 UTC &amp;&amp; GMT 时间转换存在兼容性问题。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="comment">// Tue Nov 10 2020 11:58:59 GMT+0800 (China Standard Time)</span></span><br></pre></td></tr></table></figure><p>GMT(Greenwich Mean Time) 格林尼治标准时间<br>GMT+0800(China Standard Time) 北京时间</p><p>UTC(Universal Time Coordinated)协调世界时。当前的世界标准时间。<br>UTC 标准时间格式 <code>2019-11-11T00:00:00.000Z</code></p><ol><li><code>T</code>代表使用 UTC 时间。</li><li><code>Z</code>是 UTC 的偏移量，表示 UTC 时间与本地时间的差别，即时差。<ul><li>Z 表示 0 时区，写 Z 或不写时表示不偏移。即 GMT/0 时区。</li><li>需要偏移时，将Z替换为真实的偏移量。偏移量可用以下形式表示: ±[hh]:[mm]、±[hh][mm]、±[hh]。</li><li>目前有39个UTC偏移量（当伊朗试行夏令时时只有38个）</li></ul></li><li>时间数值表示在限定 UTC 格式和偏移量的情况下，偏移时区的本地时间。</li></ol><p>UNIX TIME，也叫做 POSIX 时间或纪元时间（Epoch Time)，记录时间流逝，也叫时间戳。定义为从1970-01-01T00:00:00开始流逝的秒数，不考虑闰秒。之后的时间是正数，之前的是负数。</p><p>需要补充，转换方法</p>]]></content>
      
      
      
        <tags>
            
            <tag> grocery </tag>
            
            <tag> browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 数组</title>
      <link href="2020/11/06/Javascript-%E6%95%B0%E7%BB%84/"/>
      <url>2020/11/06/Javascript-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="数组重组方法"><a href="#数组重组方法" class="headerlink" title="数组重组方法"></a>数组重组方法</h2><h3 id="1-数组转换成字符串"><a href="#1-数组转换成字符串" class="headerlink" title="1.  数组转换成字符串"></a>1.  数组转换成字符串</h3><ul><li><p>Array.prototype.toString() 将数组转换成 <strong>以逗号分隔的字符串</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">"cookie"</span>, <span class="string">"local storage"</span>, <span class="string">"session storage"</span>, <span class="string">"web storage"</span>];</span><br><span class="line">arr.toString();</span><br><span class="line"><span class="comment">// "cookie,local storage,session storage,web storage"</span></span><br></pre></td></tr></table></figure></li><li><p>Array.prototype.join([separator]) 将数组转换成 <strong>指定分隔符的字符串</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arr.join(<span class="string">'/'</span>)</span><br><span class="line"><span class="comment">// "cookie/local storage/session storage/web storage"</span></span><br></pre></td></tr></table></figure><ul><li><code>注意：</code> 如果数组只有一个元素，则该连接字符不显示<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">'category'</span>]</span><br><span class="line">arr1.join(<span class="string">'/'</span>)</span><br><span class="line"><span class="comment">// "category"</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="2-创建新数组"><a href="#2-创建新数组" class="headerlink" title="2.  创建新数组"></a>2.  创建新数组</h3><ul><li>Array.prototype.concat() 合并两个以上数组，最终拿到生成后的新数组，生成的新数组是需要合并的数组的浅拷贝。<ul><li><code>注意：</code>如果将引用类型复制到数组中,引用类型改变，新的数组数组发生改变，反之一样。因为他们指向同一个引用对象。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr_reference_type = [[<span class="string">'concat'</span>],<span class="string">'array prototype function'</span>];</span><br><span class="line"><span class="keyword">var</span> arr_concat = arr.concat(arr_reference_type);</span><br><span class="line"><span class="built_in">console</span>.log(arr_concat);</span><br><span class="line"><span class="comment">// ["cookie", "local storage", "session storage", "web storage", ["concat"], "array prototype function"]</span></span><br><span class="line"><span class="comment">// 修改 arr_reference_type</span></span><br><span class="line">arr_reference_type[<span class="number">0</span>].push(<span class="string">'slice'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr_concat);</span><br><span class="line"><span class="comment">// ["cookie", "local storage", "session storage", "web storage", ["concat", "slice"], "array prototype function"]</span></span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3 单位</title>
      <link href="2020/10/22/CSS-css3-%E5%8D%95%E4%BD%8D/"/>
      <url>2020/10/22/CSS-css3-%E5%8D%95%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="CSS3-中新增的单位"><a href="#CSS3-中新增的单位" class="headerlink" title="CSS3 中新增的单位"></a>CSS3 中新增的单位</h3><ul><li>ch 字符 0（零的宽度）；</li><li>rem 根元素（html元素）的 font-size；<blockquote><p>font size of the root element<br>Equal to the computed value of ‘font-size’ on the root element. when specified on the font-size property of the root element, the rem units refer to the property’s initial value.<br>This means that 1rem equals the the font-size html element (which for most browsers has a default value of 16px)</p></blockquote></li></ul><ol><li>字体或宽、高等单位，值根据 html 元素 font-size 计算得出</li><li>动态修改 html 的 font-size，实现适配</li><li>IOS6 和 Android 2.1 以上基本适配</li><li>1rem = html’s font size(大多数浏览器是 16px)</li></ol><ul><li>em 是一个相对单位，非固定值。相对于其父 font-size 计算</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每天 30 词</title>
      <link href="2020/10/22/EN-words/"/>
      <url>2020/10/22/EN-words/</url>
      
        <content type="html"><![CDATA[<p>词根 deep<br>deep adj.深的、低沉的、深奥的<br>deepen vt.使加深；使强烈；使低沉/vi.变沉；更低沉<br>deepen the reform 深化改革<br>the need to conceal the mourning deepened grief<br>掩盖悲痛的需要加深了痛楚</p><a id="more"></a><p>cottage n.村舍、小屋<br>cot 婴儿床<br>I was halfway back to cottage<br>我在回小屋的半路上<br>We’ve got you a lovely little cottage on Spencer Hill<br>我们在斯宾塞山给你准备了一个舒适的小屋</p><p>gardener n.园丁，花匠，园艺爱好者<br>garden n.花园</p><p>The lawn hasn’t been moved. I’ve had it. We are getting a real gardener.<br>草坪根本没有修剪，我受够。我们需要一个专业的园丁<br>They can hire a gardener to do the work<br>他们可以聘请园丁来做这项工作</p><p>词根 cent 唱<br>incentive n.刺激；鼓励；激励</p><p>Awards provide an incentive for young people to improve their skills<br>奖励为年轻人提高他们的技能提供了动力</p><p>词根 avi 鸟<br>aviation n.航空，航空学，飞机制造业</p><p>With the development of aviation, the relations between nations become closer<br>随着飞机制造业的发展，国家间的关系变得更亲近了</p><p>词根 nerv 神经<br>nerve n.神经、勇敢、胆量；厚颜</p><p>have nerve 有勇气<br>get on one’s nerves 惹某人心烦<br>lose one’s nerve 失去勇气</p><p>there are close one million nerve fibers that connect the eyeball to the brain<br>连接眼球和大脑的细胞有接近 100 万个<br>Mum’s chatter often gets on his nerves<br>妈妈的唠叨经常让他心烦</p><p>词根 loc 地点<br>locate vi 定位、定居 vt 探明、找出、安置<br>locate in 在某一点设置；在…定居；坐落于<br>The university is located in a quite community<br>这所大学坐落于安静的社区</p><p>saint n.圣人；圣徒</p><p>After he died, the Church declared him a saint.<br>在他去世后，他生前所在教堂宣布他为圣徒</p><p>collaboration n.合作；勾结；通敌</p><p>There is substantial collaboration with neighboring departments<br>相邻的几个院系进行了通力合作</p><p>boarder 住宿生</p><p>词根 cell 密室，狭窄的空间<br>The box of papers had been stored in a cellar at the family home.<br>那盒文件已经存放在家里的地窖里</p><p>awkward adj.笨拙的；尴尬的；难操纵的</p><p>We are in some sort of an awkward position.<br>我们处于某种尴尬的境地</p><p>词根 broch 刺；缝<br>brochure n. 小册子</p><p>Please send me a copy of your company brochure.<br>请寄给我一份贵公司的宣传册</p><p>vain adj. 徒劳的；自负的；</p><p>be vain of<br>be vain about 为…自负<br>in vain 徒劳、无效</p><p>a lot of effort is made in vain.<br>很多努力都白费了<br>I was singing in a vain effort to cheer him up.<br>我唱歌试图让他高兴起来，结果白费力气</p><p>battalion n.军队；军营</p><p>He joined the second battalion of the Grenadier Guards.<br>他加入了英国近卫步兵第一团第二营</p><p>campus culture 校园文化<br>enterprise image 企业形象<br>heterogenous culture 异质文化<br>run out of 用完；耗尽<br>part with 放弃，交出，卖掉<br>look to 指望、依靠、展望<br>out of stock 无现货<br>May Fourth Movement 五四运动<br>air conditioner 空调<br>die out 逐渐消亡；灭绝<br>emancipate people’s minds 解放思想<br>strike off 砍掉；把…除名<br>member of a standing committee 常务委员</p><p>词根 tein 保持<br>protein n.蛋白质</p><p>protein-rich food 富含蛋白质的食物<br>Participating restaurants must promise to offer at least one children’s meal that has fewer than 600 calories, no soft drinks and at least two items from the following food groups: fruits, vegetables, whole grains, lean protein or low-fat dairy<br>参与的餐厅必须承诺提供至少一种儿童食物，这种儿童食物热量少于 600 卡路里，不包含饮料并且至少从以下食物组合中选择两项：水果，蔬菜，全谷类食物，瘦肉蛋白或低脂乳品</p><p>词根 mens 计算、测量<br>dimension n.尺寸；面积；方面；特点；规模；范围<br>The forest fire rapidly assumed great dimensions because of the high wind<br>因为风大，森林大火面积迅速扩大</p><p>horizon n.地平线；眼界，见识</p><p>broaden one’s horizon 开阔眼界<br>on the horizon 即将发生</p><p>The sun poked over the horizon<br>太阳从地平线升起</p><p>try vt.试图；试验；审判 vi.尝试，努力；n.努力<br>He was tried taking a bribe 他因受贿被审讯</p><p>damp adj.潮湿的，微湿的；n.潮湿；vt.抑制<br>damp down 减弱，抑制</p><p>He knew how to damp the flaming fire down.<br>他知道怎么抑制燃烧的火焰<br>Today is damp, cold and miserable<br>今天寒冷、潮湿、难以忍受</p><p>buckle n.搭扣，扣环/vt.扣住；使弯曲；vt.用搭扣扣紧；（被）压垮、压弯<br>buckle up 系上安全带<br>buckle down 开始认真从事；倾全力<br>The plane will take off soon, please buckle up your seat belts.<br>飞机马上起飞，请系紧您的安全带</p><p>ingredient n.组成部分，成分；原料；要素、因素</p><p>handful n.一把，少数，一小撮<br>a handful of 一把；少量的<br>In 1993, few corporations had a web page, and slightly a handful allowed one to order product or services online.<br>1993 年时，很少有公司拥有自己的网站。而只有几个公司允许人们通过网络下单或购买服务<br>She scooped up a handful of sand and let it trickle through her fingers.<br>她抓了一把沙子，然后让它们从指缝间慢慢漏掉</p><p>deficit n.赤字，亏空，亏损<br>a budget deficit 预算赤字<br>attention deficit hyperactivity disorder 多动症评估<br>This year’s profits have balanced last year’s trade deficit.<br>今年的盈利已经弥补了去年的贸易逆差</p><p>pool vt.共有；n.水塘；游泳池；共有物<br>pool out efforts 共同努力<br>together out efforts 共同努力<br>The girl has no choice but to dive into the pool<br>女孩别无选择，只能跳进水塘里</p><p>bold adj.大胆的<br>bold goals attract bold people 大胆的目标吸引大胆的人<br>She knew she had to make a bold move to fully to her new future.<br>她知道她必须采取大胆行动，全身心投入新的未来</p><p>restrain v.阻止；控制</p><p>compendium n.事实、概要<br>Compendium of Materia Medica 本草纲目</p><p>demo 人民；cracy 统治<br>democracy  n.民主，民主制；民主国家</p><p>As I would not be a slave, so I would not be a master. This expresses my idea of democracy.<br>我不想当奴隶，我也不愿做别人的主人。这是我对民主诠释。</p><p>guard n.守卫；护卫队、vi.保卫、监视<br>guard against 防止；提防<br>on guard 警惕；站岗<br>catch someone off guard 使人措手不及；<br>He said the Coast Guard should have a plan to respond to problems that may arise.<br>他说海岸护卫队应该有计划回复可能遇到的问题<br>These is no one to guard these isolated farms against attack.<br>没有人守卫那些孤立的农场抵御袭击</p><p>fall vi.落下；突然；来到/n.秋天；崩溃<br>fall back on 借助于，依靠<br>fall behind 落后，落在…后面<br>fall for 受…的骗；迷恋</p><p>session n.会议、一场<br>Several bills were enacted at the end of this session of Parliament<br>这场国会结束时，好几个提案制定成法律。</p><p>confident adj.坚信的，自信的<br>In recent years the capital’s culinary scene has developed to the point that it is now confident of its ability to please the tastes of any international visitor.<br>近几年，首都的餐饮业已经发展到有能力满足任何国际游客的品味。</p><p>vers = to turn<br>conversion n.转换、变换<br>The warehouse was undergoing conversion into apartments<br>这座仓库正在被改建成公寓</p><p>tain = to hold<br>container n.集装箱；容器<br>She trickled the water into container<br>她将水慢慢注入容器里</p>]]></content>
      
      
      
        <tags>
            
            <tag> 英文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macos 常用命令</title>
      <link href="2020/10/22/bash/"/>
      <url>2020/10/22/bash/</url>
      
        <content type="html"><![CDATA[<h3 id="macos-解压文件-rar"><a href="#macos-解压文件-rar" class="headerlink" title="macos 解压文件 .rar"></a>macos 解压文件 .rar</h3><p>commands 参数</p><blockquote><p><code>e</code>             Extract files without archived paths # 解压缩文件到当前目录<br>  <code>l[t[a],b]</code>     List archive contents [technical[all], bare]  # 列出压缩文件<br>  <code>p</code>             Print file to stdout #打印文件标准输出设备<br>  <code>t</code>             Test archive files # 测试压缩文件<br>  <code>v[t[a],b]</code>     Verbosely list archive contents [technical[all],bare] # 详细列出压缩文件信息<br>  <code>x</code>             Extract files with full path # 用绝对路径解压缩文件</p></blockquote>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ unrar x x.rar</span><br></pre></td></tr></table></figure>  <a id="more"></a><h3 id="macos-文件重命名-更多相关"><a href="#macos-文件重命名-更多相关" class="headerlink" title="macos 文件重命名 更多相关"></a>macos 文件重命名 <a href="https://www.cnblogs.com/liujiacai/p/8313548.html" target="_blank" rel="noopener">更多相关</a></h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mv 切图图片资源/ static</span><br></pre></td></tr></table></figure><h3 id="macos-复制文件"><a href="#macos-复制文件" class="headerlink" title="macos 复制文件"></a>macos 复制文件</h3>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp webpack.config.js webpack.dev.config.js</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 杂货 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue N 问</title>
      <link href="2020/10/21/Vue/"/>
      <url>2020/10/21/Vue/</url>
      
        <content type="html"><![CDATA[<h3 id="vue-的特点"><a href="#vue-的特点" class="headerlink" title="vue 的特点"></a>vue 的特点</h3><ul><li><p>轻量级框架</p><blockquote><p>自动追踪依赖模板表达式和计算属性，提供 MVVM (Mode-View-ViewMode) 双向绑定和可组合的组件系统，API 简单、灵活、易上手</p></blockquote></li><li><p>双向数据绑定</p><blockquote><p>双向数据绑定是 vue.js 的核心，其专注于 View 层。ViewMode 负责连接 View 和 Mode，保证视图和数据一致。 ViewMode 要做的是：MODE Listen and Data Bindings</p></blockquote></li><li><p>指令</p><blockquote><p>vue.js 与 页面交互主要通过指令完成，指令的作用是当表达式值改变时，相应将其形为应用到 DOM 上</p></blockquote></li><li><p>组件化</p></li><li><p>客户端路由</p></li><li><p>状态管理</p></li></ul><a id="more"></a><hr><h3 id="使用-npm-方式搭建-vue-单页面应用"><a href="#使用-npm-方式搭建-vue-单页面应用" class="headerlink" title="使用 npm 方式搭建 vue 单页面应用"></a>使用 npm 方式搭建 vue 单页面应用</h3><ol><li><p>验证 npm 是否正确安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$   npm -v  <span class="comment">#查看 npm 版本</span></span><br></pre></td></tr></table></figure></li><li><p>安装 vue</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$   npm install vue</span><br></pre></td></tr></table></figure></li><li><p>安装 vue-cli 脚手架</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$   npm install --global vue-cli</span><br></pre></td></tr></table></figure></li><li><p>初始化一个基于 webpack 的新模板</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$   vue init webpack my-project</span><br></pre></td></tr></table></figure></li><li><p>启动项目，验证搭建结果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$   <span class="built_in">cd</span> my-project</span><br><span class="line">$   npm install  <span class="comment">#安装依赖包</span></span><br><span class="line">$   npm run dev</span><br></pre></td></tr></table></figure><p><strong><code>看到下图，恭喜你，环境搭建成功</code></strong></p></li></ol><p><img src="https://www.runoob.com/wp-content/uploads/2017/01/56219E04-D156-43EC-AC59-BFE7E38A62C3.jpg" alt="vue init page"></p><hr>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS Margin auto</title>
      <link href="2020/10/19/CSS-Margin-auto/"/>
      <url>2020/10/19/CSS-Margin-auto/</url>
      
        <content type="html"><![CDATA[<p>众所周知，margin: auto 可以使<code>块级元素</code>水平居中。这里要探讨的是为什么会居中，原理是什么？翻看了<a href="https://wiki.developer.mozilla.org/zh-CN/docs/Web/CSS/margin" target="_blank" rel="noopener">MDN</a>，相关描述只有一句，“让浏览器自己选择一个外边距”。</p><p>自动占满可用空间，可用空间平均分配，占满后元素居中，如下图。<br><img src="/images/css/margin-auto-1.jpg" alt="margin:auto"></p><a id="more"></a><h2 id="margin-auto-position-absolute-实现居中"><a href="#margin-auto-position-absolute-实现居中" class="headerlink" title="margin: auto + position: absolute 实现居中"></a>margin: auto + position: absolute 实现居中</h2><p>首先声明：只标题代码是无法实现居中的，下面进行一次解析</p><ol><li>以下两张图片，说明了，当元素设置 position: absolute，就相当于复制其定位元素的可用空间，但当前元素的可用空间仍为当时元素 content width + padding + border + margin<br><img src="/images/css/margin-auto-2.jpg" alt="margin:auto"></li></ol><hr><p><img src="/images/css/margin-auto-3.jpg" alt="margin:auto"></p><ol start="2"><li>left: 0; right: 0; 相当于可用空间扩展为其定位元素的可用空间(也就是上图中的 200px 或 1280px)</li><li>margin: auto 进行平均分配可用空间，实现居中<br><img src="/images/css/margin-auto-4.jpg" alt="margin:auto"></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS position absolute</title>
      <link href="2020/10/12/CSS-position-absolute/"/>
      <url>2020/10/12/CSS-position-absolute/</url>
      
        <content type="html"><![CDATA[<blockquote><p>position: absolute 与 float 一样，使用后<strong>脱离文档流</strong>；具有<strong>破坏性</strong>和<strong>包裹性</strong>；使用会创建 BFC(Block_formatting_context)。<br>absolute 相对于最近的非 ‘static’ 元素定位；如果该元素不存在，则相对于 initial container block 定位</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 300px; height: 100px; background: #efefef;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px; height: 50px; background: #390;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/css/position-absolute-1.jpg" alt="position-absolute-1"></p><a id="more"></a><h3 id="1-具有破坏性-子元素加入-position-absolute-至父元素高度塌陷"><a href="#1-具有破坏性-子元素加入-position-absolute-至父元素高度塌陷" class="headerlink" title="1. 具有破坏性 子元素加入 position: absolute; 至父元素高度塌陷"></a>1. <strong><code>具有破坏性</code></strong> 子元素加入 position: absolute; 至父元素高度塌陷</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 300px; height: 100px; background: #efefef;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px; height: 50px; background: #390; position: absolute"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/css/position-absolute-2.jpg" alt="position-absolute-2"></p><h3 id="2-具有包裹性-父元素使用-position-absolute，父元素包裹子元素"><a href="#2-具有包裹性-父元素使用-position-absolute，父元素包裹子元素" class="headerlink" title="2. 具有包裹性 父元素使用 position: absolute，父元素包裹子元素"></a>2. <strong><code>具有包裹性</code></strong> 父元素使用 position: absolute，父元素包裹子元素</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 300px; height: 100px; background: #efefef; position: absolute"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width: 100px; height: 50px; background: #390;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/css/position-absolute-3.jpg" alt="position-absolute-3"></p><h3 id="3-创建-BFC-Block-formatting-context-https-helenzhanglp-github-io-2019-02-20-CSS-BFC-使用-position-absolute，会形成块级作用域，行内元素可使用-width-height-等属性。"><a href="#3-创建-BFC-Block-formatting-context-https-helenzhanglp-github-io-2019-02-20-CSS-BFC-使用-position-absolute，会形成块级作用域，行内元素可使用-width-height-等属性。" class="headerlink" title="3. 创建 [BFC(Block_formatting_context)](https://helenzhanglp.github.io/2019/02/20/CSS-BFC/) 使用 position: absolute，会形成块级作用域，行内元素可使用 width/height 等属性。"></a>3. <strong><code>创建 [BFC(Block_formatting_context)](https://helenzhanglp.github.io/2019/02/20/CSS-BFC/)</code></strong> 使用 position: absolute，会形成块级作用域，行内元素可使用 width/height 等属性。</h3><p><a href="https://github.com/HelenZhangLP/demo/blob/master/postionAbsoluteFixedBlock/index.html" target="_blank" rel="noopener">以下 demo 代码</a></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>navigator1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>navigator2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>navigator3<span class="tag">&lt;<span class="name">i</span>&gt;</span>vip icon<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">2px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f90</span>;</span><br><span class="line">  <span class="attribute">text-indent</span>: -<span class="number">9999px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">11px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(http://img.mukewang.com/<span class="number">545304730001307300280011</span>.gif) no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/demo/positionAbsoluteFixedBlock/position-absolute-block-1.jpg" alt="position-absolute-block-1"><br>上图是一个注释掉<code>position: absolute</code>后的错误示例，如 <code>&lt;i&gt;</code> 非块级元素，<code>text-indent: -9999px</code> 不生效，<code>margin: -2px 0 0 1px</code>在垂直方向同样不生效。注释文本撑开，显示vip图片，若无<code>vip icon</code>，背影图同样不显示，因为 <code>width/height</code> 对非块级元素不生效。<code>放开position: absolute 注释后，BFC 化后，实现效果如下图</code><br><img src="/images/demo/positionAbsoluteFixedBlock/position-absolute-block-2.jpg" alt="position-absolute-block-2"></p><h3 id="4-demo-图标与提示文本对齐，效果如下图"><a href="#4-demo-图标与提示文本对齐，效果如下图" class="headerlink" title="4. demo-图标与提示文本对齐，效果如下图"></a>4. demo-图标与提示文本对齐，效果如下图</h3><p><img src="/images/css/position-absolute-4.jpg" alt="图标与文本对齐"></p><blockquote><ol><li>利用 float</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"regist-remark regist-warn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-warn"</span> <span class="attr">style</span>=<span class="string">"float: left"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">style</span>=<span class="string">"font-style: normal;"</span>&gt;</span>邮箱格式不准确<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>利用 position</li></ol></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"regist-remark regist-warn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"icon-warn"</span> <span class="attr">style</span>=<span class="string">"position: absolute; margin-left: -20px;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>邮箱格式不准确</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-demo-利用-position-absolute-在提示文字溢出显出区域时，不折行或隐藏，正常整行显示。"><a href="#5-demo-利用-position-absolute-在提示文字溢出显出区域时，不折行或隐藏，正常整行显示。" class="headerlink" title="5. demo-利用 position: absolute, 在提示文字溢出显出区域时，不折行或隐藏，正常整行显示。"></a>5. demo-利用 position: absolute, 在提示文字溢出显出区域时，不折行或隐藏，正常整行显示。</h3><h3 id="6-demo-利用-position-absolute，实现遮罩层"><a href="#6-demo-利用-position-absolute，实现遮罩层" class="headerlink" title="6. demo-利用 position: absolute，实现遮罩层"></a>6. demo-利用 position: absolute，实现遮罩层</h3><blockquote><p>position: absolute 在文档流之外创建了一个层<br>  left: 0 + right: 0; 新创建的层拉伸至与定位层等宽，相当于 width: 100%;<br>  同理： left: 0 + right: 50% = width: 50%;（可用于一半遮罩）<br>  top: 0 + bottom: 0; 新创建的层拉伸至与定位层等高，相当于 height: 100%;</p></blockquote><p>  <strong><code>注意：</code></strong> 这种方法适用于 <code>IE7+</code> 以上浏览器</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: .<span class="number">5</span>;</span><br><span class="line">  filter: alpha(opacity=50); // 兼容 IE 浏览器</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 你不知道的百分比</title>
      <link href="2020/09/21/CSS-%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94/"/>
      <url>2020/09/21/CSS-%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E7%99%BE%E5%88%86%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body.offsetHeight</span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure><ul><li><p>宽设置百分比</p><blockquote><p>根据父元素的宽，浏览器端，根元素 html、body 宽为屏可视区的宽</p></blockquote></li><li><p>高设置百分比</p><blockquote><p>根据父元素的高运算，如上 code ，浏览器 body 未设置高，所以设置百分比要特别注意。</p></blockquote></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>, <span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>padding 设置百分比<blockquote><p>根据父元素宽运算</p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 实画滚动</title>
      <link href="2020/04/23/CSS-%E5%AE%9E%E4%BD%93%E6%BB%9A%E5%8A%A8/"/>
      <url>2020/04/23/CSS-%E5%AE%9E%E4%BD%93%E6%BB%9A%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="CSS-动画实现滚动"><a href="#CSS-动画实现滚动" class="headerlink" title="CSS 动画实现滚动"></a>CSS 动画实现滚动</h3><blockquote><p>animation: animation-name（动画名称） animation-duration（动画完成一个周期花费的秒、毫秒）</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.marquee</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1070px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">animation</span>: roll-animation <span class="number">50s</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 规定动画</span><br><span class="line"><span class="keyword">@keyframes</span> animation-roll &#123;</span><br><span class="line">  <span class="selector-tag">from</span>: &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">50px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">to</span>: &#123;</span><br><span class="line">    <span class="attribute">z-index</span>: -<span class="number">100px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>android 问题</title>
      <link href="2020/04/21/android-%E9%97%AE%E9%A2%98/"/>
      <url>2020/04/21/android-%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><blockquote><p>安卓启动 10.0.2.2 =&gt; localhost</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 疑难 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>package.json</title>
      <link href="2020/04/17/package-json/"/>
      <url>2020/04/17/package-json/</url>
      
        <content type="html"><![CDATA[<p>###　browserslist <a href="https://cli.vuejs.org/zh/guide/browser-compatibility.html#browserslist" target="_blank" rel="noopener">参考文档</a></p><h4 id="browserlist-具体描述-参考文档"><a href="#browserlist-具体描述-参考文档" class="headerlink" title="browserlist 具体描述 参考文档"></a>browserlist 具体描述 <a href="https://github.com/browserslist/browserslist" target="_blank" rel="noopener">参考文档</a></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"browserslist": [</span><br><span class="line">  "&gt; 1%",</span><br><span class="line">  <span class="string">"last 2 versions"</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript-正则-常用正则case</title>
      <link href="2020/03/10/Javascript-%E6%AD%A3%E5%88%99-%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99case/"/>
      <url>2020/03/10/Javascript-%E6%AD%A3%E5%88%99-%E5%B8%B8%E7%94%A8%E6%AD%A3%E5%88%99case/</url>
      
        <content type="html"><![CDATA[<h3 id="1、-Demo-1-——-身份证验证"><a href="#1、-Demo-1-——-身份证验证" class="headerlink" title="1、 Demo(1) —— 身份证验证"></a>1、 Demo(1) —— 身份证验证</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 15 位数字/18 位数字/17 位数字 + （X|x）</span></span><br><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="2、-Demo-2"><a href="#2、-Demo-2" class="headerlink" title="2、 Demo(2)"></a>2、 Demo(2)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="string">'&lt;html&gt;   $%^##sbd&lt;/html&gt;'</span></span><br><span class="line"><span class="comment">// 替换 html 代码</span></span><br><span class="line">name = value.replace(<span class="regexp">/[&lt;&gt;\w+/]/g</span>, <span class="string">''</span>);</span><br><span class="line"><span class="comment">// "   $%^##"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 替换是否存在表情</span></span><br><span class="line">name = name.replace(<span class="regexp">/\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDE4F]/g</span>, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 多个空格替换为一个空格</span></span><br><span class="line">name = name.replace(<span class="regexp">/\s+/g</span>, <span class="string">' '</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 特殊符号</span></span><br><span class="line"><span class="keyword">const</span> regEn = <span class="regexp">/[`~@#$%^&amp;*()_+&lt;&gt;?:"&#123;&#125;,./;'[]]/g</span>;</span><br><span class="line"><span class="keyword">const</span> regCn = <span class="regexp">/[·#￥（——）：；“”‘、|《》？、【】[]]/g</span>;</span><br><span class="line"></span><br><span class="line">name = name.replace(regEn, <span class="string">''</span>);</span><br><span class="line">name = name.replace(regCn, <span class="string">''</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 技术 </tag>
            
            <tag> RegExp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开发工具-Fiddler</title>
      <link href="2020/03/06/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Fiddler/"/>
      <url>2020/03/06/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7-Fiddler/</url>
      
        <content type="html"><![CDATA[<h3 id="安装教程推荐"><a href="#安装教程推荐" class="headerlink" title="安装教程推荐"></a><a href="https://www.cnblogs.com/yyhh/p/5140852.html" target="_blank" rel="noopener">安装教程推荐</a></h3><h3 id="坑一，配置后手机移动端不能正确连接抓包"><a href="#坑一，配置后手机移动端不能正确连接抓包" class="headerlink" title="坑一，配置后手机移动端不能正确连接抓包"></a>坑一，配置后手机移动端不能正确连接抓包</h3><blockquote><p>1、fiddler 配置完成后要重启后才生效<br>2、重启打开后，File-Capture Traffic</p></blockquote><h3 id="坑二，Inspector-syntaxView-乱码"><a href="#坑二，Inspector-syntaxView-乱码" class="headerlink" title="坑二，Inspector - syntaxView 乱码"></a>坑二，Inspector - syntaxView 乱码</h3><blockquote><p>工具栏选中 <code>Decode</code></p></blockquote><a id="more"></a><h3 id="坑三，-SecureClientPipeDirect-failed-System-Security-Authentication-Authenticatio"><a href="#坑三，-SecureClientPipeDirect-failed-System-Security-Authentication-Authenticatio" class="headerlink" title="坑三，!SecureClientPipeDirect failed: System.Security.Authentication.Authenticatio"></a>坑三，!SecureClientPipeDirect failed: System.Security.Authentication.Authenticatio</h3><blockquote><p>以 ios 为例，<code>设置 - 通用 - 关于本机 - 证书信任设置 - DO_NOT_TRUST_FiddlerRoot</code></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> develop tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码管理工具 - git</title>
      <link href="2020/03/03/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-git/"/>
      <url>2020/03/03/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-git/</url>
      
        <content type="html"><![CDATA[<h3 id="id-rsa-pub-存储位置"><a href="#id-rsa-pub-存储位置" class="headerlink" title="id_rsa.pub 存储位置"></a>id_rsa.pub 存储位置</h3><blockquote><p><code>windows</code> /c/Users/Administrator/.ssh/id_rsa.pub<br><code>mac</code> ~/.ssh/id_rsa.pub</p></blockquote><h3 id="git-删除分支"><a href="#git-删除分支" class="headerlink" title="git 删除分支"></a>git 删除分支</h3><ol><li>git 删除本地分支 <code>git branch -d branch-name</code>(如果删除不了 -D 强制删除)</li><li>git 删除远程分支 <code>git push origin --delete branch-name</code></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node 版管理</title>
      <link href="2020/02/17/Node-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
      <url>2020/02/17/Node-%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="nvm-node-版本管理工具"><a href="#nvm-node-版本管理工具" class="headerlink" title="nvm node 版本管理工具"></a>nvm node 版本管理工具</h3><h4 id="安装-use-the-following-cURL-command-脚本-具体参考-https-github-com-nvm-sh-nvm）"><a href="#安装-use-the-following-cURL-command-脚本-具体参考-https-github-com-nvm-sh-nvm）" class="headerlink" title="安装 use the following cURL command 脚本 [具体参考](https://github.com/nvm-sh/nvm）"></a>安装 use the following cURL command 脚本 [具体参考](<a href="https://github.com/nvm-sh/nvm）" target="_blank" rel="noopener">https://github.com/nvm-sh/nvm）</a></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install script use the following cURL command</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># attempts to add the source lines from the snippet below to the correct profile file (~/.bash_profile, ~/.zshrc, ~/.profile, or ~/.bashrc).</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$([ -z "$&#123;XDG_CONFIG_HOME-&#125;" ] &amp;&amp; printf %s "$&#123;HOME&#125;/.nvm" || printf %s "$&#123;XDG_CONFIG_HOME&#125;/nvm")</span>"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; \. <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span></span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>与 n 相同，nvm 同样是管理 node 版本的。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小灰算法-数组排序</title>
      <link href="2020/01/15/%E5%B0%8F%E7%81%B0%E7%AE%97%E6%B3%95-%E6%95%B0%E7%BB%84/"/>
      <url>2020/01/15/%E5%B0%8F%E7%81%B0%E7%AE%97%E6%B3%95-%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h2><p>不知道自己在干嘛，总之看这个很累，看完了，再看 <code>Array.prototy.sort()</code> 源码实现。还是一言难尽呐！不过，不管怎么样，既然看都看了，笔记还是写写。</p><a id="more"></a><h3 id="冒泡排序（bubble-sort）"><a href="#冒泡排序（bubble-sort）" class="headerlink" title="冒泡排序（bubble sort）"></a>冒泡排序（bubble sort）</h3><p>冒泡排序是一种基础的交换排序。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">14</span>,<span class="number">22</span>]</span><br></pre></td></tr></table></figure><h4 id="基础冒泡"><a href="#基础冒泡" class="headerlink" title="基础冒泡"></a>基础冒泡</h4><blockquote><p>相邻元素两两比较，相邻元素左边大于右边交换位置；否则位置不变。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">      num ++</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[j]</span><br><span class="line">        arr[j] = arr[j+<span class="number">1</span>]</span><br><span class="line">        arr[j+<span class="number">1</span>] = temp</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(num) <span class="comment">// 共 9 次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="冒泡优化"><a href="#冒泡优化" class="headerlink" title="冒泡优化"></a>冒泡优化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSortV2</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> isSorted = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;arr.length<span class="number">-1</span>-i; j++) &#123;</span><br><span class="line">      num ++</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[j]</span><br><span class="line">        arr[j] = arr[j+<span class="number">1</span>]</span><br><span class="line">        arr[j+<span class="number">1</span>] = temp</span><br><span class="line">        isSorted = <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(isSorted) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><blockquote><p>其实这个方法执行下的结果并不正确，我再三跟书的案例确认下。代码一毛一样，那么下面要怎么着。这个方法执行的前提是数组前后两部分，后一部分有序，前半部分无序而且前半部分阳大的数小于后半部分最小数。如：[3,2,4,1,2,5,6,7,8]</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSortV3</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;arr.length<span class="number">-1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> isSorted = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">var</span> sortBorder = arr.length - <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;sortBorder; j++) &#123;</span><br><span class="line">      num ++</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = arr[j]</span><br><span class="line">        arr[j] = arr[j+<span class="number">1</span>]</span><br><span class="line">        arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">        isSorted = <span class="literal">false</span>;</span><br><span class="line">        sortBorder = j;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(isSorted) <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(num) <span class="comment">// 共 11 次</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="鸡尾酒排序"><a href="#鸡尾酒排序" class="headerlink" title="鸡尾酒排序"></a>鸡尾酒排序</h4><blockquote><p>与冒泡相同，都是通过交换排序的。冒泡从左到右比较元素，进行单向位置交换。鸡尾酒元素比较和交换是<code>双向</code>。<br>鸡尾酒排序书中举了个特殊的例子 [8,2,3,4,5,6,7,1]，其大意是，只有问部分无序，确要比较 7 轮 。。。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cocktail</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> isSorted = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">var</span> temp = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="built_in">parseInt</span>(arr.length/<span class="number">2</span>); i++) &#123;</span><br><span class="line">    <span class="comment">// 由左到右交换，最大数排在最后面</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span> - i; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[j] &gt; arr[j+<span class="number">1</span>]) &#123;</span><br><span class="line">        temp = arr[j]</span><br><span class="line">        arr[j] = arr[j+<span class="number">1</span>]</span><br><span class="line">        arr[j+<span class="number">1</span>] = temp;</span><br><span class="line">        isSorted = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSorted) <span class="keyword">break</span>;</span><br><span class="line">    </span><br><span class="line">    isSorted = <span class="literal">true</span>;</span><br><span class="line">    temp = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 由右向左交换，最小数排在最前面</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k=arr.length-i<span class="number">-1</span>; k &gt; i; k--) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[k] &lt; arr[k<span class="number">-1</span>]) &#123;</span><br><span class="line">        temp = arr[k]</span><br><span class="line">        arr[k] = arr[k<span class="number">-1</span>]</span><br><span class="line">        arr[k<span class="number">-1</span>] = temp;</span><br><span class="line">        isSorted = <span class="literal">false</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (isSorted) <span class="keyword">break</span>;</span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="基础快速排序"><a href="#基础快速排序" class="headerlink" title="基础快速排序"></a>基础快速排序</h4><h4 id="基准元素选择"><a href="#基准元素选择" class="headerlink" title="基准元素选择"></a>基准元素选择</h4><h4 id="单边循环"><a href="#单边循环" class="headerlink" title="单边循环"></a>单边循环</h4>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript-正则</title>
      <link href="2020/01/13/Javascript-%E6%AD%A3%E5%88%99/"/>
      <url>2020/01/13/Javascript-%E6%AD%A3%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h2 id="RegExp"><a href="#RegExp" class="headerlink" title="RegExp"></a>RegExp</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/[\u4e00-\u9fa5]/</span></span><br><span class="line"><span class="built_in">console</span>.dir(reg)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * /[\u4e00-\u9fa5]/</span></span><br><span class="line"><span class="comment">    dotAll: false</span></span><br><span class="line"><span class="comment">    flags: ""</span></span><br><span class="line"><span class="comment">    global: false</span></span><br><span class="line"><span class="comment">    ignoreCase: false</span></span><br><span class="line"><span class="comment">    lastIndex: 0</span></span><br><span class="line"><span class="comment">    multiline: false</span></span><br><span class="line"><span class="comment">    source: "[\u4e00-\u9fa5]"</span></span><br><span class="line"><span class="comment">    sticky: false</span></span><br><span class="line"><span class="comment">    unicode: false</span></span><br><span class="line"><span class="comment"> * /</span></span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="RegExp-prototype-dotAll-在正则表达式中是否使用-s-修饰符，s-修饰符可以匹配任意单个字符。只读属性，属于单个正则表达式实例。"><a href="#RegExp-prototype-dotAll-在正则表达式中是否使用-s-修饰符，s-修饰符可以匹配任意单个字符。只读属性，属于单个正则表达式实例。" class="headerlink" title="RegExp.prototype.dotAll 在正则表达式中是否使用 s 修饰符，s 修饰符可以匹配任意单个字符。只读属性，属于单个正则表达式实例。"></a>RegExp.prototype.dotAll 在正则表达式中是否使用 <code>s</code> 修饰符，<code>s</code> 修饰符可以匹配任意单个字符。只读属性，属于单个正则表达式实例。</h3><p><code>***暂留，我承认我没有搞明白***</code></p><h3 id="RegExp-prototype-flags-返回由当前正则表达式对象的标志组成的字符串，是一个只读属性"><a href="#RegExp-prototype-flags-返回由当前正则表达式对象的标志组成的字符串，是一个只读属性" class="headerlink" title="RegExp.prototype.flags 返回由当前正则表达式对象的标志组成的字符串，是一个只读属性"></a>RegExp.prototype.flags 返回由当前正则表达式对象的标志组成的字符串，是一个只读属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/[\u4e00-\u9fa5]/</span>sg</span><br><span class="line"><span class="built_in">console</span>.dir(reg)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * /[\u4e00-\u9fa5]/gs</span></span><br><span class="line"><span class="comment">    dotAll: (...)</span></span><br><span class="line"><span class="comment">    flags: "gs"</span></span><br><span class="line"><span class="comment">    global: (...)</span></span><br><span class="line"><span class="comment">    ignoreCase: (...)</span></span><br><span class="line"><span class="comment">    lastIndex: 0</span></span><br><span class="line"><span class="comment">    multiline: (...)</span></span><br><span class="line"><span class="comment">    source: (...)</span></span><br><span class="line"><span class="comment">    sticky: (...)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="RegExp-prototype-global-正则表达式是否使用了-g-标志，是找到所有匹配，而不是第一个匹配后停止，是一个只读属性"><a href="#RegExp-prototype-global-正则表达式是否使用了-g-标志，是找到所有匹配，而不是第一个匹配后停止，是一个只读属性" class="headerlink" title="RegExp.prototype.global 正则表达式是否使用了 g 标志，是找到所有匹配，而不是第一个匹配后停止，是一个只读属性"></a>RegExp.prototype.global 正则表达式是否使用了 <code>g</code> 标志，是找到所有匹配，而不是第一个匹配后停止，是一个只读属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/[gimuy]*$/g</span></span><br><span class="line"><span class="built_in">console</span>.dir(reg)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * /[gimuy]*$/g</span></span><br><span class="line"><span class="comment">    dotAll: false</span></span><br><span class="line"><span class="comment">    flags: "g"</span></span><br><span class="line"><span class="comment">    global: true</span></span><br><span class="line"><span class="comment">    ignoreCase: (...)</span></span><br><span class="line"><span class="comment">    lastIndex: 0</span></span><br><span class="line"><span class="comment">    multiline: (...)</span></span><br><span class="line"><span class="comment">    source: (...)</span></span><br><span class="line"><span class="comment">    sticky: (...)</span></span><br><span class="line"><span class="comment">    unicode: (...)</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="RegExp-prototype-ignoreCase-正则表达式是否使用了-i-标志，是否忽略大小写，只读属性"><a href="#RegExp-prototype-ignoreCase-正则表达式是否使用了-i-标志，是否忽略大小写，只读属性" class="headerlink" title="RegExp.prototype.ignoreCase 正则表达式是否使用了 i 标志，是否忽略大小写，只读属性"></a>RegExp.prototype.ignoreCase 正则表达式是否使用了 <code>i</code> 标志，是否忽略大小写，只读属性</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/[\u4e00-\u9faf]/gi</span></span><br><span class="line"><span class="built_in">console</span>.dir(reg)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * /[\u4e00-\u9faf]/gi</span></span><br><span class="line"><span class="comment">      dotAll: false</span></span><br><span class="line"><span class="comment">      flags: "gi"</span></span><br><span class="line"><span class="comment">      global: true</span></span><br><span class="line"><span class="comment">      ignoreCase: true</span></span><br><span class="line"><span class="comment">      lastIndex: 0</span></span><br><span class="line"><span class="comment">      multiline: false</span></span><br><span class="line"><span class="comment">      source: "[\u4e00-\u9faf]"</span></span><br><span class="line"><span class="comment">      sticky: false</span></span><br><span class="line"><span class="comment">      unicode: false</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="RegExp-prototype-multiline-正则表达式中使用-m-属性，多行匹配，只读属性"><a href="#RegExp-prototype-multiline-正则表达式中使用-m-属性，多行匹配，只读属性" class="headerlink" title="RegExp.prototype.multiline 正则表达式中使用 m 属性，多行匹配，只读属性"></a>RegExp.prototype.multiline 正则表达式中使用 <code>m</code> 属性，多行匹配，只读属性</h3><blockquote><p>“m” 标志意味着一个多行输入字符串被看作多行<br>使用 “m”，”^” 和 “$” 将会从只匹配正则字符串的开头或结尾，变为匹配字符串中任一行的开头或结尾。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/[\u4e00-\u9faf]/gim</span></span><br><span class="line"><span class="built_in">console</span>.dir(reg)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * /[\u4e00-\u9faf]/gim</span></span><br><span class="line"><span class="comment">      dotAll: false</span></span><br><span class="line"><span class="comment">      flags: "gim"</span></span><br><span class="line"><span class="comment">      global: true</span></span><br><span class="line"><span class="comment">      ignoreCase: true</span></span><br><span class="line"><span class="comment">      lastIndex: 0</span></span><br><span class="line"><span class="comment">      multiline: true</span></span><br><span class="line"><span class="comment">      source: "[\u4e00-\u9faf]"</span></span><br><span class="line"><span class="comment">      sticky: false</span></span><br><span class="line"><span class="comment">      unicode: false</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="RegExp-prototype-exec-在一个指定字符串中执行一个搜索匹配。返回匹配数组或-null。"><a href="#RegExp-prototype-exec-在一个指定字符串中执行一个搜索匹配。返回匹配数组或-null。" class="headerlink" title="RegExp.prototype.exec() 在一个指定字符串中执行一个搜索匹配。返回匹配数组或 null。"></a>RegExp.prototype.exec() 在一个指定字符串中执行一个搜索匹配。返回匹配数组或 null。</h3><blockquote><p>regexObj.exec(str)</p></blockquote><p><strong>* notice *</strong></p><ul><li><input disabled type="checkbox"> 设置了 global 或 sticky 标志位后 RegExp 对象是<code>有状态</code>的；</li><li><input disabled type="checkbox"> 会将上次成功匹配的位置记录在 lastIndex 属性中。</li><li><input disabled type="checkbox"> 如此 exec() 可用来对单个字符串中的多次匹配结果进行逐条遍历。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reg = <span class="regexp">/[\u4e00-\u9fa5]/</span></span><br><span class="line">reg.exec(<span class="string">'1233 我是张丽萍 abc'</span>)</span><br><span class="line"><span class="comment">// ["我", index: 5, input: "1233 我是张丽萍 abc", groups: undefined]</span></span><br></pre></td></tr></table></figure><h4 id="“我”-index-5-input-“1233-我是张丽萍-abc”-groups-undefined-返回值解析"><a href="#“我”-index-5-input-“1233-我是张丽萍-abc”-groups-undefined-返回值解析" class="headerlink" title="[“我”, index: 5, input: “1233 我是张丽萍 abc”, groups: undefined] 返回值解析"></a>[“我”, index: 5, input: “1233 我是张丽萍 abc”, groups: undefined] 返回值解析</h4><table><thead><tr><th>索引</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>我</td><td>匹配的全部字符串</td></tr><tr><td>1</td><td>index:5</td><td>匹配字符串开始索引</td></tr><tr><td>2</td><td>1233 我是张丽萍 abc</td><td>匹配原始字符串</td></tr><tr><td>3</td><td>groups:undefined</td><td>分组捕获的结果</td></tr></tbody></table><p>加全局匹配标识符，会记录上次匹配的位置，可以循环遍历。<code>注意不要在遍历条件中写入正则表达式，如果一直匹配，会造成死循环</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> reg = <span class="regexp">/(\w+)(\s)/g</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'abc abc abc'</span></span><br><span class="line">reg.exec(str)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  [ 'abc ', 'abc', ' ', index: 0, input: 'abc abc abc', groups: undefined ]</span></span><br><span class="line"><span class="comment">&gt; reg.exec(str)</span></span><br><span class="line"><span class="comment">[ 'abc ', 'abc', ' ', index: 4, input: 'abc abc abc', groups: undefined ]</span></span><br><span class="line"><span class="comment">&gt; reg.exec(str)</span></span><br><span class="line"><span class="comment">null</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值 []"></a>返回值 []</h4><ul><li>[0] 匹配的字符串（[‘abc ‘]）</li><li>[1],…[n] 分组捕获（[‘abc’, ‘ ‘]）</li><li>index 匹配到的字符位于原始字符串的基于0的索引值 （index: 0）</li><li>input 原始字符串</li></ul><hr><ul><li><input disabled type="checkbox"> <code>\w</code> 匹配任意来自基本拉丁字母表中的字母数字字符，还包括下划线。等价于 [A-Za-z0-9_]</li><li><input disabled type="checkbox"> <code>\w+</code> 匹配数字、字母、下划线 x 1 或多次。等价于 {1,}</li><li><input disabled type="checkbox"> <code>(\w+)</code> 匹配数字、字母、下划线至少一次，并且捕获匹配项</li><li><input disabled type="checkbox"> <code>\s</code> 匹配空白符，包括空格、制表符、换页符、其它 Unicode 空格</li></ul><h4 id="字符集合-character-sets"><a href="#字符集合-character-sets" class="headerlink" title="字符集合(character sets)"></a>字符集合(character sets)</h4><p>[xyz] [x-z] 匹配是 xyz 的字符集</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/[x-z]/.exec(<span class="string">'zxyd'</span>)</span><br><span class="line"><span class="comment">// ["z", index: 0, input: "zxyd", groups: undefined]</span></span><br><span class="line">/[^x-z]/g.exec(<span class="string">'xyzabdxyz'</span>)</span><br><span class="line"><span class="comment">// ["a", index: 3, input: "xyzabdxyz", groups: undefined]</span></span><br></pre></td></tr></table></figure><p>[^xyz] [^x-z] 匹配非 xyz 的字符集</p><h4 id="分组（grouping）"><a href="#分组（grouping）" class="headerlink" title="分组（grouping）"></a>分组（grouping）</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 分组匹配 */</span></span><br><span class="line">regGroups = <span class="regexp">/(\d+)([\u4e00-\u9fa5]+)(\w)/</span></span><br><span class="line">regGroups.exec(<span class="string">'1233我是张丽萍abc'</span>)</span><br><span class="line"><span class="comment">// ["1233我是张丽萍a", "1233", "我是张丽萍", "a", index: 0, input: "1233我是张丽萍abc", groups: undefined]</span></span><br></pre></td></tr></table></figure><h4 id="“1233我是张丽萍a”-“1233”-“我是张丽萍”-“a”-index-0-input-“1233我是张丽萍abc”-groups-undefined"><a href="#“1233我是张丽萍a”-“1233”-“我是张丽萍”-“a”-index-0-input-“1233我是张丽萍abc”-groups-undefined" class="headerlink" title="[“1233我是张丽萍a”, “1233”, “我是张丽萍”, “a”, index: 0, input: “1233我是张丽萍abc”, groups: undefined]"></a>[“1233我是张丽萍a”, “1233”, “我是张丽萍”, “a”, index: 0, input: “1233我是张丽萍abc”, groups: undefined]</h4><table><thead><tr><th>索引</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>0</td><td>1233我是张丽萍a</td><td>匹配的全部字符串</td></tr><tr><td>1</td><td>1233</td><td>分组匹配的结果 RegExp.$1</td></tr><tr><td>2</td><td>我是张丽萍</td><td>分组匹配的结果 RegExp.$2</td></tr><tr><td>3</td><td>a</td><td>分组匹配的结果 RegExp.$3</td></tr><tr><td>4</td><td>index</td><td>匹配到的字符位于原始字符串的基于0的索引值</td></tr><tr><td>5</td><td>groups:undefined</td><td>分组捕获的结果</td></tr></tbody></table><h4 id="字符类别-Character-Classes"><a href="#字符类别-Character-Classes" class="headerlink" title="字符类别(Character Classes)"></a>字符类别(Character Classes)</h4><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td><code>\d</code> <code>[0-9]</code></td><td>匹配任意阿拉伯字符串</td></tr></tbody></table><h4 id="边界（Boundaries）"><a href="#边界（Boundaries）" class="headerlink" title="边界（Boundaries）"></a>边界（Boundaries）</h4><table><thead><tr><th>字符</th><th>含义</th></tr></thead><tbody><tr><td>^</td><td>匹配输入<code>开始</code>位置，如果设置 flag multiline，该标识会匹配每个断行（line-break）符后的<code>开始</code>位置</td></tr><tr><td>$</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> RegExp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 字符串</title>
      <link href="2020/01/09/Javascript-%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>2020/01/09/Javascript-%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<blockquote><p><code>需求删除最后一个为 &amp; 的字符</code></p></blockquote><h3 id="String-prototype-replace-返回一个部分或全部匹配由替代模式所取代的新的字符串。"><a href="#String-prototype-replace-返回一个部分或全部匹配由替代模式所取代的新的字符串。" class="headerlink" title="String.prototype.replace() 返回一个部分或全部匹配由替代模式所取代的新的字符串。"></a>String.prototype.replace() 返回一个部分或全部匹配由替代模式所取代的新的字符串。</h3><blockquote><p>str.replace(regexp|substr, newSubStr|function)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'zhangliping&amp;'</span></span><br><span class="line"><span class="comment">// regexp = /&amp;$/</span></span><br><span class="line">str.replace(<span class="regexp">/&amp;$/</span>, <span class="string">""</span>) <span class="comment">// zhangliping</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * --- 引申 ---</span></span><br><span class="line"><span class="comment"> * 删除字符串全部的 &amp;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">str.replace(<span class="regexp">/&amp;$/g</span>, <span class="string">""</span>) <span class="comment">// 全局替换</span></span><br><span class="line">str.replace(<span class="regexp">/^&amp;/</span>,<span class="string">""</span>) <span class="comment">// 替换开头</span></span><br><span class="line">str.replace(<span class="regexp">/[?&amp;]$/</span>, <span class="string">""</span>) <span class="comment">//替换结尾的 ? 或 &amp;</span></span><br><span class="line"></span><br><span class="line">formatParamets() &#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="built_in">window</span>.location.href; <span class="comment">// 获取当前浏览器的URL</span></span><br><span class="line">  <span class="keyword">const</span> params = &#123;&#125;; <span class="comment">// 存储最终JSON结果对象</span></span><br><span class="line">  url.replace(<span class="regexp">/([^?&amp;]+)=([^?&amp;]+)/g</span>, (match, p1, p2) =&gt; &#123;</span><br><span class="line">    params[p1] = <span class="built_in">decodeURIComponent</span>(p2); <span class="comment">// 解析字符为中文</span></span><br><span class="line">    <span class="keyword">return</span> p2 + <span class="string">'='</span> + p1;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="分割字符串"><a href="#分割字符串" class="headerlink" title="分割字符串"></a>分割字符串</h2><h3 id="String-prototype-slice-方法取字符串的一部分，返回新字符串，原字符串不动"><a href="#String-prototype-slice-方法取字符串的一部分，返回新字符串，原字符串不动" class="headerlink" title="String.prototype.slice() 方法取字符串的一部分，返回新字符串，原字符串不动"></a>String.prototype.slice() 方法取字符串的一部分，返回新字符串，原字符串不动</h3><blockquote><p>str.slice(beginIndex[, endIndex])</p></blockquote><ul><li>beginIndex 从该索引（以 0 这基数）处开始提取原字符串。如果为负数，会被当做 strlength + beginLength</li><li>endIndex 可选，以 0 基数，endIndex 处结束提取字符串。省略则视为默认 strlength。或为负数，endIndex = strlength - endIndex</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'zhangliping&amp;'</span></span><br><span class="line"><span class="comment">// 取默认值，str.slice() 不传参</span></span><br><span class="line">str.slice() <span class="comment">// zhangliping&amp; beginIndex 默认值 0， endIndex 默认值 strlength</span></span><br><span class="line"><span class="comment">// beginIndex &gt;= strlength, endIndex 取默认值</span></span><br><span class="line">str.slice(<span class="number">-1</span>) <span class="comment">// '&amp;' beginIndex = strlength - 1，截取到字符串长度</span></span><br><span class="line"><span class="comment">// start &lt; 0 &amp;&amp; abs(start) &gt; strlength, length 取默认值</span></span><br><span class="line">str.slice(<span class="number">-100</span>) <span class="comment">// 'zhangliping&amp;'</span></span><br><span class="line"><span class="comment">// beginIndex 取默认值 0，endIndex &gt;= strlength</span></span><br><span class="line">str.slice(<span class="number">13</span>) <span class="comment">// ''</span></span><br><span class="line"><span class="comment">// beginIndex &lt; 0，endIndex 取默认值</span></span><br><span class="line">str.slice(<span class="number">0</span>, <span class="number">12</span>) <span class="comment">// zhangliping&amp;</span></span><br><span class="line"><span class="comment">// beginIndex 取默认值 0，endIndex &lt; 0</span></span><br><span class="line">str.slice(<span class="number">0</span>, <span class="number">-1</span>) <span class="comment">// 'zhangliping' endIndex = strlength - 1 截取最后一位</span></span><br><span class="line"><span class="comment">// beginIndex 取默认值 0，endIndex == 0</span></span><br><span class="line">str.slice(<span class="number">0</span>, <span class="number">0</span>) <span class="comment">// ''</span></span><br></pre></td></tr></table></figure><h3 id="String-prototype-substring-返回从开始位置到结束位置的一个子集。"><a href="#String-prototype-substring-返回从开始位置到结束位置的一个子集。" class="headerlink" title="String.prototype.substring() 返回从开始位置到结束位置的一个子集。"></a>String.prototype.substring() 返回从开始位置到结束位置的一个子集。</h3><blockquote><p>str.substring(indexStart[, indexEnd])</p></blockquote><ul><li>indexStart 需要截取的第一个字符的索引，该索引位置的字符作为返回字符串的首字母</li><li>indexEnd 0 到字符串长度之间的整数，以该数字为索引的字符不包含截取位置内</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'zhangliping&amp;'</span>;</span><br><span class="line"><span class="comment">// str.substring() indexStart 默认值 0； indexEnd 默认值 strlength</span></span><br><span class="line">str.substring() <span class="comment">// 'zhangliping&amp;'</span></span><br><span class="line"><span class="comment">// indexStart &gt; strlength</span></span><br><span class="line">str.substring(<span class="number">5</span>) <span class="comment">// ''</span></span><br><span class="line"><span class="comment">// indexStart &lt; 0 &amp;&amp; abs(indexStart) &gt; strlength</span></span><br><span class="line">str.substring(<span class="number">-15</span>) <span class="comment">// indexStart = 0</span></span><br><span class="line"><span class="comment">// indexStart &lt; 0 &amp;&amp; abs(indexStart) &lt; strlength</span></span><br><span class="line">str.substring(<span class="number">-1</span>) <span class="comment">// indexStart = 0</span></span><br><span class="line"><span class="comment">// indexStart = 0 indexEnd &gt; strlength</span></span><br><span class="line">str.substring(<span class="number">0</span>, <span class="number">15</span>) <span class="comment">// 'zhangliping&amp;'</span></span><br><span class="line">str.substring(<span class="number">0</span>, str.length<span class="number">-1</span>);<span class="comment">// zhangliping</span></span><br></pre></td></tr></table></figure><h3 id="String-proptotype-substr-返回一个字符串从指定位置开始"><a href="#String-proptotype-substr-返回一个字符串从指定位置开始" class="headerlink" title="String.proptotype.substr() 返回一个字符串从指定位置开始"></a>String.proptotype.substr() 返回一个字符串从指定位置开始</h3><blockquote><p>被认作是遗留的函数，非 Javascript 核心语言的一部分。目前没有严格被废弃。但将来可能被移除<br>str.substr(start[, length])</p></blockquote><ul><li>不会改变原字符串</li><li>start 与 slice 的第一个参数相同从该索引（以 0 这基数）处开始提取原字符串，若为负数，看作 strlength（字符串长度） + start。</li><li><ul><li>Microsoft’ JScript 不支持负 start 索引 **</li></ul></li><li>length 提取的字符数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">'zhangliping'</span>;</span><br><span class="line"><span class="comment">// str.substr() 不传参</span></span><br><span class="line">str.substr() <span class="comment">// 'zhangliping' start 默认值 0， length 默认值字符串长度</span></span><br><span class="line"><span class="comment">// start &gt;= strlength length 取默认值</span></span><br><span class="line">str.substr(<span class="number">13</span>) <span class="comment">// ''</span></span><br><span class="line"><span class="comment">// start &lt; 0 length 取默认值</span></span><br><span class="line">str.substr(<span class="number">-14</span>) <span class="comment">// 'zhangliping' 取出全部字符串</span></span><br><span class="line"><span class="comment">// start 取默认值 0，length &gt;= strlength</span></span><br><span class="line">str.substr(<span class="number">-4</span>) <span class="comment">// start = strlength - 4 从 index = 8 开始截取</span></span><br><span class="line"><span class="comment">// start &lt; 0 &amp;&amp; abs(start) &gt; strlength, length 取默认值</span></span><br><span class="line">str.substr(<span class="number">0</span>, <span class="number">14</span>) <span class="comment">// 'zhangliping'</span></span><br><span class="line"><span class="comment">// start 取默认值 0， length &lt;= strlength</span></span><br><span class="line">str.substr(<span class="number">0</span>, <span class="number">-1</span>) <span class="comment">// ''</span></span><br><span class="line"><span class="comment">// 截取字符串最后一位</span></span><br><span class="line">str.substr(<span class="number">0</span>, strlength - <span class="number">1</span>) <span class="comment">// 'zhangliping'</span></span><br></pre></td></tr></table></figure><h3 id="slice-substr-substring-对比"><a href="#slice-substr-substring-对比" class="headerlink" title="slice/substr/substring 对比"></a>slice/substr/substring 对比</h3><table><thead><tr><th>方法名</th><th>参数一</th><th>参数二</th></tr></thead><tbody><tr><td>slice</td><td>beginIndex — 开始位置索引，以 0 为基数</td><td>endIndex — 截取至 endIndex - 1 位置</td></tr><tr><td>substr</td><td>start — 同上</td><td>length - 截取字符长度</td></tr><tr><td>substring</td><td>indexStart — 同上</td><td>indexEnd — 截取至 indexEnd - 1 的位置</td></tr></tbody></table><table><thead><tr><th>方法名</th><th>参数一abs(负数)并大于等于字符串长度</th><th>参数一负数并小于字符串长度</th><th>参数一大于 strlength</th><th>参数二abs(负数)并大于等于字符串长度</th><th>参数一负数并小于字符串长度</th><th>参数二大于 strlength</th></tr></thead><tbody><tr><td>slice</td><td>beginIndex = 0</td><td>beginIndex = strlength - beginIndex</td><td>返回空串</td><td>endIndex = 0</td><td>endIndex = strlength - endIndex</td><td>endIndex = strlength</td></tr><tr><td>substr</td><td>同上</td><td>同上</td><td>同上</td><td>同上</td><td></td><td>length = strlength</td></tr><tr><td>substring</td><td>indexStart = 0</td><td>indexStart = 0</td><td>同上</td><td>indexEnd = 0</td><td>indexEnd = 0</td><td>indexEnd = strlength</td></tr></tbody></table><blockquote><ol><li>slice、substring、sub 都是字符串截取方法；<ol start="2"><li>substring 参数不能为负数，如果有负数，则视为 0；</li><li>substr 与 slice 同参数可以为负数。当为负数时，实际取的值是当前参数与字符串相加的和，第一个参数相加之和大于 0，时结果为 0；第二个参数相加之和大于 0 时，取字符串长度。substring 与 slice 两个参数都为索引，substr 第二个参数为截取字符串长度。 substr 在淘汰的过程中，慎用。</li></ol></li></ol></blockquote><h2 id="查找字符串方法"><a href="#查找字符串方法" class="headerlink" title="查找字符串方法"></a>查找字符串方法</h2><h3 id="includes-区分大小写查找字符串，返回-Boolean-值。（ES6-新增方法）"><a href="#includes-区分大小写查找字符串，返回-Boolean-值。（ES6-新增方法）" class="headerlink" title="includes() 区分大小写查找字符串，返回 Boolean 值。（ES6 新增方法）"></a>includes() 区分大小写查找字符串，返回 Boolean 值。（ES6 新增方法）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'Mr Brownlow, fortunately, was able to persuade him to abandon this wild idea'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.includes(<span class="string">'persuade'</span>)) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="indexOf-和-lastIndexOf-同样是区分大小写匹配字符串，存在返回索引值，否则返回-1。"><a href="#indexOf-和-lastIndexOf-同样是区分大小写匹配字符串，存在返回索引值，否则返回-1。" class="headerlink" title="indexOf() 和 lastIndexOf() 同样是区分大小写匹配字符串，存在返回索引值，否则返回 -1。"></a>indexOf() 和 lastIndexOf() 同样是区分大小写匹配字符串，存在返回索引值，否则返回 -1。</h3><h3 id="match-检索返回一个匹配正则表达式的结果"><a href="#match-检索返回一个匹配正则表达式的结果" class="headerlink" title="match() 检索返回一个匹配正则表达式的结果"></a>match() 检索返回一个匹配正则表达式的结果</h3><blockquote><p>str.match(regexp)<br><code>参数</code>：一个正则表达式对象。<br>若参数为非正则表达式对象，会隐式地使用 <code>new RegExp(obj)</code> 转换为 RegExp<br>若没给参数，参数默认为包含空字符串数组，如 <code>[&quot;&quot;]</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">'abc abc'</span></span><br><span class="line"><span class="keyword">let</span> reg = <span class="regexp">/(\w+)/g</span></span><br><span class="line">str.match(reg)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  [ 'abc', 'abc' ]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">reg = <span class="regexp">/(\w+)/</span></span><br><span class="line">str.match(reg)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> [ 'abc', 'abc', index: 0, input: 'abc abc', groups: undefined ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><blockquote><p><code>返回值：</code><br>使用 g 标志，返回表达式匹配的所有结果，不返回匹配捕获组(<code>[ &#39;abc&#39;, &#39;abc&#39; ]</code>)<br>不使用 g 标志，返回第一个完整匹配及其相关的捕获组（input 搜索字符串；groups 捕获数组或 <code>undefined</code>; index 匹配结果开始位置）。</p></blockquote><h2 id="字符串补齐方法"><a href="#字符串补齐方法" class="headerlink" title="字符串补齐方法"></a>字符串补齐方法</h2><h3 id="padStart-targetLength-padString-在字符串前面加入指定字符padString，达到-targetLength-指定长度"><a href="#padStart-targetLength-padString-在字符串前面加入指定字符padString，达到-targetLength-指定长度" class="headerlink" title="padStart(targetLength[,padString]) 在字符串前面加入指定字符padString，达到 targetLength 指定长度"></a>padStart(targetLength[,padString]) 在字符串前面加入指定字符padString，达到 targetLength 指定长度</h3><h3 id="padEnd-targetLength-padString-在字符串后面加入指定字符-padString，达到-targetLength-指定长度"><a href="#padEnd-targetLength-padString-在字符串后面加入指定字符-padString，达到-targetLength-指定长度" class="headerlink" title="padEnd(targetLength,[,padString]) 在字符串后面加入指定字符 padString，达到 targetLength 指定长度"></a>padEnd(targetLength,[,padString]) 在字符串后面加入指定字符 padString，达到 targetLength 指定长度</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 隐藏电话号码后四位</span></span><br><span class="line"><span class="keyword">var</span> tel = <span class="string">'13381892220'</span>;</span><br><span class="line"><span class="keyword">var</span> secretTel = tel.substr(<span class="number">3</span>, tel.length - <span class="number">8</span>).padEnd(tel.length<span class="number">-4</span>, <span class="string">'*'</span>).padStart(tel.length, <span class="string">'*'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(secretTel) <span class="comment">// ****189****</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> String </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Array sort 源码解析</title>
      <link href="2020/01/08/Array%20sort%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
      <url>2020/01/08/Array%20sort%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><blockquote><p>ToUint32 将指定的值转换为 32 位，不带正负号的整数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArraySort</span>(<span class="params">comparefn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> custom_compare = IS_FUNCTION(comparefn);</span><br><span class="line">  <span class="keyword">var</span> length = ToUint32(<span class="keyword">this</span>.length);</span><br><span class="line">  QuickSort(<span class="keyword">this</span>, <span class="number">0</span>, length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">QuickSort</span>(<span class="params">a, from, to</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Insertion sort is faster for short arrays.</span></span><br><span class="line">  <span class="keyword">if</span> (to - <span class="keyword">from</span> &lt;= <span class="number">22</span>) &#123;</span><br><span class="line">    InsertionSort(a, <span class="keyword">from</span>, to);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>mid 运算 (max - min) &gt;&gt; 1 + min</code>，compare 对比数组中的中间数与遍历的当前元素，Compare 会返回 0，大于或小于的数字</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">InsertionSort</span>(<span class="params">a, from, to</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">from</span> + <span class="number">1</span>; i &lt; to; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> element = a[i];</span><br><span class="line">    <span class="comment">// Pre-convert the element to a string for comparison if we know</span></span><br><span class="line">    <span class="comment">// it will happen on each compare anyway.</span></span><br><span class="line">    <span class="keyword">var</span> key =</span><br><span class="line">        (custom_compare || %_IsSmi(element)) ? element : ToString(element);</span><br><span class="line">    <span class="comment">// place element in a[from..i[</span></span><br><span class="line">    <span class="comment">// binary search</span></span><br><span class="line">    <span class="keyword">var</span> min = <span class="keyword">from</span>;</span><br><span class="line">    <span class="keyword">var</span> max = i;</span><br><span class="line">    <span class="comment">// The search interval is a[min..max[</span></span><br><span class="line">    <span class="keyword">while</span> (min &lt; max) &#123;</span><br><span class="line">      <span class="keyword">var</span> mid = min + ((max - min) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">var</span> order = Compare(a[mid], key);</span><br><span class="line">      <span class="keyword">if</span> (order == <span class="number">0</span>) &#123;</span><br><span class="line">        min = max = mid;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (order &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        min = mid + <span class="number">1</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        max = mid;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// place element at position min==max.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &gt; min; j--) &#123;</span><br><span class="line">      a[j] = a[j - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    a[min] = element;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>x,y 进行大小比较，x 为数组中间的元素，y 相对比的元素（即 数组中的某一个元素）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Compare</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Assume the comparefn, if any, is a consistent comparison function.</span></span><br><span class="line">  <span class="comment">// If it isn't, we are allowed arbitrary behavior by ECMA 15.4.4.11.</span></span><br><span class="line">  <span class="keyword">if</span> (x === y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">if</span> (custom_compare) &#123;</span><br><span class="line">    <span class="comment">// Don't call directly to avoid exposing the builtin's global object.</span></span><br><span class="line">    <span class="keyword">return</span> comparefn.call(<span class="literal">null</span>, x, y);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (%_IsSmi(x) &amp;&amp; %_IsSmi(y)) &#123;</span><br><span class="line">    <span class="keyword">return</span> %SmiLexicographicCompare(x, y);</span><br><span class="line">  &#125;</span><br><span class="line">  x = ToString(x);</span><br><span class="line">  y = ToString(y);</span><br><span class="line">  <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">return</span> x &lt; y ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ArraySort</span>(<span class="params">comparefn</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// In-place QuickSort algorithm.</span></span><br><span class="line">  <span class="comment">// For short (length &lt;= 22) arrays, insertion sort is used for efficiency.</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> custom_compare = IS_FUNCTION(comparefn);</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Compare</span>(<span class="params">x,y</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Assume the comparefn, if any, is a consistent comparison function.</span></span><br><span class="line">    <span class="comment">// If it isn't, we are allowed arbitrary behavior by ECMA 15.4.4.11.</span></span><br><span class="line">    <span class="keyword">if</span> (x === y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (custom_compare) &#123;</span><br><span class="line">      <span class="comment">// Don't call directly to avoid exposing the builtin's global object.</span></span><br><span class="line">      <span class="keyword">return</span> comparefn.call(<span class="literal">null</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (%_IsSmi(x) &amp;&amp; %_IsSmi(y)) &#123;</span><br><span class="line">      <span class="keyword">return</span> %SmiLexicographicCompare(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    x = ToString(x);</span><br><span class="line">    y = ToString(y);</span><br><span class="line">    <span class="keyword">if</span> (x == y) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x &lt; y ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">InsertionSort</span>(<span class="params">a, from, to</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">from</span> + <span class="number">1</span>; i &lt; to; i++) &#123;</span><br><span class="line">      <span class="keyword">var</span> element = a[i];</span><br><span class="line">      <span class="comment">// Pre-convert the element to a string for comparison if we know</span></span><br><span class="line">      <span class="comment">// it will happen on each compare anyway.</span></span><br><span class="line">      <span class="keyword">var</span> key =</span><br><span class="line">          (custom_compare || %_IsSmi(element)) ? element : ToString(element);</span><br><span class="line">      <span class="comment">// place element in a[from..i[</span></span><br><span class="line">      <span class="comment">// binary search</span></span><br><span class="line">      <span class="keyword">var</span> min = <span class="keyword">from</span>;</span><br><span class="line">      <span class="keyword">var</span> max = i;</span><br><span class="line">      <span class="comment">// The search interval is a[min..max[</span></span><br><span class="line">      <span class="keyword">while</span> (min &lt; max) &#123;</span><br><span class="line">        <span class="keyword">var</span> mid = min + ((max - min) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">var</span> order = Compare(a[mid], key);</span><br><span class="line">        <span class="keyword">if</span> (order == <span class="number">0</span>) &#123;</span><br><span class="line">          min = max = mid;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (order &lt; <span class="number">0</span>) &#123;</span><br><span class="line">          min = mid + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          max = mid;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// place element at position min==max.</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = i; j &gt; min; j--) &#123;</span><br><span class="line">        a[j] = a[j - <span class="number">1</span>];</span><br><span class="line">      &#125;</span><br><span class="line">      a[min] = element;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">QuickSort</span>(<span class="params">a, from, to</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Insertion sort is faster for short arrays.</span></span><br><span class="line">    <span class="keyword">if</span> (to - <span class="keyword">from</span> &lt;= <span class="number">22</span>) &#123;</span><br><span class="line">      InsertionSort(a, <span class="keyword">from</span>, to);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 取中间的 index</span></span><br><span class="line">    <span class="keyword">var</span> pivot_index = $floor($random() * (to - <span class="keyword">from</span>)) + <span class="keyword">from</span>;</span><br><span class="line">    <span class="comment">// 取中的 element</span></span><br><span class="line">    <span class="keyword">var</span> pivot = a[pivot_index];</span><br><span class="line">    <span class="comment">// Pre-convert the element to a string for comparison if we know</span></span><br><span class="line">    <span class="comment">// it will happen on each compare anyway.</span></span><br><span class="line">    <span class="keyword">var</span> pivot_key =</span><br><span class="line">      (custom_compare || %_IsSmi(pivot)) ? pivot : ToString(pivot);</span><br><span class="line">    <span class="comment">// Issue 95: Keep the pivot element out of the comparisons to avoid</span></span><br><span class="line">    <span class="comment">// infinite recursion if comparefn(pivot, pivot) != 0.</span></span><br><span class="line">    a[pivot_index] = a[<span class="keyword">from</span>];</span><br><span class="line">    a[<span class="keyword">from</span>] = pivot;</span><br><span class="line">    <span class="keyword">var</span> low_end = <span class="keyword">from</span>;   <span class="comment">// Upper bound of the elements lower than pivot.</span></span><br><span class="line">    <span class="keyword">var</span> high_start = to;  <span class="comment">// Lower bound of the elements greater than pivot.</span></span><br><span class="line">    <span class="comment">// From low_end to i are elements equal to pivot.</span></span><br><span class="line">    <span class="comment">// From i to high_start are elements that haven't been compared yet.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="keyword">from</span> + <span class="number">1</span>; i &lt; high_start; ) &#123;</span><br><span class="line">      <span class="keyword">var</span> element = a[i];</span><br><span class="line">      <span class="keyword">var</span> order = Compare(element, pivot_key);</span><br><span class="line">      <span class="keyword">if</span> (order &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        a[i] = a[low_end];</span><br><span class="line">        a[low_end] = element;</span><br><span class="line">        i++;</span><br><span class="line">        low_end++;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (order &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        high_start--;</span><br><span class="line">        a[i] = a[high_start];</span><br><span class="line">        a[high_start] = element;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;  <span class="comment">// order == 0</span></span><br><span class="line">        i++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    QuickSort(a, <span class="keyword">from</span>, low_end);</span><br><span class="line">    QuickSort(a, high_start, to);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> old_length = ToUint32(<span class="keyword">this</span>.length);</span><br><span class="line">  <span class="keyword">if</span> (old_length &lt; <span class="number">2</span>) <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line">  %RemoveArrayHoles(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> length = ToUint32(<span class="keyword">this</span>.length);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Move undefined elements to the end of the array.</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; ) &#123;</span><br><span class="line">    <span class="keyword">if</span> (IS_UNDEFINED(<span class="keyword">this</span>[i])) &#123;</span><br><span class="line">      length--;</span><br><span class="line">      <span class="keyword">this</span>[i] = <span class="keyword">this</span>[length];</span><br><span class="line">      <span class="keyword">this</span>[length] = <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      i++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  QuickSort(<span class="keyword">this</span>, <span class="number">0</span>, length);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// We only changed the length of the this object (in</span></span><br><span class="line">  <span class="comment">// RemoveArrayHoles) if it was an array.  We are not allowed to set</span></span><br><span class="line">  <span class="comment">// the length of the this object if it is not an array because this</span></span><br><span class="line">  <span class="comment">// might introduce a new length property.</span></span><br><span class="line">  <span class="keyword">if</span> (IS_ARRAY(<span class="keyword">this</span>)) &#123;</span><br><span class="line">    <span class="keyword">this</span>.length = old_length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SO，把以上源码粗略的看下来。总结如下："><a href="#SO，把以上源码粗略的看下来。总结如下：" class="headerlink" title="** SO，把以上源码粗略的看下来。总结如下：**"></a>** SO，把以上源码粗略的看下来。总结如下：**</h4><ol><li>先回复我第一个疑问，sort 排序，回调中有两个参数，一个是从0到当前遍历的元素中的中间的元素，另外一个是当前遍历元素；</li><li>对比以上两个元素，返回结果赋值给order，order 的结果决定 min 的计算方法；</li><li>min 初始值为 0，计算 min 决定对比元素插入的位置。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>日记-2019-12-25</title>
      <link href="2019/12/25/%E6%97%A5%E8%AE%B0-2019-12-25/"/>
      <url>2019/12/25/%E6%97%A5%E8%AE%B0-2019-12-25/</url>
      
        <content type="html"><![CDATA[<h2 id="less"><a href="#less" class="headerlink" title="less"></a>less</h2><blockquote><p>/deep/ 使用时，一定在 scoped 域中使用</p></blockquote><h2 id="http-options"><a href="#http-options" class="headerlink" title="http options"></a>http options</h2><blockquote><p>OPTIONS 发起预检请求，用于获取目标资源所支持的通信选项，使用 OPTIONS 方法对服务器发起请求，检测服务器支持哪些 HTTP 方法， 以下响应报文中， allow-methods 表明服务器支持 POST 方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Access-Control-Allow-Headers: business-type, content-type</span><br><span class="line">Access-Control-Allow-Methods: POST</span><br><span class="line">Access-Control-Allow-Origin: http://localhost</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 0</span><br><span class="line">Date: Wed, 25 Dec 2019 07:11:38 GMT</span><br><span class="line">Server: openresty/1.15.8.1</span><br><span class="line">Vary: Origin</span><br><span class="line">Vary: Access-Control-Request-Method</span><br><span class="line">Vary: Access-Control-Request-Headers</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂货 </tag>
            
            <tag> grocery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>发布订阅者</title>
      <link href="2019/08/28/%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/08/28/%E6%A8%A1%E5%BC%8F-%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="1-观察者模式"><a href="#1-观察者模式" class="headerlink" title="1. 观察者模式"></a>1. 观察者模式</h1><p>对象间的一对多依赖关系，一个对象状态发生改变，依赖于它的对象都将得到通知，并自动更新。 观察者模式属于行为模式，行为模式。行为模式关注的是对象之间的通讯，观察者模式是观察者与被观察者之间的通讯。</p><h1 id="2-订阅-发布模式"><a href="#2-订阅-发布模式" class="headerlink" title="2. 订阅-发布模式"></a>2. 订阅-发布模式</h1><p>在现在的发布订阅模式中，称为发布者的消息发送者不会将消息直接发送给订阅者。发面者和订阅者之间存在第三个组件，称为调度中心或事件通道。调度中心或事件通道，维持着发布者和订阅者间的联系，过滤所有发布者传入的消息并相应地分发给订阅者。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PubSub</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.subscribers = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    subscribe(topic, callback) &#123;</span><br><span class="line">        <span class="keyword">let</span> callbacks = <span class="keyword">this</span>.subscribers[topic];</span><br><span class="line">        <span class="keyword">if</span> (!callbacks) &#123;</span><br><span class="line">            <span class="keyword">this</span>.subscribers[topic] = [callback];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            callbacks.push(callback);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    publish(topic, ...args) &#123;</span><br><span class="line">        <span class="keyword">let</span> callbacks = <span class="keyword">this</span>.subscribers[topic] || [];</span><br><span class="line">        callbacks.forEach(<span class="function"><span class="params">callback</span> =&gt;</span> callback(...args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建事件调度中心，为订阅者和发布者提供调度服务</span></span><br><span class="line"><span class="keyword">let</span> pubSub = <span class="keyword">new</span> PubSub();</span><br><span class="line"><span class="comment">// A订阅了SMS事件（A只关注SMS本身，而不关心谁发布这个事件）</span></span><br><span class="line">pubSub.subscribe(<span class="string">'SMS'</span>, <span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// B订阅了SMS事件</span></span><br><span class="line">pubSub.subscribe(<span class="string">'SMS'</span>, <span class="built_in">console</span>.log);</span><br><span class="line"><span class="comment">// C发布了SMS事件（C只关注SMS本身，不关心谁订阅了这个事件）</span></span><br><span class="line">pubSub.publish(<span class="string">'SMS'</span>, <span class="string">'I published `SMS` event'</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.observers = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    add(observer) &#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.push(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notify(...args) &#123;</span><br><span class="line">        <span class="keyword">this</span>.observers.forEach(<span class="function"><span class="params">observer</span> =&gt;</span> observer.update(...args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    update(...args) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(...args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建观察者ob1</span></span><br><span class="line"><span class="keyword">let</span> ob1 = <span class="keyword">new</span> Observer();</span><br><span class="line"><span class="comment">// 创建观察者ob2</span></span><br><span class="line"><span class="keyword">let</span> ob2 = <span class="keyword">new</span> Observer();</span><br><span class="line"><span class="comment">// 创建目标sub</span></span><br><span class="line"><span class="keyword">let</span> sub = <span class="keyword">new</span> Subject();</span><br><span class="line"><span class="comment">// 目标sub添加观察者ob1 （目标和观察者建立了依赖关系）</span></span><br><span class="line">sub.add(ob1);</span><br><span class="line"><span class="comment">// 目标sub添加观察者ob2</span></span><br><span class="line">sub.add(ob2);</span><br><span class="line"><span class="comment">// 目标sub触发SMS事件（目标主动通知观察者）</span></span><br><span class="line">sub.notify(<span class="string">'I fired `SMS` event'</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript-对象</title>
      <link href="2019/08/28/Javascript-%E5%AF%B9%E8%B1%A1/"/>
      <url>2019/08/28/Javascript-%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<p>今天遇到了一个小问题，’blur’ 事件失焦时，vue 并没有把接口请求回来的data回填到页面。 现在来分析分析：</p><ul><li><input disabled type="checkbox"> blur 的锅，no ，it isn’t！因为吧，失焦事件的回调函数执行了；</li><li><input checked disabled type="checkbox"> 异步请求回调成功后赋值失败，打完断点发现吧，没这回事。赋值成功。 嘿嘿，不卖关子了！上代码</li></ul><a id="more"></a> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">"姓名："</span> <span class="attr">prop</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">"form.name"</span> @<span class="attr">input</span>=<span class="string">"handlerAccount"</span> @<span class="attr">blur</span>=<span class="string">"checkSame"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    form: &#123;&#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  checkSame() &#123;</span><br><span class="line">    <span class="keyword">this</span>.form.account = <span class="string">'test1'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里先简单的说说，vue 实现双像绑定用的是 Obeject.defineProperty() 来监听属性变动， 需要监听的数据对象进行递归遍历，包括子属性对象的属性，都加上 setter和getter，data 中的 form 没有 account 属性，checkSame 方法直接给 form 添加新属性，通过 <code>this.form.account</code> 添加的属性没有 setter 和 setter和getter 方法，不具备监听。所以双向绑定也就无从谈起了。修改方法有以下两种：</p></blockquote><hr><hr><ul><li>修改方式 – 初始化每个需要双向绑定的属性及对象属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化每个需要双向绑定的属性及对象属性</span></span><br><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    form: &#123;</span><br><span class="line">      account: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  checkSame() &#123;</span><br><span class="line">    <span class="keyword">this</span>.form.account = <span class="string">'test1'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通过 Object.assign 给 form 添加新属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 Object.assign 给 form 添加新属性</span></span><br><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    form: &#123;</span><br><span class="line">      account: <span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">methods: &#123;</span><br><span class="line">  checkSame() &#123;</span><br><span class="line">    <span class="keyword">this</span>.form = <span class="built_in">Object</span>.assign(&#123;&#125;, &#123;</span><br><span class="line">      account: <span class="string">'test1'</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我所见过的 npm 库</title>
      <link href="2019/07/24/%E6%88%91%E6%89%80%E8%A7%81%E8%BF%87%E7%9A%84-npm-%E5%BA%93/"/>
      <url>2019/07/24/%E6%88%91%E6%89%80%E8%A7%81%E8%BF%87%E7%9A%84-npm-%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="postcss-pxtorem"><a href="#postcss-pxtorem" class="headerlink" title="postcss-pxtorem"></a>postcss-pxtorem</h1><h1 id="dotenv"><a href="#dotenv" class="headerlink" title="dotenv"></a>dotenv</h1><p>NodeJs 运行时加载不同的配置，<code>process.env.DB_HOST</code> 获取环境变量，程序启动时，从文件加载环境变量时就需要用到 dotenv 库。</p><h2 id="用法-创建-env"><a href="#用法-创建-env" class="headerlink" title="用法 创建 .env"></a>用法 创建 .env</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> .env</span></span><br><span class="line">DB_HOST = localhost</span><br><span class="line">DB_USER = root</span><br><span class="line">DB_PASS = 123456</span><br></pre></td></tr></table></figure><p>NODE 中运行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dotenv = <span class="built_in">require</span>(<span class="string">'dotenv'</span>)</span><br><span class="line">dotenv.config()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 程序中使用环境变量</span></span><br><span class="line"><span class="keyword">const</span> db = <span class="built_in">require</span>(<span class="string">'db'</span>)</span><br><span class="line">db.connect(&#123;</span><br><span class="line">  host: process.env.DB_HOST,</span><br><span class="line">  username: process.env.DB_USER,</span><br><span class="line">  password: process.env.DB_PASS</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="debug-专门控制日志输出的库"><a href="#debug-专门控制日志输出的库" class="headerlink" title="debug 专门控制日志输出的库"></a>debug 专门控制日志输出的库</h1><p>判断 DEBUG 环境变量，调整运行环境控制日志是否输出。DEBUG 对环境变量进行解析，允许我们选择性的控制输出哪些日志模块，解决控制台日志堆积的问题。</p>]]></content>
      
      
      
        <tags>
            
            <tag> npm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>async await promise</title>
      <link href="2019/07/24/async-await-promise/"/>
      <url>2019/07/24/async-await-promise/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'async1 start'</span> )</span><br><span class="line">    <span class="keyword">await</span> async2()</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'async1 end'</span> )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">async2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'async2'</span> )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'script start'</span> )</span><br><span class="line"></span><br><span class="line">setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'setTimeout'</span> )</span><br><span class="line">&#125;, <span class="number">0</span> )</span><br><span class="line"></span><br><span class="line">async1();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>( <span class="function"><span class="keyword">function</span> (<span class="params"> resolve </span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'promise1'</span> )</span><br><span class="line">    resolve();</span><br><span class="line">&#125; ).then( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log( <span class="string">'promise2'</span> )</span><br><span class="line">&#125; )</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log( <span class="string">'script end'</span> )</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="async-await-异步编程的终级解决方案"><a href="#async-await-异步编程的终级解决方案" class="headerlink" title="async/await 异步编程的终级解决方案"></a>async/await 异步编程的终级解决方案</h1><blockquote><p>JavaScript 的 async/await 实现，也离不开 Promise，async 用于申明一个方法是异步的，await 用于等待一个异步方法执行完成。await 只能出现在 async 函数中。</p></blockquote><h2 id="async-如何处理它的返回值的"><a href="#async-如何处理它的返回值的" class="headerlink" title="async 如何处理它的返回值的"></a>async 如何处理它的返回值的</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello async"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line"><span class="built_in">Promise</span> &#123;&lt;resolved&gt;: <span class="string">"hello async"</span>&#125;</span><br><span class="line">__proto__: <span class="built_in">Promise</span></span><br><span class="line">[[PromiseStatus]]: <span class="string">"resolved"</span></span><br><span class="line">[[PromiseValue]]: <span class="string">"hello async"</span></span><br></pre></td></tr></table></figure><p>所以 async 函数返回的是一个 Promise 对象，async 会把 return 变量通过 Promise.resolve() 封装成 Promise 对象。可以用 then() 链处理 Promise 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello async"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn().then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;<span class="built_in">console</span>.log(res)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回值</span></span><br><span class="line">hello <span class="keyword">async</span></span><br><span class="line"><span class="built_in">Promise</span> &#123;&lt;resolved&gt;: <span class="literal">undefined</span>&#125;__proto__: <span class="built_in">Promise</span>[[PromiseStatus]]: <span class="string">"resolved"</span>[[PromiseValue]]: <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><h2 id="await"><a href="#await" class="headerlink" title="await"></a>await</h2><blockquote><p>async 函数返回 Promise, await 可以用于等待 async 的返回值。await 等待任意表达式的结果，</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 语法糖 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>axios 源码解读</title>
      <link href="2019/07/23/axios-%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/"/>
      <url>2019/07/23/axios-%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">├── /dist/                     # 项目输出目录</span><br><span class="line">├── /lib/                      # 项目源码目录</span><br><span class="line">│ ├── /cancel/                 # 定义取消功能</span><br><span class="line">│ ├── /core/                   # 一些核心功能</span><br><span class="line">│ │ ├── Axios.js               # axios的核心主类</span><br><span class="line">│ │ ├── dispatchRequest.js     # 用来调用http请求适配器方法发送请求</span><br><span class="line">│ │ ├── InterceptorManager.js  # 拦截器构造函数</span><br><span class="line">│ │ └── settle.js              # 根据http响应状态，改变Promise的状态</span><br><span class="line">│ ├── /helpers/                # 一些辅助方法</span><br><span class="line">│ ├── /adapters/               # 定义请求的适配器 xhr、http</span><br><span class="line">│ │ ├── http.js                # 实现http适配器</span><br><span class="line">│ │ └── xhr.js                 # 实现xhr适配器</span><br><span class="line">│ ├── axios.js                 # 对外暴露接口</span><br><span class="line">│ ├── defaults.js              # 默认配置</span><br><span class="line">│ └── utils.js                 # 公用工具</span><br><span class="line">├── package.json               # 项目信息</span><br><span class="line">├── index.d.ts                 # 配置TypeScript的声明文件</span><br><span class="line">└── index.js                   # 入口文件</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue.config.js</title>
      <link href="2019/07/22/vue-config-js/"/>
      <url>2019/07/22/vue-config-js/</url>
      
        <content type="html"><![CDATA[<h1 id="全面解读-vue-config-js"><a href="#全面解读-vue-config-js" class="headerlink" title="全面解读 vue.config.js"></a>全面解读 <code>vue.config.js</code></h1><blockquote><p><a href="https://cli.vuejs.org/zh/config/" target="_blank" rel="noopener">参考</a></p></blockquote><blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&gt; <span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line">&gt; <span class="built_in">module</span>.exports = &#123;</span><br><span class="line">&gt;   <span class="comment">// 基本路径，默认被部署在根路径，如果需要部署在子路径，publicPath 设置为 /example/</span></span><br><span class="line">&gt;   publicPath: process.env.NODE_ENV === <span class="string">"development"</span> ? <span class="string">"/"</span> : <span class="string">"/mallActivity/"</span>,</span><br><span class="line">&gt;   outputDir: <span class="string">'dist'</span>, <span class="comment">// 运行 vue-cli-service build 时生成生产环境构建文件的目录</span></span><br><span class="line">&gt;   assetsDir: <span class="string">'assets'</span>, <span class="comment">//生成文件的静态资源目录</span></span><br><span class="line">&gt;   <span class="comment">// productionSourceMap：&#123; type:Bollean,default:true &#125; 生产源映射</span></span><br><span class="line">&gt;   <span class="comment">// 如果您不需要生产时的源映射，那么将此设置为false可以加速生产构建</span></span><br><span class="line">&gt;   productionSourceMap: <span class="literal">false</span>,</span><br><span class="line">&gt;   css: &#123;</span><br><span class="line">&gt;     loaderOptions: &#123; <span class="comment">// CSS 加载器</span></span><br><span class="line">&gt;       stylus: &#123;</span><br><span class="line">&gt;         javascriptEnabled: <span class="literal">true</span></span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;   &#125;,</span><br><span class="line">&gt;   chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">&gt;     <span class="keyword">const</span> types = [<span class="string">'vue-modules'</span>, <span class="string">'vue'</span>, <span class="string">'normal-modules'</span>, <span class="string">'normal'</span>]</span><br><span class="line">&gt;     types.forEach(<span class="function"><span class="params">type</span> =&gt;</span> addStyleResource(config.module.rule(<span class="string">'stylus'</span>).oneOf(type)))</span><br><span class="line">&gt;   &#125;,</span><br><span class="line">&gt;   devServer: &#123;</span><br><span class="line">&gt;     proxy: &#123; <span class="comment">// 在开发环境下将 API 请求代理到 API 服务器</span></span><br><span class="line">&gt;       <span class="string">'/mock'</span>: &#123;</span><br><span class="line">&gt;         target: <span class="string">'http://10.8.5.180:80'</span>,</span><br><span class="line">&gt;         pathRewrite: &#123;</span><br><span class="line">&gt;           <span class="string">'^/mock'</span>: <span class="string">'/mock'</span></span><br><span class="line">&gt;         &#125;</span><br><span class="line">&gt;       &#125;</span><br><span class="line">&gt;     &#125;</span><br><span class="line">&gt;   &#125;</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt; <span class="function"><span class="keyword">function</span> <span class="title">addStyleResource</span> (<span class="params">rule</span>) </span>&#123;</span><br><span class="line">&gt;   rule.use(<span class="string">'style-resource'</span>)</span><br><span class="line">&gt;     .loader(<span class="string">'style-resources-loader'</span>)</span><br><span class="line">&gt;     .options(&#123;</span><br><span class="line">&gt;       patterns: [</span><br><span class="line">&gt;         path.resolve(__dirname, <span class="string">'./src/assets/stylus/golbal.styl'</span>)</span><br><span class="line">&gt;       ]</span><br><span class="line">&gt;     &#125;)</span><br><span class="line">&gt; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cookie 与 Web Storage</title>
      <link href="2019/06/14/%E6%B5%8F%E8%A7%88%E5%99%A8-cookie-webStorage/"/>
      <url>2019/06/14/%E6%B5%8F%E8%A7%88%E5%99%A8-cookie-webStorage/</url>
      
        <content type="html"><![CDATA[<p>先了解下浏览器缓存存储过程的序列图：</p><div id="sequence-0"></div>`If-None-Match:"4f80f-13c-3a1xb12a"` 服务器用来判断请求资源是否有更新，如果没有更新就返回 304 状态码，浏览器继续使用缓存数据。如有更新，服务器直接返回资源给浏览器。<p>Web Storage 将少量数据存储于客户端磁盘的技术。实际业务中将不希望从数据库的少量数据通过 web storage 存储，如：用户登录态、用户当前的部分操作如购物车数量增加等。</p><h2 id="Web-Storage-使用前验证兼容性"><a href="#Web-Storage-使用前验证兼容性" class="headerlink" title="Web Storage 使用前验证兼容性"></a>Web Storage 使用前验证兼容性</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((<span class="keyword">typeof</span> Storage) == <span class="string">'undefined'</span>) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">// localStorage || sessionStorage 程序代码</span></span><br></pre></td></tr></table></figure><p><code>注意：</code></p><ul><li>由于部分 IE 和 Firefox 浏览器在测试的时候需要上传到服务器或 localhost 上执行，建议本地安装 http-server 测试。</li></ul><a id="more"></a><h2 id="window-localStorage"><a href="#window-localStorage" class="headerlink" title="window.localStorage"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/localStorage" target="_blank" rel="noopener">window.localStorage</a></h2><p>只读的 localStorage 属性<code>允许你访问一个 Document 源（origin）的对象 Storage</code>；其存储的数据能在跨浏览器会话保留，不会随浏览器关闭而消失，数据可分页、跨窗口访问。</p><p>localStorage 类似 sessionStorage<br>但其区别在于：存储在 localStorage 的数据可以长期保留；而当页面会话结束——也就是说，当页面被关闭时，存储在 sessionStorage 的数据会被清除 。</p><p><code>注意:</code></p><ul><li>无论数据存储在 localStorage 还是 sessionStorage ，它们都特定于页面的协议。</li><li>localStorage 中的键值对总是以字符串的形式存储。 (需要注意, 和 javascript 对象相比, 键值对总是以字符串的形式存储意味着数值类型会自动转化为字符串类型。</li><li>localStorage API 与 javascript 一样基于同源策略（Same-Origin Policy），网页之间的相互调用仅限于相同的网站，同源才能获取同一个 localStorage。（同源策略：相同协议，相同域名IP，相同端口）</li></ul><h3 id="window-localStorage-存取的三种方式"><a href="#window-localStorage-存取的三种方式" class="headerlink" title="window.localStorage 存取的三种方式"></a>window.localStorage 存取的三种方式</h3><ol><li><p>window.localStorage 的对象方法 setItem 与 getItem</p><blockquote><p>window.localStorage.setItem(key, value)<br>var value = window.localStorage.getItem(key)</p></blockquote></li><li><p>数组索引</p><blockquote><p>window.localStorage[‘key’] = value<br>var value = window.localStorage[‘key’]</p></blockquote></li><li><p>属性</p><blockquote><p>window.localStorage.key = value<br>var value = window.localStorage.key</p></blockquote></li></ol><h3 id="window-localStorage-清除的几种方式"><a href="#window-localStorage-清除的几种方式" class="headerlink" title="window.localStorage 清除的几种方式"></a>window.localStorage 清除的几种方式</h3><ol><li>浏览器开发者工具 - application - localStorage - 选中删除项，点击管理工具上的删除</li><li><code>window.localStorage.removeItem(key)</code></li><li><code>delete window.localStorage.key</code></li><li><code>delete window.localStorage[key]</code></li><li>清除全部数据 <code>window.localStorage.clear()</code></li></ol><h2 id="window-sessionStorage"><a href="#window-sessionStorage" class="headerlink" title="window.sessionStorage"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/sessionStorage" target="_blank" rel="noopener">window.sessionStorage</a></h2><p>用于保存临时数据，防止用户不小心刷新数据丢失，如大的表单提交。<br>sessionStorage 属性<code>允许你访问一个 session Storage 对象</code>。它与 localStorage 相似，不同之处在于 localStorage 里面存储的数据没有过期时间设置，而存储在 sessionStorage 里面的数据在页面会话结束时会被清除。页面会话在浏览器打开期间一直保持，并且重新加载或恢复页面仍会保持原来的页面会话。在新标签或窗口打开一个页面时会在顶级浏览上下文中初始化一个新的会话，这点和 session cookies 的运行方式不同。</p><blockquote><p>存储在 sessionStorage 或 localStorage 中的数据特定于该页面的协议。</p></blockquote><h3 id="window-sessionStorage-存取的三种方式"><a href="#window-sessionStorage-存取的三种方式" class="headerlink" title="window.sessionStorage 存取的三种方式"></a>window.sessionStorage 存取的三种方式</h3><ol><li><p>window.sessionStorage 的对象方法 setItem 与 getItem</p><blockquote><p>window.sessionStorage.setItem(key, value)<br>var value = window.sessionStorage.getItem(key)</p></blockquote></li><li><p>数组索引</p><blockquote><p>window.sessionStorage[‘key’] = value<br>var value = window.sessionStorage[‘key’]</p></blockquote></li><li><p>属性</p><blockquote><p>window.sessionStorage.key = value<br>var value = window.sessionStorage.key</p></blockquote></li></ol><h3 id="window-sessionStorage-清除的几种方式"><a href="#window-sessionStorage-清除的几种方式" class="headerlink" title="window.sessionStorage 清除的几种方式()"></a>window.sessionStorage 清除的几种方式()</h3><ol><li>浏览器开发者工具 - application - sessionStorage - 选中删除项，点击管理工具上的删除</li><li><code>window.sessionStorage.removeItem(key)</code></li><li><code>delete window.sessionStorage.key</code></li><li><code>delete window.sessionStorage[key]</code></li><li>清除全部数据 <code>window.sessionStorage.clear()</code></li><li>关闭浏览器或当前窗口</li></ol><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cookie" target="_blank" rel="noopener">Cookie</a></h2><p>Cookie 是一个请求首部，其中含有先前由服务器通过 Set-Cookie 首部投放并存储到客户端的 HTTP cookies。<br>这个首部可能会被完全移除，例如在浏览器的隐私设置里面设置为禁用cookie。</p><blockquote><ul><li>Cookie 数据始终在同源的http请求中携带（即使不需要），就会在浏览器和服务器间来回传递，安全性低。而 Web Storage 不会把数据发给服务器，仅存在本地</li><li>以键值对应组合保存数据</li></ul></blockquote><h2 id="Web-Storage-与-Cookie-对比表"><a href="#Web-Storage-与-Cookie-对比表" class="headerlink" title="Web Storage 与 Cookie 对比表"></a>Web Storage 与 Cookie 对比表</h2><table class="table table-striped"><thead><tr><th></th><th>属性</th><th>访问对象</th><th>过期时间</th><th>存储大小</th></tr></thead><tbody><tr><td>window.localStorage</td><td>/</td><td>Document 源（origin）的对象 Storage(local storage)</td><td>永久存储数据，浏览器关闭后数据不丢失，除非主动执行删除指令删除</td><td>HTML5 规范中，容量由客户端程序（浏览器）决定，通常 1mb~5mb</td></tr><tr><td>window.sessionStorage</td><td>/</td><td>session storage 对象</td><td>页面关闭，会话结束，session 清除</td><td>HTML5 规范中，容量由客户端程序（浏览器）决定，通常 1mb~5mb</td></tr><tr><td>Cookie</td><td>标识用户用户身份而存储在用户本地终端上的数据（通常经过加密）</td><td>/</td><td>Expires/Max-Age 之前有效</td><td>4kb</td></tr></tbody></table><script src="https://cdnjs.cloudflare.com/ajax/libs/webfont/1.6.27/webfontloader.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/snap.svg/0.4.1/snap.svg-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/underscore.js/1.8.3/underscore-min.js"></script><script src="https://cdnjs.cloudflare.com/ajax/libs/js-sequence-diagrams/1.0.6/sequence-diagram-min.js"></script><textarea id="sequence-0-code" style="display: none">title: 浏览器缓存序列图Note left of 浏览器:发起 http 请求浏览器->Cache: GET /index HTTP/1.1Note right of Cache: 缓存是空的，\n继续请求 web 服务器Cache->Web 服务器:GET /index HTTP/1.1Note left of Web 服务器: 缓存本地Web 服务器->Cache: HTTP/1.1 200 OK \n Cache-Control: \n Max-age=2000Cache->浏览器: HTTP/1.1 200 OK \n Cache-Control: \n Max-age=2000 \n Age:0Note left of 浏览器: 1000 秒后再次发起请求浏览器->Cache: GET /index HTTP/1.1Cache->Cache: /index.html \n Max-age=2000 \n Age=1000Note right of Cache: 缓存生命周期内的Cache->浏览器: HTTP/1.1 200 OK \n Cache-Control: \n Max-age=2000 \n Age:1000Note left of 浏览器: 2100 秒后再次发起请求浏览器->Cache: GET /index HTTP/1.1Note right of Cache: /index.html \n Max-age=2000 \n Age=2100 \n 缓存过期，向服务器请求Cache->Web 服务器: GET /index HTTP/1.1 \n If-None-MatchWeb 服务器->Cache: HTTP/1.1 304 Not ModifiedNote left of Web 服务器:服务器 304，\n 缓存内容没有改动Cache->浏览器: HTTP/1.1 304 \n Not Modified \n Cache-Control: \n Max-age=2000 \n Age:0</textarea><textarea id="sequence-0-options" style="display: none">{"theme":"simple"}</textarea><script>  var code = document.getElementById("sequence-0-code").value;  var options = JSON.parse(decodeURIComponent(document.getElementById("sequence-0-options").value));  var diagram = Diagram.parse(code);  diagram.drawSVG("sequence-0", options);</script>]]></content>
      
      
      
        <tags>
            
            <tag> window </tag>
            
            <tag> web storage </tag>
            
            <tag> browser </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>http 请求状态码</title>
      <link href="2019/06/12/http-%E8%AF%B7%E6%B1%82%E7%8A%B6%E6%80%81%E7%A0%81/"/>
      <url>2019/06/12/http-%E8%AF%B7%E6%B1%82%E7%8A%B6%E6%80%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h1 id="http-请求状态码-200"><a href="#http-请求状态码-200" class="headerlink" title="http 请求状态码 200"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/200" target="_blank" rel="noopener">http 请求状态码 200</a></h1><blockquote><p>请求成功，默认状态下 200 响应可以被缓存</p></blockquote><blockquote><ul><li>GET: 已经取得资源，并将资源添加到响应的消息体中。</li><li>HEAD: 响应的消息体为头部信息。</li><li>POST: 响应的消息体中包含此次请求的结果。</li><li>TRACE: 响应的消息体中包含服务器接收到的请求信息。</li><li>PUT 和 DELETE 的请求成功通常并不是响应 200 OK 的状态码，而是 204 No Content 表示无内容(或者 201 Created表示一个资源首次被创建成功)。</li></ul></blockquote><a id="more"></a><h1 id="http-请求状态码-206"><a href="#http-请求状态码-206" class="headerlink" title="http 请求状态码 206"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/206" target="_blank" rel="noopener">http 请求状态码 206</a></h1><blockquote><p>HTTP 206 Partial Content 成功状态响应代码表示请求已成功，并且主体包含所请求的数据区间，该数据区间是在请求的 Range 首部指定的。</p></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; Response Headers</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; Accept-Encoding: identity;q=1, *;q=0</span><br><span class="line">&gt; Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">&gt; Connection: keep-alive</span><br><span class="line">&gt; Host: cktvideo-1252817906.cos.ap-guangzhou.myqcloud.com</span><br><span class="line">&gt; If-Range: &quot;640f0886f386c9c253a95c5d1c01ca16-163&quot;</span><br><span class="line">&gt; **`Range: bytes=9895936-170855393`**</span><br><span class="line">&gt; Referer: https://cktvideo-1252817906.cos.ap-guangzhou.myqcloud.com/gaokeyan1.mp4</span><br><span class="line">&gt; User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>如果只包含一个数据区间，那么整个响应的 Content-Type 首部的值为所请求的文件的类型，同时包含 Content-Range 首部。</p></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; Response Headers(10)</span><br><span class="line">&gt; Accept-Ranges: bytes</span><br><span class="line">&gt; Connection: keep-alive</span><br><span class="line">&gt; Content-Length: 170855394</span><br><span class="line">&gt; ** Content-Range: bytes 0-170855393/170855394</span><br><span class="line">&gt; ** Content-Type: video/mp4</span><br><span class="line">&gt; Date: Wed, 12 Jun 2019 02:34:48 GMT</span><br><span class="line">&gt; ETag: &quot;640f0886f386c9c253a95c5d1c01ca16-163&quot;</span><br><span class="line">&gt; Last-Modified: Sun, 30 Dec 2018 17:44:16 GMT</span><br><span class="line">&gt; Server: tencent-cos</span><br><span class="line">&gt; x-cos-request-id: NWQwMDY0YzhfMWNiMjk0MGFfNThlZl83YTg5NWY=</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="http-请求状态响应码-304"><a href="#http-请求状态响应码-304" class="headerlink" title="http 请求状态响应码 304"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/304" target="_blank" rel="noopener">http 请求状态响应码 304</a></h1><blockquote><p>无需再次传输请求的内容，也就是说可以使用缓存的内容。这通常是在一些安全的方法（safe），例如 GET 或 HEAD 或 在请求中附带了头部信息： If-None-Match 或 If-Modified-Since。</p></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt; Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3</span><br><span class="line">&gt; Accept-Encoding: gzip, deflate, br</span><br><span class="line">&gt; Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">&gt; Cache-Control: max-age=0</span><br><span class="line">&gt; Connection: keep-alive</span><br><span class="line">&gt; Host: cktvideo-1252817906.cos.ap-guangzhou.myqcloud.com</span><br><span class="line">&gt; ** If-Modified-Since: Sun, 30 Dec 2018 17:44:16 GMT</span><br><span class="line">&gt; ** If-None-Match: &quot;640f0886f386c9c253a95c5d1c01ca16-163&quot;</span><br><span class="line">&gt; Range: bytes=0-1048575</span><br><span class="line">&gt; Upgrade-Insecure-Requests: 1</span><br><span class="line">&gt; User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 11_0 like Mac OS X) AppleWebKit/604.1.38 (KHTML, like Gecko) Version/11.0 Mobile/15A372 Safari/604.1</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="http-请求响应码-401"><a href="#http-请求响应码-401" class="headerlink" title="http 请求响应码 401"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/401" target="_blank" rel="noopener">http 请求响应码 401</a></h1><blockquote><p>状态码 401 Unauthorized(未授权)代表客户端错误，指的是由于缺乏目标资源要求的身份验证凭证，发送的请求未得到满足。 这个状态码会与 WWW-Authenticate 首部一起发送，其中包含有如何进行验证的信息。 这个状态类似于 403， 但是在该情况下，依然可以进行身份验证。</p></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; Request URL: https://api.github.com/user</span><br><span class="line">&gt; Request Method: GET</span><br><span class="line">&gt; Status Code: 401 Unauthorized</span><br><span class="line">&gt; Remote Address: 54.169.195.247:443</span><br><span class="line">&gt; Referrer Policy: no-referrer-when-downgrade</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="http-请求响应码-404"><a href="#http-请求响应码-404" class="headerlink" title="http 请求响应码 404"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/404" target="_blank" rel="noopener">http 请求响应码 404</a></h1><blockquote><p>状态码 404 Not Found 代表客户端错误，指的是服务器端无法找到所请求的资源。返回该响应的链接通常称为坏链（broken link）或死链（dead link），它们会导向链接出错处理(link rot)页面。 404 状态码并不能说明请求的资源是临时还是永久丢失。如果服务器知道该资源是永久丢失，那么应该返回 410 (Gone) 而不是 404 。</p></blockquote><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; Request URL: https://api.github.com/repos/helenzhanglp/blog/issues?client_id=8e7e6dda81936172806e&amp;client_secret=97f71b6bbdf731bc650ec39212061882b8f36e71&amp;labels=Gitalk,1863e4a8c0596ce3dfb3ee2f0c838431&amp;t=1560407734937</span><br><span class="line">&gt; Request Method: GET</span><br><span class="line">&gt; Status Code: 404 Not Found</span><br><span class="line">&gt; Remote Address: 54.169.195.247:443</span><br><span class="line">&gt; Referrer Policy: no-referrer-when-downgrade</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><h1 id="http-请求响应码-500"><a href="#http-请求响应码-500" class="headerlink" title="http 请求响应码 500"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/500" target="_blank" rel="noopener">http 请求响应码 500</a></h1><blockquote><p>服务器内部错误，是一个通用的全方位响应，有可能是权限或数据库链接错误。设置代理了，也会返回 500 错误</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 网络请求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git 坑</title>
      <link href="2019/06/03/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-git%E5%9D%91/"/>
      <url>2019/06/03/%E4%BB%A3%E7%A0%81%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7-git%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h3 id="idea-gitignore-忽略问题"><a href="#idea-gitignore-忽略问题" class="headerlink" title=".idea gitignore 忽略问题"></a>.idea gitignore 忽略问题</h3><blockquote><p>.gitignore 中添加 .idea/ 没用</p></blockquote><p><a href="https://help.github.com/en/articles/ignoring-files" target="_blank" rel="noopener">原因参照 - 1</a><br><a href="https://git-scm.com/docs/gitignore" target="_blank" rel="noopener">原因参照 - 2</a><br>忽略所有目录下的 .idea -&gt; **/.idea/</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached FILENAME</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeJs 学习笔记</title>
      <link href="2019/05/31/NodeJs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>2019/05/31/NodeJs-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="path"><a href="#path" class="headerlink" title="path"></a>path</h3><blockquote><p>提供用于处理文件路径和目录路径的实用工具</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li><input checked disabled type="checkbox"> <p>path.resolve()</p><blockquote><p>将路径或片断序列解析为绝对路径</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 不传参</span></span><br><span class="line">path.resolve()  <span class="comment">// '/Users/lipingzhang/gitProject/blog'</span></span><br><span class="line">path.resolve(<span class="number">1</span>) <span class="comment">// TypeError [ERR_INVALID_ARG_TYPE]: The "path" argument must be of type string. Received type number</span></span><br><span class="line">path.resolve(<span class="string">'a'</span>,<span class="string">'b'</span>) <span class="comment">// '/Users/lipingzhang/gitProject/blog/a/b'</span></span><br><span class="line">path.resolve(<span class="string">'/temp'</span>,<span class="string">'new'</span>) <span class="comment">//  '/temp/new'</span></span><br><span class="line">path.resolve(<span class="string">'wwwroot'</span>, <span class="string">'static_files/png/'</span>, <span class="string">'../gif/image.gif'</span>) <span class="comment">// '/Users/lipingzhang/gitProject/blog/wwwroot/static_files/gif/image.gif'</span></span><br></pre></td></tr></table></figure></li><li><input checked disabled type="checkbox"> <p>path.join(<string>)</string></p><blockquote><p>使用平台特定分隔符将所有给定 path 片段连接在一起，规范化生成路径</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path.join() <span class="comment">// '.' 表示当前目录</span></span><br><span class="line">path.join(process.cwd(), <span class="string">'hexo.json'</span>) <span class="comment">// '/Users/lipingzhang/Desktop/hexo-cli的副本/a.json'</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><blockquote><p>全局变量，提供有关当前 Node.js 进程信息，并对其进行控制，不需要 require</p></blockquote><h4 id="process-信号事件"><a href="#process-信号事件" class="headerlink" title="process - 信号事件"></a>process - 信号事件</h4><p>Interrupt from keyboard<br>SIGINT 在终端运行时，可以被所有平台支持，通常可以通过 <ctrl>+C 触发(虽然这个不能配置)。 当终端运行在raw模式，它不会被触发。</ctrl></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">process.on(<span class="string">'SIGINT'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// callback function</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分析 hexo 脚手架</title>
      <link href="2019/05/21/%E5%88%86%E6%9E%90-hexo-%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
      <url>2019/05/21/%E5%88%86%E6%9E%90-hexo-%E8%84%9A%E6%89%8B%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$: hexo</span><br><span class="line"></span><br><span class="line">Usage: hexo &lt;<span class="built_in">command</span>&gt;</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  <span class="built_in">help</span>     Get <span class="built_in">help</span> on a <span class="built_in">command</span>.</span><br><span class="line">  init     Create a new Hexo folder.</span><br><span class="line">  version  Display version information.</span><br><span class="line"></span><br><span class="line">Global Options:</span><br><span class="line">  --config  Specify config file instead of using _config.yml</span><br><span class="line">  --cwd     Specify the CWD</span><br><span class="line">  --debug   Display all verbose messages <span class="keyword">in</span> the terminal</span><br><span class="line">  --draft   Display draft posts</span><br><span class="line">  --safe    Disable all plugins and scripts</span><br><span class="line">  --silent  Hide output on console</span><br><span class="line"></span><br><span class="line">For more <span class="built_in">help</span>, you can use <span class="string">'hexo help [command]'</span> <span class="keyword">for</span> the detailed information</span><br><span class="line">or you can check the docs: http://hexo.io/docs/</span><br></pre></td></tr></table></figure><a id="more"></a><ol><li>help</li><li>init</li><li>version</li></ol><h3 id="引入依赖包"><a href="#引入依赖包" class="headerlink" title="引入依赖包"></a>引入依赖包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>); <span class="comment">// chalk 粉笔  "chalk": "^1.1.3",</span></span><br><span class="line"><span class="keyword">var</span> tildify = <span class="built_in">require</span>(<span class="string">'tildify'</span>); <span class="comment">// tildify 使变薄 "tildify": "^1.2.0" convert an absolute path to a tilde path 将绝对路径转换为 ~/路径</span></span><br><span class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'bluebird'</span>); <span class="comment">// bluebird 知更鸟 "bluebird": "^3.4.0",</span></span><br><span class="line"><span class="keyword">var</span> Context = <span class="built_in">require</span>(<span class="string">'./context'</span>);</span><br><span class="line"><span class="keyword">var</span> findPkg = <span class="built_in">require</span>(<span class="string">'./find_pkg'</span>);</span><br><span class="line"><span class="keyword">var</span> goodbye = <span class="built_in">require</span>(<span class="string">'./goodbye'</span>);</span><br><span class="line"><span class="keyword">var</span> minimist = <span class="built_in">require</span>(<span class="string">'minimist'</span>); <span class="comment">//minimist 参数解析</span></span><br><span class="line"><span class="keyword">var</span> resolve = <span class="built_in">require</span>(<span class="string">'resolve'</span>); <span class="comment">// 同步或异步解决方案</span></span><br><span class="line"><span class="keyword">var</span> camelCaseKeys = <span class="built_in">require</span>(<span class="string">'hexo-util/lib/camel_case_keys'</span>); <span class="comment">// 参数对象转换为驼峰命名 (?)</span></span><br></pre></td></tr></table></figure><h3 id="lib-hexo-js"><a href="#lib-hexo-js" class="headerlink" title="./lib/hexo.js"></a>./lib/hexo.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">entry</span>(<span class="params">cwd, args</span>) </span>&#123;</span><br><span class="line">  cwd = cwd || process.cwd();</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 返回 node 进程工作的当前目录    </span></span><br><span class="line"><span class="comment">   * '/Users/lipingzhang/Desktop/hexo-cli的副本'</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * process.argv</span></span><br><span class="line"><span class="comment">   * [ '/usr/local/bin/node', '/Users/lipingzhang/Desktop/hexo-cli的副本/bin/hexo', 'init' ]</span></span><br><span class="line"><span class="comment">   * 返回一个包含 node process 命令行启动时传入的参数数组</span></span><br><span class="line"><span class="comment">   * 第一个参数 process.execPath 启动 node 进程的可执行文件绝对路径</span></span><br><span class="line"><span class="comment">   * 第二个参数是将要执行的文件路径</span></span><br><span class="line"><span class="comment">   * 其它为所有其余命令行参数</span></span><br><span class="line"><span class="comment">   * process.argv.slice(2) [ 'init' ]</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * minimist minimist(process.argv.slice(2))</span></span><br><span class="line"><span class="comment">    * &#123; _: Array(1) &#125; &#123; _: [ 'init' ]&#125;</span></span><br><span class="line"><span class="comment">    * camelCaseKeys 参数对象转换为驼峰命名</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">  args = camelCaseKeys(args || minimist(process.argv.slice(<span class="number">2</span>)));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> hexo = <span class="keyword">new</span> Context(cwd, args);</span><br><span class="line">  <span class="keyword">var</span> log = hexo.log;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Change the title in console</span></span><br><span class="line">  process.title = <span class="string">'hexo'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pathFn = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkPkg</span>(<span class="params">path</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pkgPath = pathFn.join(path, <span class="string">'package.json'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> fs.readFile(pkgPath).then(<span class="function"><span class="keyword">function</span>(<span class="params">content</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> json = <span class="built_in">JSON</span>.parse(content);</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> json.hexo === <span class="string">'object'</span>) <span class="keyword">return</span> path;</span><br><span class="line">  &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err &amp;&amp; err.cause.code === <span class="string">'ENOENT'</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> parent = pathFn.dirname(path);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (parent === path) <span class="keyword">return</span>;</span><br><span class="line">      <span class="keyword">return</span> checkPkg(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="context-js"><a href="#context-js" class="headerlink" title="./context.js"></a>./context.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> logger = <span class="built_in">require</span>(<span class="string">'hexo-log'</span>);</span><br><span class="line"><span class="keyword">var</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>);</span><br><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br><span class="line"><span class="keyword">var</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'bluebird'</span>);</span><br><span class="line"><span class="keyword">var</span> ConsoleExtend = <span class="built_in">require</span>(<span class="string">'./extend/console'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Context</span>(<span class="params">base, args</span>) </span>&#123;</span><br><span class="line">  base = base || process.cwd();</span><br><span class="line">  args = args || &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  EventEmitter.call(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.base_dir = base;</span><br><span class="line">  <span class="keyword">this</span>.log = logger(args);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.extend = &#123;</span><br><span class="line">    <span class="built_in">console</span>: <span class="keyword">new</span> ConsoleExtend()</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="extend-console-js"><a href="#extend-console-js" class="headerlink" title="./extend/console.js"></a>./extend/console.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> abbrev = <span class="built_in">require</span>(<span class="string">'abbrev'</span>); <span class="comment">// 速记短别名</span></span><br><span class="line"><span class="comment">// constructor Console  --&gt; Initialization parameters store &amp;&amp; alias</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Console</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.store = &#123;&#125;;</span><br><span class="line">  <span class="keyword">this</span>.alias = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Console.prototype.get = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">  name = name.toLowerCase(); <span class="comment">// 入参转换为小写</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.store[<span class="keyword">this</span>.alias[name]];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Console.prototype.list = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.store;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Console.prototype.register = <span class="function"><span class="keyword">function</span>(<span class="params">name, desc, options, fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!name) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'name is required'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!fn) &#123;</span><br><span class="line">    <span class="keyword">if</span> (options) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">'function'</span>) &#123;</span><br><span class="line">        fn = options;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> desc === <span class="string">'object'</span>) &#123; <span class="comment">// name, options, fn</span></span><br><span class="line">          options = desc;</span><br><span class="line">          desc = <span class="string">''</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// name, desc, fn</span></span><br><span class="line">          options = &#123;&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'fn must be a function'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// name, fn</span></span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> desc === <span class="string">'function'</span>) &#123;</span><br><span class="line">        fn = desc;</span><br><span class="line">        options = &#123;&#125;;</span><br><span class="line">        desc = <span class="string">''</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'fn must be a function'</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fn.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">      fn = <span class="built_in">Promise</span>.promisify(fn);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      fn = <span class="built_in">Promise</span>.method(fn);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> c = <span class="keyword">this</span>.store[name.toLowerCase()] = fn;</span><br><span class="line">    c.options = options;</span><br><span class="line">    c.desc = desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.alias = abbrev(<span class="built_in">Object</span>.keys(<span class="keyword">this</span>.store));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="console-init"><a href="#console-init" class="headerlink" title="./console/init"></a>./console/init</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> assign = <span class="built_in">require</span>(<span class="string">'object-assign'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initConsole</span>(<span class="params">args</span>) </span>&#123;</span><br><span class="line">  args = assign(&#123;</span><br><span class="line">    install: <span class="literal">true</span>,</span><br><span class="line">    clone: <span class="literal">true</span></span><br><span class="line">  &#125;, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS display: none vs visibility: hidden</title>
      <link href="2019/05/13/CSS-display-none-vs-visibility-hidden/"/>
      <url>2019/05/13/CSS-display-none-vs-visibility-hidden/</url>
      
        <content type="html"><![CDATA[<h3 id="display-none-与-visibility-hidden-区别"><a href="#display-none-与-visibility-hidden-区别" class="headerlink" title="display:none 与 visibility:hidden 区别"></a>display:none 与 visibility:hidden 区别</h3><blockquote><p>display 指定元素显示框架的类型，none 隐藏不占文档流，不会影响布局<br>visibility 显示或隐藏元素而不更改文档的布局，hidden 相当于此元素变成透明并且 text-indent: -9999px，会影响布局</p></blockquote><a id="more"></a><h4 id="可以用以下实例进行验证"><a href="#可以用以下实例进行验证" class="headerlink" title="可以用以下实例进行验证"></a>可以用以下实例进行验证</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">'item-wrap'</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;li class="style1"&gt;</span></span><br><span class="line"><span class="comment">    &lt;img src="" alt=""&gt;</span></span><br><span class="line"><span class="comment">    &lt;div&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">  &lt;/li&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"style2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"style3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>last dom<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- more --><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.style1</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'http://img0.fengqu-inc.com/cmsres/20190430/2f836f6d-91ed-4c5e-ae2a-81c32357786e.png'</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.style2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'http://img0.fengqu-inc.com/cmsres/20190430/a8c73c89-6175-404a-b2b5-533c05d0f601.png'</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.style3</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">'http://img0.fengqu-inc.com/cmsres/20190430/0e16b8ee-4251-456a-bf35-093bace3d252.png'</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="以上三张背景图是否下载-？-没有在官方文档中找到详细说明，以下仅代表个人实验结果"><a href="#以上三张背景图是否下载-？-没有在官方文档中找到详细说明，以下仅代表个人实验结果" class="headerlink" title="以上三张背景图是否下载 ？(没有在官方文档中找到详细说明，以下仅代表个人实验结果)"></a>以上三张背景图是否下载 ？(<code>没有在官方文档中找到详细说明，以下仅代表个人实验结果</code>)</h3><ul><li><input disabled type="checkbox"> 定义样式不引用，图片资源不会下载，其它形式不管是 display: none 还是 visibility: hidden 都会下载图片资源，如下图</li></ul><hr><iframe id="cp_embed_ewpVBp" src="//codepen.io/helenzhanglp|anonymous|anon/embed/ewpVBp?height=265&theme-id=0&slug-hash=ewpVBp&default-tab=result&embed-version=2" scrolling="no" frameborder="no" height="265" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><p><img src="https://s2.ax1x.com/2019/06/14/V4D334.png" alt="图片下载资源"></p>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>随笔</title>
      <link href="2019/05/09/%E9%9A%8F%E7%AC%94/"/>
      <url>2019/05/09/%E9%9A%8F%E7%AC%94/</url>
      
        <content type="html"><![CDATA[<h3 id="本地服务器"><a href="#本地服务器" class="headerlink" title="本地服务器"></a>本地服务器</h3><ul><li>liveServer</li><li>httpServer</li><li>WampServer</li></ul><h3 id="familiar-essay"><a href="#familiar-essay" class="headerlink" title="familiar essay"></a>familiar essay</h3><p>text-align 行内元素水平居中<br>inline-block 行内元素，没有宽高，用 padding + 文本撑开<br>inline-block 行内元素，设置 padding 会从父元素溢出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Request URL: https://app.zslb.xyz/api/order/add_refund?orderId=289&amp;amount=1</span><br><span class="line">Request Method: GET</span><br><span class="line">Status Code: 405</span><br><span class="line">Remote Address: 118.25.170.213:443</span><br><span class="line">Referrer Policy: no-referrer-when-downgrade</span><br></pre></td></tr></table></figure><p>服务器端请求为 post，与当前 request method get 冲突</p><blockquote><p>请求行中指定的请求方法不能被用于请求相应的资源。<br>  该响应必须返回一个Allow 头信息用以表示出当前资源能够接受的请求方法的列表。<br>  鉴于 PUT，DELETE 方法会对服务器上的资源进行写操作，因而绝大部分的网页服务器都不支持或者在默认配置下不允许上述请求方法，对于此类请求均会返回405错误。</p></blockquote><p>元素设置 position: absolute 或 float: left 会脱离文档流</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><h3 id="tip-浏览器缓存功能"><a href="#tip-浏览器缓存功能" class="headerlink" title="tip: 浏览器缓存功能"></a><code>tip:</code> 浏览器缓存功能</h3><p>浏览网页时，浏览器会暂存网页静态资源，包括外部的 css、javascript、图片、影像等。当用户在同一浏览器浏览同一网页时，不会重新加载静态资源。优点是加快网页加载速度，减少服务器负担。缺点是当静态资源修改，缓存未到期，那么浏览器会显示缓存的旧数据。除非用户清缓存或 ctrl+f5 强制刷新重新加载。</p><blockquote><p><code>解决办法：</code>修改静态资源后，在外部链接的文件名后加上 ？+任意字符串，可以是版本号或日期，不同于旧片酬就可以。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...html</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  ...</span><br><span class="line">  &lt;script src=&quot;./t.js?v20120929&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="tip-JavaScript-数值是采用-IEEE-754-双精度-64-位格式存储，IEEE-754-标准的浮点数并不能精确地表示小数，小数运算时需要小心。"><a href="#tip-JavaScript-数值是采用-IEEE-754-双精度-64-位格式存储，IEEE-754-标准的浮点数并不能精确地表示小数，小数运算时需要小心。" class="headerlink" title="tip: JavaScript 数值是采用 IEEE 754 双精度 64 位格式存储，IEEE 754 标准的浮点数并不能精确地表示小数，小数运算时需要小心。"></a><code>tip:</code> JavaScript 数值是采用 IEEE 754 双精度 64 位格式存储，IEEE 754 标准的浮点数并不能精确地表示小数，小数运算时需要小心。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0.1</span> + <span class="number">0.2</span></span><br><span class="line"><span class="comment">// 0.30000000000000004</span></span><br></pre></td></tr></table></figure><blockquote><p><code>解决办法：</code></p></blockquote><ol><li><p>将小数运算转换成整数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0.1</span> * <span class="number">10</span> + <span class="number">0.2</span> * <span class="number">10</span>)/<span class="number">10</span></span><br><span class="line"><span class="comment">// 0.3</span></span><br></pre></td></tr></table></figure></li><li><p>使用内建函数强制转换为指定位数的小数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="number">0.1</span>+<span class="number">0.2</span>).toFixed(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// "0.30"</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="tip：-null-amp-amp-undefined"><a href="#tip：-null-amp-amp-undefined" class="headerlink" title="tip： null &amp;&amp; undefined"></a><code>tip：</code> null &amp;&amp; undefined</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">null</span> == <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="literal">null</span> === <span class="literal">undefined</span></span><br><span class="line"><span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="tip：-Garbage-Collection-会在变量超出作用域时回收，释放其占用的内存"><a href="#tip：-Garbage-Collection-会在变量超出作用域时回收，释放其占用的内存" class="headerlink" title="tip： Garbage Collection 会在变量超出作用域时回收，释放其占用的内存"></a><code>tip：</code> Garbage Collection 会在变量超出作用域时回收，释放其占用的内存</h3><h3 id="tip：-ECMAScript5-标准之后允许开发者通过属性描述器接口-PropertyDescriptor-来修改属性并且可以定义新属性。可设置-value-writable-enumerable-configurable-set-get-等。若-enumerable-设为-false，则不可枚举，for-in-时该属性不会显示。"><a href="#tip：-ECMAScript5-标准之后允许开发者通过属性描述器接口-PropertyDescriptor-来修改属性并且可以定义新属性。可设置-value-writable-enumerable-configurable-set-get-等。若-enumerable-设为-false，则不可枚举，for-in-时该属性不会显示。" class="headerlink" title="tip： ECMAScript5 标准之后允许开发者通过属性描述器接口 PropertyDescriptor 来修改属性并且可以定义新属性。可设置 value, writable, enumerable, configurable, set, get 等。若 enumerable 设为 false，则不可枚举，for in 时该属性不会显示。"></a><code>tip：</code> ECMAScript5 标准之后允许开发者通过属性描述器接口 PropertyDescriptor 来修改属性并且可以定义新属性。可设置 value, writable, enumerable, configurable, set, get 等。若 enumerable 设为 false，则不可枚举，for in 时该属性不会显示。</h3><h3 id="tip：-for…in-不仅遍历对象的实例属性，也包括原型属性。不同的浏览器遍历的顺序不同。ES6-规范中，for…of-兼容性有些问题-IE-不支持。使用时多加考虑。"><a href="#tip：-for…in-不仅遍历对象的实例属性，也包括原型属性。不同的浏览器遍历的顺序不同。ES6-规范中，for…of-兼容性有些问题-IE-不支持。使用时多加考虑。" class="headerlink" title="tip： for…in 不仅遍历对象的实例属性，也包括原型属性。不同的浏览器遍历的顺序不同。ES6 规范中，for…of 兼容性有些问题 IE 不支持。使用时多加考虑。"></a><code>tip：</code> for…in 不仅遍历对象的实例属性，也包括原型属性。不同的浏览器遍历的顺序不同。ES6 规范中，for…of 兼容性有些问题 IE 不支持。使用时多加考虑。</h3><h3 id="tip：-forEach-不能使用-break-指令中断循环。"><a href="#tip：-forEach-不能使用-break-指令中断循环。" class="headerlink" title="tip： forEach 不能使用 break 指令中断循环。"></a><code>tip：</code> forEach 不能使用 break 指令中断循环。</h3>]]></content>
      
      
      
        <tags>
            
            <tag> grocery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 居中</title>
      <link href="2019/05/05/CSS-%E5%B1%85%E4%B8%AD/"/>
      <url>2019/05/05/CSS-%E5%B1%85%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<p>居中分为两种：一是水平居中，二是垂直居中。可借用不同的布局方式做多种实现。</p><h2 id="水平布局-Normal-flow"><a href="#水平布局-Normal-flow" class="headerlink" title="水平布局 + Normal flow"></a>水平布局 + Normal flow</h2><p>不进行任何布局，采用 html 默认布局方式</p><ol><li>行内元素，父容器设置 text-align: center;</li><li>块级元素：margin: 0 auto;</li></ol><a id="more"></a><h2 id="水平布局-Flexbox"><a href="#水平布局-Flexbox" class="headerlink" title="水平布局 + Flexbox"></a>水平布局 + Flexbox</h2><ol><li>父容器设置：display: flex; justify-content: center; align-items: start; // 垂直方向不要拉伸</li><li>父容器设置：display: flex; margin: 0 auto;</li></ol><h2 id="水平布局-grid-IE-浏览器不兼容"><a href="#水平布局-grid-IE-浏览器不兼容" class="headerlink" title="水平布局 + grid (IE 浏览器不兼容)"></a>水平布局 + grid (IE 浏览器不兼容)</h2><p>父容器：display: grid; 子容器 justify-self: center; align-self: center;</p><h2 id="水平布局-定位-position-absolute"><a href="#水平布局-定位-position-absolute" class="headerlink" title="水平布局 + 定位 position: absolute"></a>水平布局 + 定位 position: absolute</h2><p>这里有三种实现(假设 元素 width: 100px)：</p><ol><li>position: absolute; margin-left: 50%; transform: translateX(-50%);</li><li>position: absolute; margin-left: 50%; transform: translateX(-50px);</li><li>position: absolute; left: 50%; margin-left: 50px;</li><li>position: absolute; left: 0; right: 0; margin: auto;</li></ol><blockquote><p><code>注意：</code></p></blockquote><ol><li>absolute 相对于最近的非 ‘static’ 元素定位；如果该元素不存在，则相对于 initial container block 定位。<a href="https://helenzhanglp.github.io/2020/10/12/CSS-position-absolute/">详见</a></li><li>transform 属性兼容 IE10 以上浏览器</li><li><a href="https://helenzhanglp.github.io/2020/10/19/CSS-Margin-auto/">有关第4种实现方式的理解</a></li></ol><h2 id="水平布局-定位-position-relative"><a href="#水平布局-定位-position-relative" class="headerlink" title="水平布局 + 定位 position: relative"></a>水平布局 + 定位 position: relative</h2><p>需要居中的 block 元素上设置样式： position: relative; margin: auto;</p><hr><h2 id="垂直居中-Normal-Flow"><a href="#垂直居中-Normal-Flow" class="headerlink" title="垂直居中 + Normal Flow"></a>垂直居中 + Normal Flow</h2><ol><li>行内元素，父容器：line-height: height</li></ol><h2 id="垂直居中-flexbox"><a href="#垂直居中-flexbox" class="headerlink" title="垂直居中 + flexbox"></a>垂直居中 + flexbox</h2><ol><li>父容器：display: flex; 要实现居中的子容器：margin: auto 0(垂直水平居中 margin: auto)</li></ol><blockquote><h1 id="display-block"><a href="#display-block" class="headerlink" title="display: block"></a>display: block</h1></blockquote><h2 id="块级元素垂直居中-display-block-position-relative-margin-25px-auto-0"><a href="#块级元素垂直居中-display-block-position-relative-margin-25px-auto-0" class="headerlink" title="块级元素垂直居中 - display: block; position: relative; margin: -25px auto 0;"></a>块级元素垂直居中 - <code>display: block; position: relative; margin: -25px auto 0;</code></h2><blockquote><p>居中元素相对于父元素向下偏移父元素的 left: 50%；再向上偏移该元素的 margin-top: -50%<br>  <strong>* 必须 - 居中元素的高 *</strong></p></blockquote><img src="https://s2.ax1x.com/2019/05/10/ERVQnx.png" alt="块级元素垂直居中" width="300" hegiht="200" align="center"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.db-vertical-center</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">25px</span> auto <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="块级元素垂直居中-display-block-position-absolute-margin-auto"><a href="#块级元素垂直居中-display-block-position-absolute-margin-auto" class="headerlink" title="块级元素垂直居中 - display: block; position: absolute; margin: auto;"></a>块级元素垂直居中 - <code>display: block; position: absolute; margin: auto;</code></h2><blockquote><p>position: absolute; 脱离文档流<br>  margin-left + left + width + margin-right + right = view width<br>  margin: auto 浏览器计算 margin<br>  脱离文档流后 margin 根据原位置进行位移</p></blockquote><img src="https://s2.ax1x.com/2019/05/10/ERVlB6.png" alt="块级元素水平居中" width="300" hegiht="200" align="center"><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efefef</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.db-center</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="块级元素垂直居中-position-relative-left-amp-top-calc"><a href="#块级元素垂直居中-position-relative-left-amp-top-calc" class="headerlink" title="块级元素垂直居中 - position: relative; left &amp; top calc()"></a>块级元素垂直居中 - <code>position: relative; left &amp; top calc()</code></h2><blockquote><p>根据父元素定位，calc 计算 left , top 位置。 用父元素的 50% - 子元素的 50%<br>  <strong>* 必须 - 居中元素的宽高 *</strong></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.db-center</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">100px</span>);</span><br><span class="line">  <span class="attribute">top</span>: <span class="built_in">calc</span>(<span class="number">50%</span> - <span class="number">25px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="块级元素垂直居中-position-relative-top-50-transform-translateY-50"><a href="#块级元素垂直居中-position-relative-top-50-transform-translateY-50" class="headerlink" title="块级元素垂直居中 - position: relative; top: 50%; transform: translateY(-50%)"></a>块级元素垂直居中 - <code>position: relative; top: 50%; transform: translateY(-50%)</code></h2><blockquote><p>position: 相对于父元素的宽高进行计算<br>  translate 元素自身的 50%</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.db-center</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h1 id="display-inline-block"><a href="#display-inline-block" class="headerlink" title="display: inline-block"></a>display: inline-block</h1></blockquote><h2 id="行内元素水平居中-text-align-center"><a href="#行内元素水平居中-text-align-center" class="headerlink" title="行内元素水平居中 - text-align: center"></a>行内元素水平居中 - <code>text-align: center</code></h2><blockquote><p>父容器为块状元素，子元素是为行内元素 display: inline-block;<br>  设置父元素的行内元素的水平居中</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dib-horizontal-center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="行内元素水平居中-line-height"><a href="#行内元素水平居中-line-height" class="headerlink" title="行内元素水平居中 - line-height"></a>行内元素水平居中 - <code>line-height</code></h2><blockquote><p>父容器为块状元素，子元素是为行内元素 display: inline-block;<br>  设置父元素的行内元素的垂直居中<br>  line-height: 值为父容器的高<br>  <strong>* 子容器为单行元素适用，如果是多行需要居中，就采用块级元素居中方案 *</strong></p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dib-horizontal-center</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h1 id="display-flex"><a href="#display-flex" class="headerlink" title="display: flex"></a>display: flex</h1></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.df-center</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><iframe id="cp_embed_byGwXx" src="//codepen.io/helenzhanglp|anonymous|anon/embed/byGwXx?height=265&theme-id=0&slug-hash=byGwXx&default-tab=result&embed-version=2" scrolling="no" frameborder="no" height="265" allowtransparency="true" allowfullscreen="true" class="cp_embed_iframe" style="width: 100%; overflow: hidden;"></iframe><blockquote><h1 id="display-table-cell"><a href="#display-table-cell" class="headerlink" title="display: table-cell"></a>display: table-cell</h1></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.dtable-center</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><h1 id="display-grid"><a href="#display-grid" class="headerlink" title="display: grid"></a>display: grid</h1></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fatherWrap</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.son</span> &#123;</span><br><span class="line">    <span class="attribute">align-self</span>: center;</span><br><span class="line">    <span class="attribute">justify-self</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 面试系列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由一个面试题引发的一系列事故</title>
      <link href="2019/04/04/Javascript-%E9%9D%A2%E8%AF%95%E9%A2%98-2/"/>
      <url>2019/04/04/Javascript-%E9%9D%A2%E8%AF%95%E9%A2%98-2/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="number">0</span>)</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">1</span>);&#125;)</span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">2</span>)&#125;)</span><br><span class="line">promise.then(<span class="built_in">console</span>.log(<span class="number">3</span>))</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="number">4</span>)&#125;,<span class="number">0</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><h3 id="Javascript-异步编程"><a href="#Javascript-异步编程" class="headerlink" title="Javascript 异步编程"></a>Javascript 异步编程</h3><p>Javascript 是单线程，同步方式运行代码。会出现阻塞进程的问题。</p><h4 id="Javascript-异步编程的实现"><a href="#Javascript-异步编程的实现" class="headerlink" title="Javascript 异步编程的实现"></a>Javascript 异步编程的实现</h4><p>主要分三类：回调函数、发布订阅、Promise 对象</p><p>** 回调函数 **</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 5, 5, 5, 5, 5</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      fn();</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'b'</span>);</span><br><span class="line">&#125;</span><br><span class="line">a(b);</span><br><span class="line"><span class="comment">// a b function a 相当于异步执行</span></span><br></pre></td></tr></table></figure><p>** PubSub Publish/Subscribe ** 发布、订阅模式，用以分发事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> PubSub = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.handlers = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">PubSub.prototype.subscribe = <span class="function"><span class="keyword">function</span>(<span class="params">eventType, handler</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (!(eventType <span class="keyword">in</span> <span class="keyword">this</span>.handlers)) &#123;</span><br><span class="line">    <span class="keyword">this</span>.handlers[eventType] = []</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.handlers[eventType].push(handler); <span class="comment">// 添加事件监听器</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">// 返回上下文环境，实现链式调用</span></span><br><span class="line">&#125;</span><br><span class="line">PubSub.prototype.publish = <span class="function"><span class="keyword">function</span>(<span class="params">eventType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> _args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>exports and module.exports</title>
      <link href="2019/03/26/exports-and-module-exports/"/>
      <url>2019/03/26/exports-and-module-exports/</url>
      
        <content type="html"><![CDATA[<h3 id="exports-和-module-exports"><a href="#exports-和-module-exports" class="headerlink" title="exports 和 module.exports"></a>exports 和 module.exports</h3><p><a href="http://nodejs.cn/api/modules.html#modules_exports_shortcut" target="_blank" rel="noopener">参考文档</a><br>nodeJS 官网中对 require() 有一段假设实现，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">require</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="built_in">module</span> = &#123; <span class="attr">exports</span>: &#123;&#125; &#125;;</span><br><span class="line">  (<span class="function">(<span class="params"><span class="built_in">module</span>, exports</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sFn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">    exports = sFn</span><br><span class="line">    <span class="built_in">module</span>.exports = sFn</span><br><span class="line">  &#125;)(<span class="built_in">module</span>, <span class="built_in">module</span>.exports);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">module</span>.exports;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="回过头来看定义"><a href="#回过头来看定义" class="headerlink" title="回过头来看定义"></a>回过头来看定义</h4><ol><li>exports<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// utils.js</span></span><br><span class="line">exports.cssLoaders = <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">  options = options || &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> cssLoader = &#123;</span><br><span class="line">    loader: <span class="string">'css-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      minimize: process.env.NODE_ENV === <span class="string">'production'</span>,</span><br><span class="line">      sourceMap: options.sourceMap</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vue.loader.config.js</span></span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">var</span> isProduction = process.env.NODE_ENV === <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  loaders: utils.cssLoaders(&#123;</span><br><span class="line">    sourceMap: isProduction</span><br><span class="line">      ? config.build.productionSourceMap</span><br><span class="line">      : config.dev.cssSourceMap,</span><br><span class="line">    extract: isProduction</span><br><span class="line">  &#125;),</span><br><span class="line">  postcss: [</span><br><span class="line">    <span class="built_in">require</span>(<span class="string">'autoprefixer'</span>)(&#123;</span><br><span class="line">      browsers: [<span class="string">'iOS &gt;= 7'</span>, <span class="string">'Android &gt;= 4.1'</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>exports 导出的是函数，引入文件 require() 之后直接调用<br>module.exports 导出的是一个对象</p></blockquote><h3 id="export-amp-amp-export-default"><a href="#export-amp-amp-export-default" class="headerlink" title="export &amp;&amp; export default"></a>export &amp;&amp; export default</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> node </tag>
            
            <tag> ES6 模块化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 模块化</title>
      <link href="2019/03/26/Javascript-%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
      <url>2019/03/26/Javascript-%E6%A8%A1%E5%9D%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>Javascript 起初只为了验证表单，后来加入了动画等。只需要在 html 中添加 <code>&lt;script&gt;&lt;/script&gt;</code> 标签即可。随着前端复杂度的提高，对于前端代码的<code>可读性、可扩展性</code>有较高的要求，就需要分多模块。这一阶段就是无模块化阶段：</p><h3 id="一、无模块化"><a href="#一、无模块化" class="headerlink" title="一、无模块化"></a>一、无模块化</h3><p>无模块化阶段代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery_scroller.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><blockquote><ol><li>变量、对象、函数均绑在全局，<code>污染全局作用域</code> 会出现命名冲突的问题。</li><li><code>依赖关系不明显</code>，开发手动处理各模块依赖，维护成本加大。</li></ol></blockquote><a id="more"></a><h3 id="二、CommonJS规范"><a href="#二、CommonJS规范" class="headerlink" title="二、CommonJS规范"></a>二、CommonJS规范</h3><p>CommonJS 由 Javascript 社区 2009 年提出的包含模块、文件、IO、控制台在内的一系列标准。Node.js 的实现中采用了 CommonJS 标准的一部分，并在其基础上作了一些调整。<br><a href="http://Javascript.ruanyifeng.com/nodejs/module.html#toc0" target="_blank" rel="noopener">参考 CommonJS 规范</a></p><h4 id="1-概述认识-module-对象"><a href="#1-概述认识-module-对象" class="headerlink" title="1. 概述认识 module 对象"></a>1. 概述认识 <code>module</code> 对象</h4><blockquote><ol><li>每个文件为一个模块，每个模块有自己的作用域。该模块定义的变量、函数、类均为私有，其它模块不可见。不会污染全局作用域</li><li>CommonJS 规范规定，每个模块内部， <code>module</code> 代表当前模块。<code>module</code> 是一个对象，属性 <code>exports</code> 是对外接口。加载模块，则是加载 <code>module.exports</code> 属性。</li></ol></blockquote><p><code>Node</code> 内部提供一个 <code>Module</code> 构造函数，所有模块都是 <code>Module</code> 的实例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Module</span>(<span class="params">id, parent</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id; <span class="comment">// 模块识别符，即带有绝对路径的模块文件</span></span><br><span class="line">    <span class="keyword">this</span>.parent = parent; <span class="comment">// 返回是一个对象，为调用该模块的模块</span></span><br><span class="line">    <span class="keyword">this</span>.children = []; <span class="comment">// 返回一个数组，表示该模块需要调用哪些模块</span></span><br><span class="line">    <span class="keyword">this</span>.filename = <span class="string">'/filename'</span>; <span class="comment">// 带有绝对路径模块的文件名</span></span><br><span class="line">    <span class="keyword">this</span>.loaded = <span class="literal">true</span>; <span class="comment">// 返回一个布尔值，表示模块是否已经完成加载</span></span><br><span class="line">    <span class="keyword">this</span>.exports = &#123;&#125;; <span class="comment">// 表示该模块输出的值</span></span><br><span class="line">    <span class="keyword">this</span>.paths = [];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Node 环境中 <code>console.log(module)</code> 会看到以下结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Module &#123;</span><br><span class="line">  id: &apos;.&apos;,</span><br><span class="line">  path: &apos;/Users/zhangliping/Desktop/demo/demo/commonJs&apos;,</span><br><span class="line">  exports: &#123;&#125;,</span><br><span class="line">  parent: null,</span><br><span class="line">  filename: &apos;/Users/zhangliping/Desktop/demo/demo/commonJs/index.js&apos;,</span><br><span class="line">  loaded: false,</span><br><span class="line">  children: [],</span><br><span class="line">  paths: [</span><br><span class="line">    &apos;/Users/zhangliping/Desktop/demo/demo/commonJs/node_modules&apos;,</span><br><span class="line">    &apos;/Users/zhangliping/Desktop/demo/demo/node_modules&apos;,</span><br><span class="line">    &apos;/Users/zhangliping/Desktop/demo/node_modules&apos;,</span><br><span class="line">    &apos;/Users/zhangliping/Desktop/node_modules&apos;,</span><br><span class="line">    &apos;/Users/zhangliping/node_modules&apos;,</span><br><span class="line">    &apos;/Users/node_modules&apos;,</span><br><span class="line">    &apos;/node_modules&apos;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-导出"><a href="#2-导出" class="headerlink" title="2. 导出"></a>2. 导出</h4><p>CommonJS 中，通过 <code>module.exports</code> 导出模块中的内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example.js</span></span><br><span class="line"><span class="keyword">const</span> variable = <span class="string">'this is a variable'</span></span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'this is a function'</span> &#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将以上变量、函数、对象，对过 module.exports 暴露出去</span></span><br><span class="line"><span class="built_in">module</span>.exports.variable = variable</span><br><span class="line">exports.fn = fn</span><br><span class="line"><span class="built_in">module</span>.exports.obj = obj</span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123; variable: 'this is a varialbe', fn: [Function: fn], obj: &#123;&#125; &#125;</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  variable: <span class="string">'this is a variable'</span>,</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="string">'this is a function'</span>&#125;,</span><br><span class="line">  obj: &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123; variable: 'this is a variable', fn: [Function: fn], obj: &#123;&#125; &#125;</span></span><br></pre></td></tr></table></figure><ul><li><p><strong><em><code>错误案例 demo 1</code></em></strong></p><blockquote><p>以下写法错误，会导致 exports 指向新的对象引用，module.exports 还是原对象引用，是个空对象，所以 name 属性并不会导出。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">exports = &#123;</span><br><span class="line">  name: <span class="string">'new object'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><em><code>错误案例 demo 2</code></em></strong></p><blockquote><p>以下 demo 将 <code>exports</code> 和 <code>module.exports</code> 混合使用，原因在于先导出了一个函数，然后 <code>module.exports</code> 重新赋值为另一个对象，之前的对象属性丢失。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">exports.fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'this. is a function'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  variable: <span class="string">'this is a variable'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#123; variable: 'this is a variable' &#125;</span></span><br></pre></td></tr></table></figure></li><li><p><strong><em><code>错误案例 demo 3</code></em></strong></p><blockquote><p>先打印出 end, 再打印出 <code>exports</code> 的内容，说明这个 exports 之后的内容也会被执行，为提高代码可读性，<code>module.exports</code> 写在文件尾部</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">exports.fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'this. is a function'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end'</span>)</span><br><span class="line"><span class="comment">// end</span></span><br><span class="line"><span class="comment">// &#123; fn: [Function] &#125;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-导入"><a href="#3-导入" class="headerlink" title="3. 导入"></a>3. 导入</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example.js</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'test the number of times the export file is executed'</span>)</span><br><span class="line">exports.hello = <span class="string">'instruction: export the function of hello'</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> example = <span class="built_in">require</span>(<span class="string">'./example'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'wait a moment..., require the js file of example again'</span>)</span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./example'</span>)</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[@zhangliingdembp:demo (master)]$ node ./commonJs/index.js</span><br><span class="line">test the number of times the export file is executed</span><br><span class="line">wait a moment..., require the js file of export again</span><br><span class="line">[@zhangliingdembp:demo (master)]$ node ./commonJs/index.js</span><br></pre></td></tr></table></figure><ul><li><strong><em>error-1 Error: Cannot find module ‘export’</em></strong><blockquote><p><code>require(&#39;example&#39;)</code> 导致以上报错，导致入的文件要给出文件路径 <code>require(&#39;./example&#39;)</code></p></blockquote></li></ul><p><code>结论：</code></p><blockquote><ol><li>所有代码都运行在模块作用域，不会污染全局作用域。</li><li>模块可以多次加载，但是只会在第一次加载时运行一次，然后运行结果就被缓存了，以后再加载，就直接读取缓存结果。要想让模块再次运行，必须清除缓存。<code>module.loaded</code> 默认为 false，如果加载过的话，该值会被设置为 true，模块代码将不再执行。</li><li>模块加载的顺序，按照其在代码中出现的顺序。</li></ol></blockquote><p>require 函数接收表达式，可以利用该特性将动态加载模块到全局</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> needModules = [<span class="string">'moduleA'</span>,<span class="string">'moduleB'</span>,<span class="string">'moduleC'</span>,...]</span><br><span class="line">needModules.map(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">require</span>(<span class="string">'./'</span>+item);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="三、AMD规范"><a href="#三、AMD规范" class="headerlink" title="三、AMD规范"></a>三、AMD规范</h3><h3 id="四、CMD规范"><a href="#四、CMD规范" class="headerlink" title="四、CMD规范"></a>四、CMD规范</h3><h3 id="五、ES6模块化"><a href="#五、ES6模块化" class="headerlink" title="五、ES6模块化"></a>五、ES6模块化</h3><p>2015 年 6 月，TC39 标准委员会正式发布 ES6(ECMAScript 6.0) 以后，Javascript 有了 <code>模块</code> 的概念。</p><ul><li>与 CommonJS 一样，ES6 Module 每个模块都有自身的作用域；</li><li>在 ES6 版本中，<code>import</code> 和 <code>export</code> 是保留关键字；</li><li>ES6 Module 自动采用严格模式（<code>use strict</code>）;</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// example.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="string">'this is a variable'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fn = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'this is a arrow function'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;a,fn&#125; <span class="keyword">from</span> <span class="string">'./example'</span>;</span><br><span class="line"><span class="keyword">let</span> b = fn();</span><br><span class="line"><span class="built_in">console</span>.log(a, b);</span><br></pre></td></tr></table></figure><h4 id="node-index-js"><a href="#node-index-js" class="headerlink" title="node index.js"></a>node index.js</h4><blockquote><p><code>SyntaxError: Cannot use import statement outside a module</code><br>不支持 import，需要 babel 转义</p></blockquote><ol><li><p>浏览器环境解决办法（目前没有运行起来）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/@babel/standalone/babel.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/babel"</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="comment">// Your ES6 code</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>引入依赖包处理<a href="https://wangdoc.com/es6/intro.html" target="_blank" rel="noopener">参考解决</a></p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> commonjs </tag>
            
            <tag> amd </tag>
            
            <tag> cmd </tag>
            
            <tag> es6 modules </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 面试题</title>
      <link href="2019/03/25/CSS-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>2019/03/25/CSS-%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<ul><li><input checked disabled type="checkbox"> <p>absolute 相对于最近的非 ‘static’ 元素定位；如果该元素不存在，则相对于 initial container block 定位。该定位方式脱离文档流，同样脱离文档流的还是 float</p></li><li><input checked disabled type="checkbox"> <p>margin/padding 设置百比时，根据父元素宽运算</p></li><li><input disabled type="checkbox"> <p>使用css实现一个自适应浏览器大小并且宽和高的比是2:1，有几种实现方法？</p><blockquote><ul><li>width 与 height 百分比是根据父元素计算的，<code>&lt;body&gt;</code> 是根据宽一般是浏览器的宽，高一般为 0，不同浏览器有所差异，这里不细说。</li><li>padding 百分比是相对于包含块的宽度,指定一个值时 该值指定四个边的内边距</li></ul></blockquote></li><li><input checked disabled type="checkbox"> <p>用 padding 撑 50% 的高</p></li></ul><a id="more"></a><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.father</span> &#123;</span><br><span class="line">  width: 100%; // 根据父元素计算</span><br><span class="line">  padding: 25% 0; // 高度根据父元素的宽计算</span><br><span class="line">  <span class="selector-tag">background-color</span>: <span class="selector-id">#f90</span>;</span><br><span class="line">  <span class="selector-tag">box-sizing</span>: <span class="selector-tag">border-box</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="supports、cacl-、-media-的用法和含义"><a href="#supports、cacl-、-media-的用法和含义" class="headerlink" title="@supports、cacl()、@media 的用法和含义"></a>@supports、cacl()、@media 的用法和含义</h3><hr><blockquote><ul><li>@supports 在这里卡了许久，想要找出当红 ui 框架中使用的案例，但最终一无所获。但是吧，既然有这样一道面试题，那就看看文档，整理整理<br>  <code>兼容性：移动端浏览器兼容较好，pc 端 IE 不兼容</code><br>  声明语法，如下 demo，包含 not, and, or 三种操作符  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">@supports</span> (<span class="attribute">transform-origin:</span> <span class="number">5%</span> <span class="number">5%</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><pre><code>**总结一下**，@supports 是用来检验某个 css 属性是否支持。是一个判断条件。</code></pre><hr><blockquote><ul><li>@media 以下 demo 源自 bootstrap  <figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>, <span class="selector-class">.h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">1.375rem</span> + <span class="number">1.5vw</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">1200px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">h1</span>, <span class="selector-class">.h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2.5rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h2</span>, <span class="selector-class">.h2</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="built_in">calc</span>(<span class="number">1.325rem</span> + <span class="number">0.9vw</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width:</span> <span class="number">1200px</span>) &#123;</span><br><span class="line">  <span class="selector-tag">h2</span>, <span class="selector-class">.h2</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2rem</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><pre><code>**总结一下**：根据不同的媒体类型，定义不同的样式，作响应式处理</code></pre><hr><blockquote><ul><li>cacl() 函数允许对 css 属性值进行一些 + - * / 的运算，如上例</li></ul></blockquote><ul><li><input disabled type="checkbox"> <p><a href="https://helenzhanglp.github.io/2019/05/05/%E5%B1%85%E4%B8%AD/">水平垂直居中</a></p></li><li><input checked disabled type="checkbox"> <p>使用 vw 为单位</p><blockquote><ul><li>vw: viewport width, 1vw = 视窗宽度的 1%</li><li>vh: viewport height, 1vh = 视窗高度的 1%</li><li>vmin: vh 与 vw 哪个小取哪个</li><li>vmax: vh 与 vw 哪个大取哪个</li></ul></blockquote></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.warp</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50vw</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f90</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript Class</title>
      <link href="2019/03/20/Javascript-Class/"/>
      <url>2019/03/20/Javascript-Class/</url>
      
        <content type="html"><![CDATA[<h3 id="定义类"><a href="#定义类" class="headerlink" title="定义类"></a>定义类</h3><h4 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h4><p>用带有 class 关键字的类名声明一个类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mermaid</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>类声明不会像函数声明一样会提升，需要先声明之后才可以访问。否则，报错：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Mermaid();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mermaid</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name, age) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Uncaught ReferenceError: Mermaid is not defined</span></span><br></pre></td></tr></table></figure><h4 id="类表达式"><a href="#类表达式" class="headerlink" title="类表达式"></a>类表达式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 匿名类 */</span></span><br><span class="line"><span class="keyword">let</span> Mermaid = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 命名类 */</span></span><br><span class="line"><span class="keyword">let</span> Everything = <span class="class"><span class="keyword">class</span> <span class="title">Everything</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Everything is posible'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>super 关键字调用父类构造函数</p></blockquote><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><blockquote><p><code>static</code> 定义一个类的静态方法，静态方法通常用于为一个应用程序创建工具函数。调用静态方法不需要实例化，不能通过类实例调用静态方法。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react 整理</title>
      <link href="2019/03/19/react-%E6%95%B4%E7%90%86/"/>
      <url>2019/03/19/react-%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h3 id="React-列表渲染"><a href="#React-列表渲染" class="headerlink" title="React 列表渲染"></a>React 列表渲染</h3><h4 id="keys"><a href="#keys" class="headerlink" title="keys"></a>keys</h4><p>React 中使用 keys 标识列表中元素的删除、添加或移除。React Diff 算法中借助 key 标识同级元素是新增还是移动，避免不必要的渲染。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">items.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  &lt;li key=&#123;item.id&#125;&gt;&#123;item.text&#125;&lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">  &#123;/</span>* <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item.text&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span> 没有 id 用索引赋 key *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure><p><code>注意：</code>最好不要用索引（index）作 key 值，因为一旦有新增、删除或移动等变化，会导致大量元素失效。进而造成不必要的重新渲染，损耗性能。可以使用 item.id 作为 key 值</p><h3 id="React-state"><a href="#React-state" class="headerlink" title="React state"></a>React state</h3><p>React 中把组件看成一个状态机（state machines）。React 中，constructor 是最先执行，且执行一次。state 在 constructor 构造函数中初始化。其它地方采用 <code>this.setState()</code> 更新组件状态。<br>React 里，通过更新组件 state 重新渲染用户界面，不需要操作 DOM，类组件使用 props 调用基础构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123;Component&#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(super) &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">    <span class="comment">// 初始化 state</span></span><br><span class="line">    <span class="keyword">this</span>.state = &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre class="mermaid">graph LR;    用户界面交互-->状态;    状态-->UI渲染;    UI渲染-->|用户界面与数据保持一致|数据;</pre><p>this.setState 之后发生了什么？<br>调用 setState 函数后，React 将 setState 参数与组件当前状态合并，触发调和过程（Reconciliation）. 经过调和过程，React 会以相对高效的方式构建 React Dom 树，得到 Dom 树后，React 会将新树与老树进行对比，找出差异节点，从而根据差异最小化渲染。</p><p>重新构造 dom ，并将新老状态进行对比，最小化渲染。</p><h3 id="React-生命周期渲染"><a href="#React-生命周期渲染" class="headerlink" title="React 生命周期渲染"></a>React 生命周期渲染</h3><pre class="mermaid">graph TM;  componentWillMount-->render;  render-->componentDidMount;  componentDidMount-->render</pre>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript prototype &amp;&amp; __proto__</title>
      <link href="2019/03/19/prototype-proto/"/>
      <url>2019/03/19/prototype-proto/</url>
      
        <content type="html"><![CDATA[<h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><p>Javascript 是基于原型的面向对象语言，对象默认有 prototype，可以将需要共享的实例方法绑在 prototype 上，达到方法共享的目的。对象每个实例都有各自 <code>__proto__</code> 属性，该属性指向对象的 prototype 属性上。这种原型链接的关系称为原型链，null 是原型链的最后一个链接。</p><p><a href="https://segmentfault.com/a/1190000015727237" target="_blank" rel="noopener">继承</a></p><h3 id="Javascript-继承"><a href="#Javascript-继承" class="headerlink" title="Javascript 继承"></a>Javascript 继承</h3><ul><li>原型链继承<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Super</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 实现继承</span></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Super()</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>只要把子类的原型指向父类的实例就可以了，再演示一个更丰满的例子</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.friends = [<span class="string">'lily'</span>, <span class="string">'lucy'</span>, <span class="string">'coco'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实现继承</span></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Base()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Audery = <span class="keyword">new</span> Son(<span class="string">'Audery'</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> Gulu = <span class="keyword">new</span> Son(<span class="string">'Gulu'</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">Gulu.friends.push(<span class="string">'emily'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(Audery.friends)</span><br></pre></td></tr></table></figure><blockquote><p>引用类型会出现数组引用多实例因共享导致的相互污染的问题，考虑使用 ** 构造函数继承 ** 实现</p></blockquote><ul><li>构造函数继承<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params">female</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sex = female</span><br><span class="line">  <span class="keyword">this</span>.friends = [<span class="string">'lily'</span>, <span class="string">'lucy'</span>, <span class="string">'coco'</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name, age, female</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对象冒充调用父类方法</span></span><br><span class="line">  Base.call(<span class="keyword">this</span>, female); <span class="comment">// 子类冒充父类，子类调用父类构造函数。即，子类复制子父类代码</span></span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> Audery = <span class="keyword">new</span> Son(<span class="string">'Audery'</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> Gulu = <span class="keyword">new</span> Son(<span class="string">'Gulu'</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">Gulu.friends.push(<span class="string">'emily'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(Audery.friends)</span><br><span class="line"><span class="built_in">console</span>.log(Gulu.friends)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>上面说了，通过对象冒充调用父类构造方法，其实就是复制父类构造函数中的属性、方法，到子类构造函数中，原型方法无法继承</p></blockquote><ul><li>组合继承<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Base</span>(<span class="params">female</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sex = female</span><br><span class="line">  <span class="keyword">this</span>.friends = [<span class="string">'lily'</span>, <span class="string">'lucy'</span>, <span class="string">'coco'</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Base.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">'I have some friends, they are '</span> + <span class="keyword">this</span>.friends.join(<span class="string">'、'</span>)+<span class="string">' respectively!'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params">name, age, female</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 对象冒充调用父类方法</span></span><br><span class="line">  Base.call(<span class="keyword">this</span>, female); <span class="comment">// 子类冒充父类，子类调用父类构造函数。即，子类复制子父类代码</span></span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">  <span class="keyword">this</span>.age = age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原型继承父类实例指向子类原型</span></span><br><span class="line">Son.prototype = <span class="keyword">new</span> Base()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Audery = <span class="keyword">new</span> Son(<span class="string">'Audery'</span>, <span class="number">2</span>)</span><br><span class="line"><span class="keyword">let</span> Gulu = <span class="keyword">new</span> Son(<span class="string">'Gulu'</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">Gulu.friends.push(<span class="string">'emily'</span>)</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>组合继承实现了：</p></blockquote><ul><li><input disabled type="checkbox"> 属性私有化、方法共享、引用数组间不相互污染</li></ul><p>** 以上是原型链继承的周边，不使用 Object.create， 以下是使用 Object.create 方法相关继承的演生 **</p><ul><li><p>原型式继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base</span>(<span class="params">o</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">F</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  F.prototype = o;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> F();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baseObj = &#123;</span><br><span class="line">  name: <span class="string">'基类'</span>,</span><br><span class="line">  arr: [<span class="string">'array1'</span>,<span class="string">'array2'</span>,<span class="string">'array3'</span>],</span><br><span class="line">  fn: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name, <span class="keyword">this</span>.arr)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> baseInstance1 = base(baseObj)</span><br><span class="line"><span class="keyword">var</span> baseInstance2 = base(baseObj)</span><br><span class="line">baseInstance2.name = <span class="string">'修改属性值'</span></span><br><span class="line">baseInstance1.arr.push(<span class="string">'array4'</span>)</span><br><span class="line"><span class="comment">/* === baseInstance2 添加了一个实例属性 === */</span></span><br></pre></td></tr></table></figure></li><li><p>寄生式继承</p></li><li><p>寄生组合继承</p></li><li><p>Class extends</p><blockquote><p>如果子类中存在构造函数，则需要在使用 this 之前首先调用 super。 与寄生组合继承不同的是，ES6 先将父类实例对象的属性和方法加到 this 上，必须先调用 super 方法，然后再用的子类构造函数修改 this</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">babel.min.js:<span class="number">2</span> Uncaught <span class="built_in">SyntaxError</span>: Inline Babel script: <span class="string">'this'</span> is not allowed before <span class="keyword">super</span>()</span><br><span class="line">  <span class="number">3</span> |   <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">  <span class="number">4</span> |     <span class="comment">// super(props);</span></span><br><span class="line">&gt; <span class="number">5</span> |     <span class="keyword">this</span>.state = &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span><br><span class="line">    |     ^</span><br><span class="line">  <span class="number">6</span> |   &#125;</span><br></pre></td></tr></table></figure><p>实现原理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个指定的对象的原型 ( 即, 内部[[Prototype]]属性）到另一个对象或  null。</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf = <span class="function"><span class="keyword">function</span> (<span class="params">obj, proto</span>) </span>&#123;</span><br><span class="line">  obj.__proto__ = proto;</span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// B 的实例继承 A 的实例</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(B.prototype, A.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">// B 继承 A 的静态属性</span></span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf(B, A);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> object </tag>
            
            <tag> 对象继承 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>函数 bind call apply</title>
      <link href="2019/03/18/%E5%87%BD%E6%95%B0-bind-call-apply/"/>
      <url>2019/03/18/%E5%87%BD%E6%95%B0-bind-call-apply/</url>
      
        <content type="html"><![CDATA[<h3 id="bind、call、apply"><a href="#bind、call、apply" class="headerlink" title="bind、call、apply"></a>bind、call、apply</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Javascript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener">bind</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Javascript/Reference/Global_Objects/Function/call" target="_blank" rel="noopener">call</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/Javascript/Reference/Global_Objects/Function/apply" target="_blank" rel="noopener">apply</a></p><h4 id="从定义上对比看"><a href="#从定义上对比看" class="headerlink" title="从定义上对比看"></a>从定义上对比看</h4><ul><li>bind - 创建一个新的函数</li><li>call - call 与 apply 相似，仅传参不同</li><li>apply - 调用一个具有给定 this 值的函数<blockquote><p>func.apply(thisArg, [argsArray])</p></blockquote></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 调用一个具有给定 this 的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TempObj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.tempArray = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">2</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> tempObj = <span class="keyword">new</span> TempObj()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指定作用域为 tempObj</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.apply(tempObj, tempObj.tempArray))</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.max.call(tempObj, ...tempObj.tempArray))</span><br></pre></td></tr></table></figure><p>** DEMO **</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组合并</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>], b = [<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">a.push(b) <span class="comment">// 3，返回数组 length</span></span><br><span class="line">a.concat(b) <span class="comment">// [1, 2, 3, 4] 创建了一个新数组</span></span><br><span class="line">a.push.apply(a, b) <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line">a.push.call(a, ...b) <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// [1, 2, 3, 4, 3, 4]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> function </tag>
            
            <tag> 函数作用域 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>箭头函数</title>
      <link href="2019/03/18/Javascript-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
      <url>2019/03/18/Javascript-%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Javascript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">Arrow Functions</a></p><blockquote><p>没有自己的 this、arguments、super、new.target，它不能用作构造函数，更适用于那些本来需要匿名函数的地方，函数简短，并且不绑定 this</p></blockquote><h4 id="从函数中认识-this"><a href="#从函数中认识-this" class="headerlink" title="从函数中认识 this"></a>从函数中认识 this</h4><h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.prop = <span class="number">1</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.prop, <span class="keyword">this</span>)</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    ++<span class="keyword">this</span>.prop</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.prop, <span class="keyword">this</span>)</span><br><span class="line">  &#125;,<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> construct = <span class="keyword">new</span> Construct()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 Construct &#123;prop: 1&#125;prop: 1__proto__: Object</span></span><br><span class="line"><span class="comment">// NaN Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> es6 </tag>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>immutableJS</title>
      <link href="2019/03/11/immutableJS/"/>
      <url>2019/03/11/immutableJS/</url>
      
        <content type="html"><![CDATA[<p>Facebook 工程师 Lee Byron 花费 3 年时间打造，与 React 同期出现，但没有被默认放到 React 工具集里（React 提供了简化的 Helper）</p><h3 id="Record"><a href="#Record" class="headerlink" title="Record"></a>Record</h3><p>Record() 可以创建一个新的 Record 类，类似于Javascript的Object，但是只接收特定字符串为key，具有默认值:</p><h3 id="setIn"><a href="#setIn" class="headerlink" title="setIn()"></a>setIn()</h3><p>setIn 设置深层结构中的某些属性</p><blockquote><p>setIn(keyPath: Iterable<any>, value: any): this</any></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> immutable </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redux</title>
      <link href="2019/03/11/redux/"/>
      <url>2019/03/11/redux/</url>
      
        <content type="html"><![CDATA[<p>哈哈，请问你是要闹哪样？<br><code>import { connect } from &#39;@tarojs/redux&#39;;</code><br>redux 文档里查了没找着，原来是 tarojs 的方法，借机认识下这哥们。</p><h3 id="connect"><a href="#connect" class="headerlink" title="connect"></a>connect</h3><blockquote><p>tarojs/redux 提供的 connect 方法将 redux 与我们的页面进行连接<br>connect 方法接受两个参数<br><code>mapStateToProps</code> 与 <code>mapDispatchToProps</code></p></blockquote><ul><li>mapStateToProps，函数类型，接受最新的 state 作为参数，用于将 state 映射到组件的 props</li><li>mapDispatchToProps，函数类型，接收 dispatch() 方法并返回期望注入到展示组件的 props 中的回调方法</li></ul><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">'@tarojs/redux'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mapStateToProps</span>(<span class="params">state</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    reducer: state.bindphoneReducer,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@connect(mapStateToProps)</span><br></pre></td></tr></table></figure><p>Javascript 状态容器</p><h3 id="connect-1"><a href="#connect-1" class="headerlink" title="connect"></a>connect</h3>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 面试题</title>
      <link href="2019/03/07/Javascript-%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>2019/03/07/Javascript-%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="变量声明-let-const-var"><a href="#变量声明-let-const-var" class="headerlink" title="变量声明 let const var"></a>变量声明 let const var</h2><table class="table table-striped"><thead><tr><th align="left">名称</th><th align="left">定义</th><th align="left">作用域</th><th align="left">赋初值</th></tr></thead><tbody><tr><td align="left">let</td><td align="left">声明变量</td><td align="left">块级作用域</td><td align="left">可以不赋初值<br>编译时声明并初始化为初值为 undefined</td></tr><tr><td align="left">const</td><td align="left">声明常量</td><td align="left">块级作用域</td><td align="left">必须赋初值</td></tr><tr><td align="left">var</td><td align="left">声明变量</td><td align="left">局部变量是函数作用域；<br>全局变量作用域为该程序</td><td align="left">不赋初值时，<br>变量提升，代码执行前创建 js 环境，声明变量，变量赋初值为 undefined</td></tr></tbody></table><p><em><code>notice:</code></em></p><ol><li>let 和 var 都是用来声明变量的，但作用域不同。</li><li>let 和 const 都是 ES6 开始正式加入 JavaScript 规范的</li><li>let 编译时执行声明初始化，未编译时处于 temporal dead zone，此时变量 is not defined;</li><li>const 声明常量必须赋初值(Uncaught SyntaxError: Missing initializer in const declaration)；</li><li>const 声明的常量值不能修改。</li></ol><h2 id="1-let"><a href="#1-let" class="headerlink" title="1.    let"></a>1.    let</h2><blockquote><p>   声明一个块级作用域的本地变量</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">const</span> C = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b) <span class="comment">// Uncaught ReferenceError: b is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(C) <span class="comment">// Uncaught ReferenceError: C is not defined</span></span><br></pre></td></tr></table></figure><blockquote><p>let 声明变量可以不赋初值，默认值为 undefined</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a; <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> b; <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">const</span> c; <span class="comment">// Uncaught SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><blockquote><p>let 声明的变量在定义编译执行时初始化。变量未声明之前不会初始化。这一时段称为暂存死区（Temporal Dead Zone, TDZ）。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="built_in">console</span>.log(b);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a; <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">let</span> b; <span class="comment">// Uncaught ReferenceError: b1 is not defined</span></span><br></pre></td></tr></table></figure><h2 id="2-const"><a href="#2-const" class="headerlink" title="2.    const"></a>2.    const</h2><blockquote><p><code>Uncaught SyntaxError: Missing initializer in const declaration</code> const 声明的变量必须赋初值<br>    <code>Uncaught ReferenceError: C is not defined</code> const 声明块级作用域变量</p></blockquote><h3 id="const-声明的变量值不能修改"><a href="#const-声明的变量值不能修改" class="headerlink" title="const 声明的变量值不能修改"></a>const 声明的变量值不能修改</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> variableTemplate = <span class="number">30</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  variableTemplate = <span class="number">22</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error) <span class="comment">// TypeError: Assignment to constant variable.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(variableTemplate)</span><br></pre></td></tr></table></figure><h3 id="const-只读引用，只是变量的标识符不能重新分配"><a href="#const-只读引用，只是变量的标识符不能重新分配" class="headerlink" title="const 只读引用，只是变量的标识符不能重新分配"></a>const 只读引用，只是变量的标识符不能重新分配</h3><blockquote><p>只是变量标识符不能重新分配</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> VARIABLE = <span class="string">'assignment value'</span></span><br><span class="line">VARIABLE = <span class="string">'assignment value'</span> <span class="comment">// TypeError: Assignment to constant variable</span></span><br><span class="line"><span class="keyword">const</span> VARIABLE = <span class="string">'Assignment to constant variable'</span> <span class="comment">// Uncaught SyntaxError: Identifier 'VARIABLE' has alreay been declared</span></span><br><span class="line"><span class="keyword">const</span> EN_OBJECT = &#123;&#125;</span><br><span class="line">EN_OBJECT.ATTRIBUTE = <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="3-var"><a href="#3-var" class="headerlink" title="3.    var"></a>3.    var</h2><p>JavaScript 根据赋值自动转换数据类型;<br>JavaScript 中 <code>+</code> 可用来链接字符串，如果运算中涉及字符串，结果为字符串链接。其它运算符（-、*、/）正确计算数字字符串;<br>JavaScript 中，null 乘任何数为 0;<br>JavaScript 代码程序执行前会先创建执行环境，变量、函数等被创建。代码运行时赋初值。这就是 JavaScript 的提升机制（hoisting）。</p><blockquote><p>var 声明变量可以不赋初值，默认值为 undefined；<br>    var 声明的变量没有块级作用域</p></blockquote><h3 id="与-var-不同-let-与-const-在全局声明定义的变量不会绑定到全局对象上（如-浏览器的全局对象-window"><a href="#与-var-不同-let-与-const-在全局声明定义的变量不会绑定到全局对象上（如-浏览器的全局对象-window" class="headerlink" title="与 var 不同 let 与 const 在全局声明定义的变量不会绑定到全局对象上（如 浏览器的全局对象 window)"></a>与 var 不同 let 与 const 在全局声明定义的变量不会绑定到全局对象上（如 浏览器的全局对象 <code>window</code>)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="number">3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a, <span class="built_in">window</span>.b, <span class="built_in">window</span>.c) <span class="comment">// 1 undefined undefined</span></span><br></pre></td></tr></table></figure><h3 id="let-和-var-定义的变量作用域不同"><a href="#let-和-var-定义的变量作用域不同" class="headerlink" title="let 和 var 定义的变量作用域不同"></a>let 和 var 定义的变量作用域不同</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testVarScope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a, <span class="string">'var'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testVarScope(); <span class="comment">// 2 "var"</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *var 声明的变量在同一函数作用域中为同一变量，所以值会修改</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testLetScope</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a, <span class="string">'let'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">testLetScope(); <span class="comment">// 1 "let"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *&#123;&#125; 为一个作用域，&#123;&#125; 中的 a 变量与 函数中首先声明的 a 为两个变量，值不会相互修改</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h3 id="三、-作用域-promise-amp-amp-promise-then"><a href="#三、-作用域-promise-amp-amp-promise-then" class="headerlink" title="三、 作用域 + promise &amp;&amp; promise.then"></a>三、 作用域 + promise &amp;&amp; promise.then</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> msg = <span class="number">1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> msg = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(msg)</span><br><span class="line"><span class="keyword">var</span> p1 =  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">msg = <span class="number">3</span></span><br><span class="line">resolve(msg)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">var</span> p2 = p1.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line"><span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(p1 === p2)</span><br><span class="line"><span class="comment">// 1 4 5 false 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* p1 gng p2 不相等的原因 */</span></span><br><span class="line"><span class="comment">// [[PromiseStatus]]: "resolved"</span></span><br><span class="line"><span class="comment">// [[PromiseValue]]: 3</span></span><br><span class="line"><span class="built_in">console</span>.log(p2)</span><br><span class="line"><span class="built_in">console</span>.log(p1)</span><br><span class="line"><span class="comment">// [[PromiseStatus]]: "resolved"</span></span><br><span class="line"><span class="comment">// [[PromiseValue]]: undefined</span></span><br></pre></td></tr></table></figure><h3 id="四、-箭头函数作用域"><a href="#四、-箭头函数作用域" class="headerlink" title="四、 箭头函数作用域"></a>四、 箭头函数作用域</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fun</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">name: <span class="string">'fn'</span>,</span><br><span class="line">show: <span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">'fun'</span></span><br><span class="line">fun().show()</span><br></pre></td></tr></table></figure><h3 id="五、正则相关-题目如下"><a href="#五、正则相关-题目如下" class="headerlink" title="五、正则相关 - 题目如下"></a>五、正则相关 - 题目如下</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str=<span class="string">'version2.1 version2.2'</span>;</span><br><span class="line"><span class="keyword">const</span> regx = <span class="regexp">/(\w+)(\d)\.(\d)/g</span>;</span><br><span class="line"></span><br><span class="line">str.match(regx)</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> [ 'version2.1', 'version2.2' ]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">regx.exec(str)</span><br><span class="line"><span class="comment">/** [ 'version2.1',</span></span><br><span class="line"><span class="comment">  'version',</span></span><br><span class="line"><span class="comment">  '2',</span></span><br><span class="line"><span class="comment">  '1',</span></span><br><span class="line"><span class="comment">  index: 0,</span></span><br><span class="line"><span class="comment">  input: 'version2.1 version2.2',</span></span><br><span class="line"><span class="comment">  groups: undefined ]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><ol><li>console.log(str.match(regx)) 结果如上，因为有正则中有 <code>g</code> 全局搜索标识符。 所以结果如上代码。</li><li>console.log(regx.exec(str)) 结果如上。</li><li>match 和 exec 的区别：<ul><li>match 是 String(String.prototype.match()) 的原型方法；exec 是 RegExp（RegExp.prototype.exec()） 的原型方法。</li><li>在 regx 不加 <code>g</code> 标识符（global）时，他们的结果是相同的，返回一个数组。数组元素包括匹配字符串、匹配组、index 匹配的位置， input 原始字符串， groups;</li><li>在 regx 加 <code>g</code> 标识符（global)）时，结果如上。<code>str.match(regx)</code> 返回的是所有匹配的字符串数组；<code>regx.exec(str)</code> 返回的第一组匹配的数组，并记录 <code>lastIndex</code> 在 regx 中，再次执行 <code>regx.exec(str)</code> 会返回下一组匹配结果。以此类推，直到最后结果为 null。</li></ul></li></ol><h3 id="六、-数组排序"><a href="#六、-数组排序" class="headerlink" title="六、 数组排序"></a>六、 数组排序</h3><blockquote><p>对数组 [10, 20, 1, 2] 进行排序</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">1</span>, <span class="number">2</span>].sort(); <span class="comment">// [ 1, 10, 2, 20 ]</span></span><br></pre></td></tr></table></figure><h3 id="六、-在一个构造方法中可以使用super关键字来调用一个父类的构造方法。"><a href="#六、-在一个构造方法中可以使用super关键字来调用一个父类的构造方法。" class="headerlink" title="六、 在一个构造方法中可以使用super关键字来调用一个父类的构造方法。"></a>六、 在一个构造方法中可以使用super关键字来调用一个父类的构造方法。</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ReferenceError: Must call super constructor in derived class before accessing 'this' or returning from derived constructor</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
            <tag> interview questions </tag>
            
            <tag> ES6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue 单向绑定 与 双向绑定</title>
      <link href="2019/03/03/Vue-%E5%8D%95%E5%90%91%E7%BB%91%E5%AE%9A-%E4%B8%8E-%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/"/>
      <url>2019/03/03/Vue-%E5%8D%95%E5%90%91%E7%BB%91%E5%AE%9A-%E4%B8%8E-%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A/</url>
      
        <content type="html"><![CDATA[<p>在数据绑定这里纠结了有断日子了，一直想把这块好好梳理一下。则日不如撞日，就今天了！<br><a href="https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001475449022563a6591e6373324d1abd93e0e3fa04397f000" target="_blank" rel="noopener">参考文档不能丢</a></p><h3 id="认识下-MVVM"><a href="#认识下-MVVM" class="headerlink" title="认识下 MVVM"></a>认识下 MVVM</h3><p>很讨论的一个概念，在它之前我只认识 MVC，曾经有一经面试就在它这里卡壳。那个时候我只认识 MVC.<br><a href="https://docs.microsoft.com/zh-cn/windows/uwp/data-binding/data-binding-and-mvvm" target="_blank" rel="noopener">哎呀，妈呀，不易啊，终于找到正主啦</a>文档中说的很清楚，mvvm 指的模型层（model）、视图层（View)及视图模型层（ViewModel)<br>正文还是有些枯燥的。其实廖老师的文档里其实已经很好的将jQuery 操作 Dom 与 MVVM 作了很好的对比，给出的实际案例，说明了<code>MVVM 是通过操作对象，从而自动更新 DOM 状态</code><br>以下是两个案例对比：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'Homer'</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">51</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 回忆下原生 js</span></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'#name'</span>).innerText(<span class="string">'HTML'</span>)</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">'#age'</span>).innerText(<span class="string">'51'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//jQuery</span></span><br><span class="line">$(<span class="string">'#name'</span>).text(name);</span><br><span class="line">$(<span class="string">'#age'</span>).text(age);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MVVM 中通过对象自动更新 DOM</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">    name: <span class="string">'Bart'</span>,</span><br><span class="line">    age: <span class="number">12</span></span><br><span class="line">&#125;;</span><br><span class="line">person.name = <span class="string">'HTML'</span></span><br><span class="line">person.age = <span class="number">51</span></span><br></pre></td></tr></table></figure><h3 id="数据绑定"><a href="#数据绑定" class="headerlink" title="数据绑定"></a>数据绑定</h3><p>模模糊糊中认为小程序是属于单向数据绑定，别人的博客中有说是双向绑定，为些还特意百度找盟友，结果发现我并不孤独。接下来分析分析数据绑定。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
            <tag> 小程序 </tag>
            
            <tag> 数据绑定 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>再看 node</title>
      <link href="2019/03/02/Node-%E5%86%8D%E7%9C%8B-node/"/>
      <url>2019/03/02/Node-%E5%86%8D%E7%9C%8B-node/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.ibm.com/developerworks/cn/opensource/os-nodejs/" target="_blank" rel="noopener">Node.js 究竟是什么？</a><br>Node 旨在提供一种简单构建可伸缩的网络程序方法</p><h3 id="认识-Node-交个朋友"><a href="#认识-Node-交个朋友" class="headerlink" title="认识 Node 交个朋友"></a>认识 Node 交个朋友</h3><p>Node 是服务器程序，特色就是处理多并发，处理方式则是每个连接会发射一个 Node 引擎进程中的运行事件，不使用锁，所以也不会有死锁的情况，也不生成 os 进程，它的服务器能支持上万并发。<br>Node 本身运行 V8 Javascript。V8 Javascript 引擎是 Google 用于其 Chrome 浏览器的底层 Javascript 引擎。</p><h3 id="Node-事件驱动编程"><a href="#Node-事件驱动编程" class="headerlink" title="Node 事件驱动编程"></a>Node 事件驱动编程</h3><p>没有过度设计，没有面向对象、没有接口，Javascript 是驱动编程语言。有闭包、可以使用匿名函数。它只需要监听事件，调用匿名函数回调，其它由系统处理。</p><h3 id="Node-的包管理工具-NPM"><a href="#Node-的包管理工具-NPM" class="headerlink" title="Node 的包管理工具 NPM"></a>Node 的包管理工具 NPM</h3><p>开发过程中通常需要依赖第三方框架，如 Jquery/element-ui 等一系列的第三方框架。这些第三方框架之间或许也是在相互依赖，直接下载、解压、处理相互间的引用似乎非常繁锁，顺应天意，包管理工具应用而生。而 Node 的包管理工具就是 NPM。</p><h3 id="简单说说-Node-安装"><a href="#简单说说-Node-安装" class="headerlink" title="简单说说 Node 安装"></a>简单说说 Node 安装</h3><p>两种方式：</p><ol><li><a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Node 官网</a>下载自己系统相应的包，通过图型界面安装。</li><li><code>brew install node</code> 通过命令安装，但前题是你安装过 <code>HomeBrew</code></li></ol><p>检查是否安装成功：<code>node -v</code> &amp;&amp; <code>npm -v</code></p><h3 id="NODE-版本切换-n"><a href="#NODE-版本切换-n" class="headerlink" title="NODE 版本切换 n"></a>NODE 版本切换 n</h3><ol><li><p>n 的安装 <code>npm install -g n</code><br>查看 n 是否安装成功 <code>n -V</code></p></li><li><p>用 n 切换 node 版本时遇到的问题及解决办法</p><ul><li><p>问题描述</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pna.nextTick is not a function</span><br></pre></td></tr></table></figure></li><li><p>解决办法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ n lts <span class="comment"># Install or activate the latest LTS node release</span></span><br><span class="line">$ npm install -g npm</span><br><span class="line">$ n stable <span class="comment"># Install or activate the latest stable  node release</span></span><br><span class="line">$ npm install -g @vue/cli</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="NODE-npm-install-报错"><a href="#NODE-npm-install-报错" class="headerlink" title="NODE npm install 报错"></a>NODE npm install 报错</h3><p><img src="/images/node/node_error_decies.png" alt="alt"></p><blockquote><p>关于这个报错，网络分析最多的原因是镜像引起的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm config get registry # 获取当前系统设置的镜像</span><br><span class="line">https://registry.npmjs.com/</span><br></pre></td></tr></table></figure><blockquote><p>查看当前镜像 <a href="https://registry.npmjs.com/，可以换成" target="_blank" rel="noopener">https://registry.npmjs.com/，可以换成</a> <a href="http://registry.npm.taobao.org/；反之，亦然" target="_blank" rel="noopener">http://registry.npm.taobao.org/；反之，亦然</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config set registry http://registry.npm.taobao.org/ # 设置当前系统的镜像为淘宝镜像</span><br></pre></td></tr></table></figure><blockquote><p>重置镜像 <a href="https://registry.npmjs.com/，可以换成" target="_blank" rel="noopener">https://registry.npmjs.com/，可以换成</a> <a href="http://registry.npm.taobao.org/；反之，亦然" target="_blank" rel="noopener">http://registry.npm.taobao.org/；反之，亦然</a></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -rf package.lock.json（或 yarn.lock） # 删除 lock 文件</span><br><span class="line">npm cache clean --force # 清除缓存</span><br><span class="line">npm cache verify # 验证缓存数据的有效性和完整性，清理垃圾数据。</span><br><span class="line">npm i # 重新安装</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue.use 与 vue.component</title>
      <link href="2019/02/25/vue-use-vue-component/"/>
      <url>2019/02/25/vue-use-vue-component/</url>
      
        <content type="html"><![CDATA[<p>Error - 1 弹层对象取自列表，列表数据在弹层编辑修改，编辑部分数据后，取消或关闭弹层，列表数据修改。<br>产生原因：vue 双向绑定<br>解决办法：copy Object, 对象重新 copy 一份</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">handlerUpdate(item) &#123;</span><br><span class="line">  <span class="comment">// 更新 item</span></span><br><span class="line">  <span class="keyword">this</span>.dialogVisible = !<span class="keyword">this</span>.dialogVisible</span><br><span class="line">  <span class="keyword">this</span>.dialogStatus = <span class="string">'edit'</span></span><br><span class="line">  <span class="keyword">this</span>.temp = <span class="built_in">Object</span>.assign(&#123;&#125;, item) <span class="comment">// copy obj</span></span><br><span class="line">  <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.$refs[<span class="string">'dataForm'</span>].clearValidate()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vm: Component = <span class="keyword">this</span></span><br></pre></td></tr></table></figure><p>以上写是不是有点奇怪，是的。我没见过，它是 <a href="https://flow.org/" target="_blank" rel="noopener">flow.js</a></p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 前端框架 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端构建工具</title>
      <link href="2019/02/25/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/"/>
      <url>2019/02/25/%E5%89%8D%E7%AB%AF%E6%9E%84%E5%BB%BA%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<p>公司之前的项目用的 grunt 构建项目的</p><h3 id="Grunt"><a href="#Grunt" class="headerlink" title="Grunt"></a>Grunt</h3><p>Grunt 首页中可用的 Grunt 插件列表吸引到了我</p><ul><li>coffeeScript</li><li>handlebas</li><li>jade</li><li>JShint</li><li>less</li><li>sass</li><li>require.js</li><li>stylus</li></ul><h4 id="Grunt-目前项目中使用到的插件"><a href="#Grunt-目前项目中使用到的插件" class="headerlink" title="Grunt - 目前项目中使用到的插件"></a>Grunt - 目前项目中使用到的插件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"grunt"</span>: <span class="string">"^0.4.5"</span>,</span><br><span class="line"><span class="string">"grunt-autoprefixer"</span>: <span class="string">"^1.0.0"</span>,</span><br><span class="line"><span class="string">"grunt-concurrent"</span>: <span class="string">"^0.5.0"</span>,</span><br><span class="line"><span class="comment">// 清除打包生成的文件，删除 dist 目录下的文件</span></span><br><span class="line"><span class="string">"grunt-contrib-clean"</span>: <span class="string">"^0.6.0"</span>,</span><br><span class="line"><span class="string">"grunt-contrib-compress"</span>: <span class="string">"^0.13.0"</span>,</span><br><span class="line"><span class="string">"grunt-contrib-concat"</span>: <span class="string">"^0.5.0"</span>,</span><br><span class="line"><span class="string">"grunt-contrib-connect"</span>: <span class="string">"^0.8.0"</span>,</span><br><span class="line"><span class="string">"grunt-contrib-copy"</span>: <span class="string">"^0.5.0"</span>,</span><br><span class="line"><span class="string">"grunt-contrib-cssmin"</span>: <span class="string">"^0.10.0"</span>,</span><br><span class="line"><span class="string">"grunt-contrib-htmlmin"</span>: <span class="string">"^0.3.0"</span>,</span><br><span class="line"><span class="string">"grunt-contrib-imagemin"</span>: <span class="string">"^0.8.0"</span>,</span><br><span class="line"><span class="string">"grunt-contrib-jshint"</span>: <span class="string">"^0.10.0"</span>,</span><br><span class="line"><span class="string">"grunt-contrib-rename"</span>: <span class="string">"0.0.3"</span>,</span><br><span class="line"><span class="string">"grunt-contrib-uglify"</span>: <span class="string">"^0.5.1"</span>,</span><br><span class="line"><span class="string">"grunt-contrib-watch"</span>: <span class="string">"^0.6.1"</span>,</span><br><span class="line"><span class="comment">// 单元测试框架 Test-Driven Development</span></span><br><span class="line"><span class="string">"grunt-mocha"</span>: <span class="string">"^0.4.10"</span>,</span><br><span class="line"><span class="string">"grunt-newer"</span>: <span class="string">"^0.7.0"</span>,</span><br><span class="line"><span class="string">"grunt-rev"</span>: <span class="string">"^0.1.0"</span>,</span><br><span class="line"><span class="string">"grunt-svgmin"</span>: <span class="string">"^0.4.0"</span>,</span><br><span class="line"><span class="string">"grunt-usemin"</span>: <span class="string">"^2.3.0"</span>,</span><br><span class="line"><span class="string">"grunt-wiredep"</span>: <span class="string">"^1.7.0"</span></span><br></pre></td></tr></table></figure><h4 id="Grunt-API"><a href="#Grunt-API" class="headerlink" title="Grunt API"></a>Grunt API</h4><ul><li>grunt.task</li></ul><ul><li><input disabled type="checkbox"> 注册任务 - 别名任务<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grunt.registerTask(<span class="string">'create'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> done = <span class="keyword">this</span>.async();</span><br><span class="line">  generator.autogen(grunt, done);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>注册任务列表</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">task.registerTask(<span class="string">'default'</span>, [<span class="string">'jshint'</span>, <span class="string">'qunit'</span>, <span class="string">'concat'</span>, <span class="string">'uglify'</span>]);</span><br></pre></td></tr></table></figure><ul><li><input disabled type="checkbox"> 注册任务 - 任务函数<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">grunt.registerTask(<span class="string">'serve'</span>, <span class="string">'start the server and preview your app, --allow-remote for remote access'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">target</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (grunt.option(<span class="string">'allow-remote'</span>)) &#123;</span><br><span class="line">      grunt.config.set(<span class="string">'connect.options.hostname'</span>, <span class="string">'0.0.0.0'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (target === <span class="string">'dist'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> grunt.task.run([<span class="string">'build'</span>, <span class="string">'connect:dist:keepalive'</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    grunt.task.run([</span><br><span class="line">      <span class="string">'clean:server'</span>,</span><br><span class="line">      <span class="string">'wiredep'</span>,</span><br><span class="line">      <span class="string">'concurrent:server'</span>,</span><br><span class="line">      <span class="string">'autoprefixer'</span>,</span><br><span class="line">      <span class="string">'connect:livereload'</span>,</span><br><span class="line">      <span class="string">'watch'</span></span><br><span class="line">    ]);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li></ul><ul><li>grunt.util<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grunt.registerTask(<span class="string">'create'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> done = <span class="keyword">this</span>.async();</span><br><span class="line">  generator.autogen(grunt, done);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="bower-包管理工具"><a href="#bower-包管理工具" class="headerlink" title="bower 包管理工具"></a>bower 包管理工具</h4><h3 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h3><h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><p>proxy 解决跨域问题</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> grunt </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域</title>
      <link href="2019/02/22/%E8%B7%A8%E5%9F%9F/"/>
      <url>2019/02/22/%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<p><code>同源，相同的协议 + 相同的域名 + 相同的端口号</code></p><p>不由的觉得很开心，“跨域”，百度输入“跨域”两个字，一大堆类标题“别再问我什么跨域”，哈哈，这是一种什么样的情感。me too.<br>我的对它的感情也很复杂，可不管怎么样，总想找个时间整理，有一定的体系。<br>切入正题</p><p>在页面中用 about:blank 或 Javascript: URL 执行的脚本会继承打开该 URL 的文档的源，因为这些类型的 URLs 没有明确包含有关原始服务器的信息。</p><p>例如，about:blank 通常作为父脚本写入内容的新的空白弹出窗口的 URL（例如，通过  Window.open()  机制）。 如果此弹出窗口也包含代码，则该代码将继承与创建它的脚本相同的源。</p><h3 id="浏览器的同源策略"><a href="#浏览器的同源策略" class="headerlink" title="浏览器的同源策略"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="noopener">浏览器的同源策略</a></h3><blockquote><ul><li><code>同源</code>策略是一种隔离恶意文件的安全机制。<br>* 对不同源之间的文档或脚本交互进行了限制。<br>* <code>不同源</code>是指两个页面的协议、端口、域名有一个不同</li></ul></blockquote><a id="more"></a><p><strong><em>与<code>https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</code>对比是否同源</em></strong></p><table class="table table-striped"><thead><tr><th align="center">序号</th><th>link</th><th>协议</th><th>域名</th><th>端口</th><th>是否同源</th><th>原因</th></tr></thead><tbody><tr><td align="center">1</td><td><a href="https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/Security/Same-origin_policy</a></td><td>https</td><td>developer.mozilla.org</td><td>80</td><td>是</td><td>路径不同</td></tr><tr><td align="center">2</td><td><a href="http://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="noopener">http://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</a></td><td>http</td><td>developer.mozilla.org</td><td>80</td><td>否</td><td>协议不同</td></tr><tr><td align="center">3</td><td><a href="https://develop.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy" target="_blank" rel="noopener">https://develop.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy</a></td><td>https</td><td>develop.mozilla.org</td><td>80</td><td>否</td><td>域名不同</td></tr><tr><td align="center">4</td><td><a href="https://developer.mozilla.org:81/index.html" target="_blank" rel="noopener">https://developer.mozilla.org:81/index.html</a></td><td>https</td><td>developer.mozilla.org</td><td>81</td><td>否\是</td><td>端口不同（IE 中端口号不在同源策略中，固在IE 浏览器中，属同源）</td></tr><tr><td align="center">5</td><td><a href="https://new.developer.mozilla.org:81/index.html" target="_blank" rel="noopener">https://new.developer.mozilla.org:81/index.html</a></td><td>https</td><td>new.developer.mozilla.org</td><td>80</td><td>否</td><td>域名 new.developer.mozilla.org 不同</td></tr></tbody></table><h4 id="IE-是否同源略有差异"><a href="#IE-是否同源略有差异" class="headerlink" title="IE 是否同源略有差异"></a>IE 是否同源略有差异</h4><blockquote><ul><li><input checked disabled type="checkbox"> 在 IE 中，两个高度互信的域名不用遵守同源策略限制。<code>授信范围（Trust Zones）</code></li></ul></blockquote><ul><li><input checked disabled type="checkbox"> 在 IE 中，<code>端口</code>号不在同源策略中，即协议、域名相同则不受同源策略限制</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.domain = <span class="string">"company.com"</span>; <span class="comment">// 修改当前域名</span></span><br></pre></td></tr></table></figure><h4 id="跨域解决方案-document-domain-iframe"><a href="#跨域解决方案-document-domain-iframe" class="headerlink" title="跨域解决方案 - document.domain + iframe"></a>跨域解决方案 - document.domain + iframe</h4><p><code>共享数据的两个页面域名有共同的主域名或b域名是a域名的子域名</code></p><blockquote><p>上表 4、5 中，主域名相同，均为 ‘mozilla.org’<br>  <a href="https://developer.mozilla.org:81/index.html" target="_blank" rel="noopener">https://developer.mozilla.org:81/index.html</a> 中<br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"https://new.developer.mozilla.org:81/index.html"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.domain = <span class="string">'mozilla.org'</span>;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> user = <span class="string">'HelenZhanglp'</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><a href="https://new.developer.mozilla.org:81/index.html" target="_blank" rel="noopener">https://new.developer.mozilla.org:81/index.html</a><br>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="built_in">document</span>.domain = <span class="string">'mozilla.org'</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p><strong>* 如此，new.developer.mozilla.org 所以访问到 developer.mozilla.org 中的数据 *</strong></p></blockquote><h4 id="跨域解决方案-jsonp"><a href="#跨域解决方案-jsonp" class="headerlink" title="跨域解决方案 - jsonp"></a>跨域解决方案 - jsonp</h4><blockquote><p>jsonp 是 json 的使用模式，使用 jsonp 跨域，没有兼容方面问题<br><code>img,iframe,script</code> 三个标签可以通过 src 属性获取不同源的服务器资源<br>当使用 jsonp 模式发送请求时 <strong><em>需要服务端支持</em></strong> 需要用 callback 函数包裹 json 串</p></blockquote><h5 id="以下案例是用-node-启后端服务"><a href="#以下案例是用-node-启后端服务" class="headerlink" title="以下案例是用 node 启后端服务"></a>以下案例是用 node 启后端服务</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// localhost:4000/index.html</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(data.name, <span class="string">'jsonp'</span>)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">'http://localhost:8888/?callback=fn'</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// node server.js</span></span><br><span class="line"><span class="keyword">let</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> urllib = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  response.writeHead(<span class="number">200</span>, &#123;<span class="string">'Content-Type'</span>: <span class="string">'text/plain'</span>&#125;)</span><br><span class="line">  <span class="keyword">var</span> params = urllib.parse(request.url, <span class="literal">true</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (params.query &amp;&amp; params.query.callback) &#123;</span><br><span class="line">    <span class="keyword">var</span> str =  params.query.callback + <span class="string">'('</span> + <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      name: <span class="string">'HelenZhanglp'</span></span><br><span class="line">    &#125;) + <span class="string">')'</span>; <span class="comment">//jsonp</span></span><br><span class="line">    <span class="built_in">console</span>.log(str)</span><br><span class="line"></span><br><span class="line">    response.end(str);</span><br><span class="line">  &#125;</span><br><span class="line">  response.end(<span class="string">'localhost:8888'</span>)</span><br><span class="line">&#125;).listen(<span class="number">8888</span>)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server running at http://127.0.0.1:8888/index.js'</span>);</span><br></pre></td></tr></table></figure><p>以上 Demo 二个注意点：</p><ol><li><a href="http://localhost:8888/?callback=fn" target="_blank" rel="noopener">http://localhost:8888/?callback=fn</a> 注意这个链接，参数以前加 <code>?</code>。如此，node 服务端可以通过 urllib.parse(request.url, true) 进入参数解析</li><li>函数 fn 是以变量赋值方式声明的，这里有个<a href>变量提升</a> 的概念，一定要先声明赋值后再引用，如 demo (localhost:4000/index.html)。顺序不能错。</li><li>注意：JSONP只支持GET请求，服务端可能在JSONP响应中夹带恶意代码，判断是否请求成功是困难的。</li></ol><h4 id="跨域资源共享（CORS）"><a href="#跨域资源共享（CORS）" class="headerlink" title="跨域资源共享（CORS）"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noopener">跨域资源共享（CORS）</a></h4><ol><li><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/CORS" target="_blank" rel="noopener">CORS</a> Cross-Origin Resource Sharing，跨域资源共享）是一个系统，它由一系列传输的HTTP头组成，这些<code>HTTP头决定浏览器是否阻止前端 JavaScript 代码获取跨域请求的响应</code>。同源安全策略 默认阻止“跨域”获取资源。但是 CORS 给了web服务器这样的权限，即服务器可以选择，允许跨域请求访问到它们的资源。</li><li>跨域资源共享(CORS) 是一种机制，它使用额外的 HTTP 头来告诉浏览器，让运行在一个 origin (domain) 上的Web应用被准许访问来自不同源服务器上的指定的资源。当一个资源从与该资源本身所在的服务器不同的域、协议或端口请求一个资源时，资源会发起一个跨域 HTTP 请求。比如，站点 <a href="http://domain-a.com" target="_blank" rel="noopener">http://domain-a.com</a> 的某 HTML 页面通过 <img> 的 src 请求 <a href="http://domain-b.com/image.jpg。网络上的许多页面都会加载来自不同域的CSS样式表，图像和脚本等资源。" target="_blank" rel="noopener">http://domain-b.com/image.jpg。网络上的许多页面都会加载来自不同域的CSS样式表，图像和脚本等资源。</a><br>出于安全原因，浏览器限制从脚本内发起的跨源HTTP请求。例如，XMLHttpRequest 和 Fetch API 遵循同源策略。这意味着使用这些 API的 Web 应用程序只能从加载应用程序的同一个域请求HTTP资源，除非响应报文包含了正确CORS响应头。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 浏览器 </tag>
            
            <tag> 跨域 </tag>
            
            <tag> 同源策略 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS BFC</title>
      <link href="2019/02/20/CSS-BFC/"/>
      <url>2019/02/20/CSS-BFC/</url>
      
        <content type="html"><![CDATA[<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context" target="_blank" rel="noopener">个人的官方是 MDN 文档，信得过，值得依赖</a><br>[同时借鉴 前端精选文摘：BFC 神奇背后的原理]（<a href="https://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html）发现真正要理解" target="_blank" rel="noopener">https://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html）发现真正要理解</a> BFC 不仅仅要清楚创建块级格式化上下文的方式，还要清楚一些它布局的规则。</p><p><strong>BFC - Block Formatting Context Web</strong> 页面可视化css渲染的一部分，是布局过程中生成块级盒子的区域，也是浮动元素与其它元素交互的区域。</p><h3 id="创建块级格式化上下文的方式（Block-Formatting-Context）"><a href="#创建块级格式化上下文的方式（Block-Formatting-Context）" class="headerlink" title="创建块级格式化上下文的方式（Block Formatting Context）"></a>创建块级格式化上下文的方式（Block Formatting Context）</h3><ul><li><code>绝对定位元素</code><strong>position: absolute/position: fixed</strong> 会创建块级上下文<blockquote><p>图标居定位右上角 <a href="https://github.com/HelenZhangLP/demo/blob/master/postionAbsoluteFixedBlock/index.html" target="_blank" rel="noopener">以下 demo 代码</a></p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>navigator1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>navigator2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>navigator3<span class="tag">&lt;<span class="name">i</span>&gt;</span>vip icon<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">i</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">2px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f90</span>;</span><br><span class="line">  <span class="attribute">text-indent</span>: -<span class="number">9999px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">11px</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(http://img.mukewang.com/<span class="number">545304730001307300280011</span>.gif) no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/demo/positionAbsoluteFixedBlock/position-absolute-block-1.jpg" alt="position-absolute-block-1"><br>上图是一个注释掉<code>position: absolute</code>后的错误示例，如 <code>&lt;i&gt;</code> 非块级元素，<code>text-indent: -9999px</code> 不生效，<code>margin: -2px 0 0 1px</code>在垂直方向同样不生效。注释文本撑开，显示vip图片，若无<code>vip icon</code>，背影图同样不显示，因为 <code>width/height</code> 对非块级元素不生效。<code>放开position: absolute 注释后，BFC 化后，实现效果如下图</code></p><p><img src="/images/demo/positionAbsoluteFixedBlock/position-absolute-block-2.jpg" alt="position-absolute-block-2"></p><hr><ul><li>overflow 值不为 visible（default/visible）</li><li>浮动元素（float 不为 none）<blockquote><p>浮动实现两列表布局<br>盒子 .bfc1 与 盒子 .bfc2，左右布局，左侧盒子宽 100，左侧盒子根据父元素高自适应</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'content'</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'bfc1'</span>&gt;</span>bfc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'bfc2'</span>&gt;</span>bfc<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">border</span>: solid <span class="number">3px</span> <span class="number">#dd9</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bfc1</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#f99</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bfc2</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#fcc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="http://audreyzhang.s3-cn-east-1.qiniucs.com/static/images/bfc-float-overflow-1.png"><blockquote><p>由图可以看出，块状元素布局是由上自下，每个元素与父元素左边框接触<br>左浮动实现两列表布局</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line"><span class="attribute">border</span>: solid <span class="number">3px</span> <span class="number">#dd9</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line"><span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bfc1</span> &#123;</span><br><span class="line">  float: left;  // 左浮动实现两列表布局</span><br><span class="line"><span class="selector-tag">width</span>: 100<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">height</span>: 150<span class="selector-tag">px</span>;</span><br><span class="line"><span class="selector-tag">background</span>: <span class="selector-id">#f99</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.bfc2</span> &#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line"><span class="attribute">background</span>: <span class="number">#fcc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="http://audreyzhang.s3-cn-east-1.qiniucs.com/static/images/bfc-float-overflow-2.png">]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 盒模型</title>
      <link href="2019/02/20/CSS-%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
      <url>2019/02/20/CSS-%E7%9B%92%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>该文档整理基于<a href="https://www.ibm.com/developerworks/cn/web/1310_shatao_quirks/#N101C3" target="_blank" rel="noopener">怪异模式（Quirks Mode）对 HTML 页面的影响</a></p><p>切入正题，说说盒模型。通过上面那篇文章，我意识到了盒模型的差异源于浏览器的渲染解析差异。最突出的代表要数IE浏览器，在 IE 中，有四种标准模式（Standards Mode）- IE7/8/9/10 Standards Mode；两种怪异模式（Quirks Mode）IE5 Quirks 和 IE10 Quirks。这两类文档模式在盒模型的渲染上有所差异。</p><h3 id="话不多说，先上图"><a href="#话不多说，先上图" class="headerlink" title="话不多说，先上图"></a>话不多说，先上图</h3><p><img src="https://bkimg.cdn.bcebos.com/pic/a9d3fd1f4134970a37cf81a69fcad1c8a6865dfe?x-bce-process=image/watermark,image_d2F0ZXIvYmFpa2U4MA==,g_7,xp_5,yp_5" alt="W3C标准盒模型">;<br><strong><center>【W3C标准盒模型】</center></strong><br><img src="https://www.ibm.com/developerworks/cn/web/1310_shatao_quirks/image005.jpg" alt="IE盒模型"><br><strong><center>【IE盒模型】</center></strong></p><p>由上图可以看出：</p><blockquote><p>IE Quirks 怪异模式 盒模型  width = border + padding + content<br>  W3C 盒模型 width = content width</p></blockquote><a id="more"></a><h3 id="box-sizing（兼容-IE8-浏览器）"><a href="#box-sizing（兼容-IE8-浏览器）" class="headerlink" title="box-sizing（兼容 IE8+浏览器）"></a>box-sizing（兼容 <code>IE8+</code>浏览器）</h3><p>定义用户代理（user agent）计算元素总宽高计算方式的 css3 属性，文档定义如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-sizing ： content-box || border-box || inherit</span><br></pre></td></tr></table></figure><p>content-box: 默认值，W3C 盒模型，元素所占区域宽 = border+padding+（content=width）。<br>border-box: 元素渲染模式为 IE Quirks 渲染方式，即元素所占区域宽高 = width = border + padding + content</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 之数据类型</title>
      <link href="2019/02/08/Javascript-%E4%B8%AD%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E4%B8%8E%E5%8E%9F%E5%9E%8B%E5%B1%9E%E6%80%A7/"/>
      <url>2019/02/08/Javascript-%E4%B8%AD%E7%9A%84%E5%AE%9E%E4%BE%8B%E5%B1%9E%E6%80%A7%E4%B8%8E%E5%8E%9F%E5%9E%8B%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>想对 Promise 作一个深入了解，<code>console.dir(Promise)</code>，得出以下结果。</p><img src="http://audreyzhang.s3-cn-east-1.qiniucs.com/static/images/Javascript-property-instance.png?imageView2/2/w/500"><p>上图可以看到 Promise 即有实例属性、方法，又有原型属性方法。接下来，我要归整归整，Javascript 中的实例属性方法与原型属性方法。</p><a id="more"></a><p><a href="http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html</a></p><h3 id="Javascript-数据类型"><a href="#Javascript-数据类型" class="headerlink" title="Javascript 数据类型"></a>Javascript 数据类型</h3><p>纠结了多日，一直没能给出一个自己认为合理的表述方式，直到看到下图：</p><!--<img src="http://audreyzhang.s3-cn-east-1.qiniucs.com/static/images/jsDataTypes.jpg">--><p><img src="/images/Javascript/jsDataTypes.jpg" alt="alt"><br>与《Javascript高级程序设计》不同，这张图中没有 null。我这边先就图中的信息作一个解析，图中，将数据类型分为值类型与引用类型。</p><ul><li><input checked disabled type="checkbox"> <p>值类型或称基本数据类型，可用 <code>typeof</code> 判断值类型</p><ul><li><p>undefined</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; typeof undefined</span><br><span class="line">  <span class="string">'undefined'</span></span><br></pre></td></tr></table></figure></li><li><p>null</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; typeof null</span><br><span class="line"><span class="string">'object'</span></span><br></pre></td></tr></table></figure></li><li><p>number、boolean、string</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&gt; typeof undefined</span><br><span class="line"><span class="string">'undefined'</span></span><br><span class="line">&gt; typeof 1</span><br><span class="line"><span class="string">'number'</span></span><br><span class="line">&gt; typeof <span class="string">''</span></span><br><span class="line"><span class="string">'string'</span></span><br><span class="line">&gt; typeof <span class="literal">true</span></span><br><span class="line"><span class="string">'boolean'</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>[-] 引用类型，用 <code>instanceof</code> 判断引用类型</p></li></ul><p>最新的 ECMAScript 标准定义了7种数据类型：</p><ul><li><input disabled type="checkbox"> <p>6 种基本数据类型</p><ul><li><p><strong>布尔值（Boolean）</strong>，有2个值分别是：true 和 false.</p></li><li><p><strong>null</strong>，一个表明 null 值的特殊关键字。 <code>Javascript 是大小写敏感的，因此 null 与 Null、NULL或变体完全不同</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; null</span><br><span class="line">  null</span><br><span class="line">&gt; Null</span><br><span class="line">  ReferenceError: Null is not defined</span><br><span class="line">&gt; NULL</span><br><span class="line">  ReferenceError: NULL is not defined</span><br></pre></td></tr></table></figure></li><li><p><strong>undefined</strong>，和 null 一样是一个特殊的关键字，undefined 表示变量未定义时的属性。</p></li><li><p><strong>数字（Number）</strong>，整数或浮点数，例如： 42 或者 3.14159。</p></li><li><p><strong>字符串（String）</strong>，字符串是一串表示文本值的字符序列，例如：”Howdy” 。</p></li><li><p><strong>代表（Symbol）</strong> ( 在 ECMAScript 6 中新添加的类型).。一种实例是唯一且不可改变的数据类型。</p></li></ul></li></ul><blockquote><p>除了 null 与 undefined 以外，其它基本类型都有相应的包装对象</p></blockquote><ul><li><input disabled type="checkbox"> 对象类型</li></ul><h3 id="对象类型"><a href="#对象类型" class="headerlink" title="对象类型"></a>对象类型</h3><p>Javascript 中的几乎所有事物都是对象：字符串、数值、数组、函数等，</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Node 常用命令</title>
      <link href="2019/02/08/Node-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2019/02/08/Node-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="npm"><a href="#npm" class="headerlink" title="npm"></a>npm</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Usage: npm &lt;command&gt;</span><br><span class="line"></span><br><span class="line">where &lt;command&gt; is one of:</span><br><span class="line">    access, adduser, audit, bin, bugs, c, cache, ci, cit,</span><br><span class="line">    clean-install, clean-install-test, completion, config,</span><br><span class="line">    create, ddp, dedupe, deprecate, dist-tag, docs, doctor,</span><br><span class="line">    edit, explore, get, help, help-search, hook, i, init,</span><br><span class="line">    install, install-ci-test, install-test, it, link, list, ln,</span><br><span class="line">    login, logout, ls, org, outdated, owner, pack, ping, prefix,</span><br><span class="line">    profile, prune, publish, rb, rebuild, repo, restart, root,</span><br><span class="line">    run, run-script, s, se, search, set, shrinkwrap, star,</span><br><span class="line">    stars, start, stop, t, team, test, token, tst, un,</span><br><span class="line">    uninstall, unpublish, unstar, up, update, v, version, view,</span><br><span class="line"></span><br><span class="line">    whoami</span><br><span class="line">    npm &lt;command&gt; -h  quick help on &lt;command&gt;</span><br><span class="line">    npm -l            display full usage info</span><br><span class="line">    npm help &lt;term&gt;   search for help on &lt;term&gt;</span><br><span class="line">    npm help npm      involved overview</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Specify configs in the ini-formatted file:</span><br><span class="line">    /Users/lipingzhang/.npmrc</span><br><span class="line">or on the command line via: npm &lt;command&gt; --key value</span><br><span class="line">Config info can be viewed via: npm help config</span><br><span class="line"></span><br><span class="line">npm@6.8.0 /usr/local/lib/node_modules/npm</span><br></pre></td></tr></table></figure><blockquote><p>退出 node 环境</p></blockquote><ol><li>两次ctrl+C</li><li>一次ctrl+D</li><li><code>process.exit()</code></li><li>.exit</li></ol>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>bluebird &amp;&amp; Promise</title>
      <link href="2019/02/08/bluebird-Promise/"/>
      <url>2019/02/08/bluebird-Promise/</url>
      
        <content type="html"><![CDATA[<p>本想看看 markdown 怎么通过 hexo 生成 html。结果被第一代码吸引了，发现呐，经常用的 Promise 竟然引入 bluebird，好吧。承认怎么跑偏了。不管了，捡到篮子的都是菜。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="built_in">Promise</span> = <span class="built_in">require</span>(<span class="string">'bluebird'</span>);</span><br></pre></td></tr></table></figure><h3 id="Javascript-Promise"><a href="#Javascript-Promise" class="headerlink" title="Javascript - Promise"></a>Javascript - Promise</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123; [<span class="built_in">Function</span>: <span class="built_in">Promise</span>]</span><br><span class="line">  [length]: <span class="number">1</span>,</span><br><span class="line">  [name]: <span class="string">'Promise'</span>,</span><br><span class="line">  [prototype]:</span><br><span class="line">   <span class="built_in">Promise</span> &#123;</span><br><span class="line">     [<span class="keyword">constructor</span>]: [Circular],</span><br><span class="line">     [then]: &#123; [<span class="built_in">Function</span>: then] [length]: <span class="number">2</span>, [name]: <span class="string">'then'</span> &#125;,</span><br><span class="line">     [<span class="keyword">catch</span>]: &#123; [<span class="built_in">Function</span>: <span class="keyword">catch</span>] [length]: <span class="number">1</span>, [name]: <span class="string">'catch'</span> &#125;,</span><br><span class="line">     [chain]: &#123; [<span class="built_in">Function</span>: chain] [length]: <span class="number">2</span>, [name]: <span class="string">'chain'</span> &#125;,</span><br><span class="line"></span><br><span class="line">     [<span class="built_in">Symbol</span>(<span class="built_in">Symbol</span>.toStringTag)]: <span class="string">'Promise'</span> &#125;,</span><br><span class="line">  [reject]: &#123; [<span class="built_in">Function</span>: reject] [length]: <span class="number">1</span>, [name]: <span class="string">'reject'</span> &#125;,</span><br><span class="line">  [all]: &#123; [<span class="built_in">Function</span>: all] [length]: <span class="number">1</span>, [name]: <span class="string">'all'</span> &#125;,</span><br><span class="line">  [race]: &#123; [<span class="built_in">Function</span>: race] [length]: <span class="number">1</span>, [name]: <span class="string">'race'</span> &#125;,</span><br><span class="line">  [resolve]: &#123; [<span class="built_in">Function</span>: resolve] [length]: <span class="number">1</span>, [name]: <span class="string">'resolve'</span> &#125;,</span><br><span class="line">  [defer]: &#123; [<span class="built_in">Function</span>: defer] [length]: <span class="number">0</span>, [name]: <span class="string">'defer'</span> &#125;,</span><br><span class="line">  [accept]: &#123; [<span class="built_in">Function</span>: accept] [length]: <span class="number">1</span>, [name]: <span class="string">'accept'</span> &#125;,</span><br><span class="line">  [<span class="built_in">Symbol</span>(<span class="built_in">Symbol</span>.species)]: [Getter] &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Promise-method"><a href="#Promise-method" class="headerlink" title="Promise.method"></a>Promise.method</h3><h3 id="Promise-promisify"><a href="#Promise-promisify" class="headerlink" title="Promise.promisify"></a>Promise.promisify</h3><blockquote><p>NodeJS 的函数风格转换为 Promise 方法，可以认为是一种语法粮。<br><a href="https://segmentfault.com/a/1190000008479644" target="_blank" rel="noopener">Promisify 的源码解析</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>express</title>
      <link href="2019/02/06/express/"/>
      <url>2019/02/06/express/</url>
      
        <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(<span class="string">'_partial/ocean'</span>) %&gt;</span><br></pre></td></tr></table></figure><p>ejs 引发的一系列问题<br><code>partial()</code> 是 express 框架方法，先了解下 express。<br><a href="http://www.expressjs.com.cn/" target="_blank" rel="noopener">expressjs 官网</a>是这样介绍的，它是 Web 应用程序<br>Express 是一个保持最小规模的灵活的 Node.js Web 应用程序开发框架，为 Web 和移动应用程序提供一组强大的功能。<br>在官网中没有找到 <code>partial()</code> 方法，只能看看野史了。<br>百度找到了<a href="http://yijiebuyi.com/blog/e503a402ffac43ca1cbaba9d4317b54d.html" target="_blank" rel="noopener">NodeJS - Express 3.0下ejs模板使用 partial展现 片段视图</a></p><a id="more"></a><p><a href="https://github.com/expressjs/express/wiki/Migrating-from-2.x-to-3.x" target="_blank" rel="noopener">github 发现</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- partial(<span class="string">'_partial/ocean'</span>) %&gt; <span class="comment">// 在 3.x 中该方法已经移除</span></span><br><span class="line">&lt;%- include <span class="string">'_partial/ocean'</span> %&gt; <span class="comment">// 用 include 替代</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> express </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo 安装图片插件 ~ hexo + 七牛云</title>
      <link href="2019/02/03/hexo-%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87%E6%8F%92%E4%BB%B6/"/>
      <url>2019/02/03/hexo-%E5%AE%89%E8%A3%85%E5%9B%BE%E7%89%87%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>想要一块地盘，想要保存宝宝的照片，点点滴<br>想要宝宝成长开辟地盘<br>于是。。。<br>七牛云<br>hexo</p><img title="龙猫" alt="七牛云" src="http://audreyzhang.s3-cn-east-1.qiniucs.com/static/images/longmao.jpeg?imageView2/2/w/225"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 语法</span></span><br><span class="line">&#123;% qnimg longmao.jpeg title:龙猫 at 七牛云 logo alt:七牛云 <span class="string">'class:'</span> extend:?imageView2/2/w/550 %&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="hexo-中安装七年云插件"><a href="#hexo-中安装七年云插件" class="headerlink" title="hexo 中安装七年云插件"></a>hexo 中安装七年云插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-qiniu-sync --save</span><br></pre></td></tr></table></figure><blockquote><p>hexo 七牛同步插件 hexo-qiniu-sync<br>git 地址（<a href="https://github.com/gyk001/hexo-qiniu-sync.git）" target="_blank" rel="noopener">https://github.com/gyk001/hexo-qiniu-sync.git）</a><br>赞挖井人</p></blockquote><h2 id="hexo-中配置七牛云"><a href="#hexo-中配置七牛云" class="headerlink" title="hexo 中配置七牛云"></a>hexo 中配置七牛云</h2><p>在 <code>_config.yml</code> 中配置 qiniu 插件，具体每个参数怎么配置、代表什么在（<a href="https://github.com/gyk001/hexo-qiniu-sync.git）中有详细说明，以下是个人配置的" target="_blank" rel="noopener">https://github.com/gyk001/hexo-qiniu-sync.git）中有详细说明，以下是个人配置的</a> demo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">qiniu:</span><br><span class="line">  offline: <span class="literal">false</span></span><br><span class="line">  sync: <span class="literal">true</span></span><br><span class="line">  bucket: audreyzhang</span><br><span class="line">  secret_file: a/qn.json <span class="comment"># 该配置与 access_key &amp;&amp; secret_key 取其一即可</span></span><br><span class="line">  <span class="comment"># access_key: 3***i</span></span><br><span class="line">  <span class="comment"># secret_key: s**d</span></span><br><span class="line">  dirPrefix: static</span><br><span class="line">  <span class="comment"># 外链前缀</span></span><br><span class="line">  urlPrefix: http://***.bkt.clouddn.com/static</span><br><span class="line">  <span class="comment"># 使用默认配置即可</span></span><br><span class="line">  up_host: http://upload.qiniu.com</span><br><span class="line">  <span class="comment"># 本地目录</span></span><br><span class="line">  local_dir: static</span><br><span class="line">  <span class="comment"># 是否更新已经上传过的文件(仅文件大小不同或在上次上传后进行更新的才会重新上传)</span></span><br><span class="line">  update_exist: <span class="literal">true</span></span><br><span class="line">  image:</span><br><span class="line">    folder: images</span><br><span class="line">    extend:</span><br><span class="line">  js:</span><br><span class="line">    folder: js</span><br><span class="line">  css:</span><br><span class="line">    folder: css</span><br></pre></td></tr></table></figure><h3 id="hexo-中配置七牛插件-ERROR"><a href="#hexo-中配置七牛插件-ERROR" class="headerlink" title="hexo 中配置七牛插件 - ERROR"></a>hexo 中配置七牛插件 - ERROR</h3><h4 id="ERROR-1-port-has-been-used"><a href="#ERROR-1-port-has-been-used" class="headerlink" title="ERROR - 1 - port has been used"></a>ERROR - 1 - port has been used</h4><blockquote><p>每次新增图片，不会自动上传到七牛云服务器，需要重新执行 <code>hexo s</code>，于是遇见以下错误</p></blockquote><img src="http://audreyzhang.s3-cn-east-1.qiniucs.com/static/images/portHasBeenUsed.png"><p><strong>这个很明显，就是端口被占用了。找出启服务的 terminal <code>ctrl + c</code> 停止当前服务，<code>hexo s</code> 重新启动</strong></p><h4 id="ERROR-2-get-file-stat-err"><a href="#ERROR-2-get-file-stat-err" class="headerlink" title="ERROR - 2 - get file stat err"></a>ERROR - 2 - get file stat err</h4><blockquote><p>添加图片，执行 <code>hexo g</code> 报错： <em>get file stat err</em> 如下图</p><img src="http://audreyzhang.s3-cn-east-1.qiniucs.com/static/images/getFileStatErr.png"><p>逐一排查，发现是 secret_key &amp;&amp; access_key 未设置导致的，排查结果如下图</p><img src="http://audreyzhang.s3-cn-east-1.qiniucs.com/static/images/getFileStatErr-badToken401.png"><p>*<em><code>_config.yml</code> 中添加 access_key &amp;&amp; secret_key，有两种方式： *</em></p></blockquote><ol><li>直接添加<br>access_key: 3<strong>*i<br>secret_key: s</strong>d</li><li>新增加 <code>sec.json</code>，将 <code>access_key: 3***i &amp;&amp; secret_key: s**d</code> 写入 json 文件，然后 <code>_config.yml，qiniu</code> 插件中，添加 <code>secret_file: a/qn.json</code></li></ol><p><strong>(具体如上 demo，选其一即可。AccessKey/SecretKey 可至 七牛云 个人中心 -&gt; 密钥管理 中查看)</strong></p><h4 id="ERROR-3-token-not-specified-图片不展示"><a href="#ERROR-3-token-not-specified-图片不展示" class="headerlink" title="ERROR - 3 - token not specified 图片不展示"></a>ERROR - 3 - token not specified 图片不展示</h4><blockquote><p>可能是因为当前空间是私有空间造成的，具体原因可看文档<br>  <a href="https://developer.qiniu.com/fusion/kb/3885/through-the-http-status-code-download-failure-reason" target="_blank" rel="noopener">https://developer.qiniu.com/fusion/kb/3885/through-the-http-status-code-download-failure-reason</a><br>  <a href="https://developer.qiniu.com/kodo/kb/4054/matters-needing-attention-of-private-space" target="_blank" rel="noopener">https://developer.qiniu.com/kodo/kb/4054/matters-needing-attention-of-private-space</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片 </tag>
            
            <tag> 七牛云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>EN Dash</title>
      <link href="2019/02/01/EN-Dash/"/>
      <url>2019/02/01/EN-Dash/</url>
      
        <content type="html"><![CDATA[<h2 id="EN-Dash-破折号、连字符"><a href="#EN-Dash-破折号、连字符" class="headerlink" title="EN Dash - 破折号、连字符"></a>EN Dash - 破折号、连字符</h2><blockquote><p>英语中连字符的两大功能</p></blockquote><ol><li><p>用于移行，把不在同一行的某个单词连接起来；</p></li><li><p>把两个或两个以上的单词连接起来，构成新的形容词</p><a id="more"></a></li></ol><h3 id="由连字符-构成的形容词性的合成词"><a href="#由连字符-构成的形容词性的合成词" class="headerlink" title="由连字符 -  构成的形容词性的合成词"></a>由连字符 -  构成的形容词性的合成词</h3><ol><li><p>由形容词 + （名词 + ed) 构成的合成形容词</p><blockquote><p>a kind-hearted woman 一个心地善良的人<br>a simple-minded young man 一个头脑简单的年轻人<br>a left-handed person 一个左撇子<br>有时,数词或名词+（名词+ed）,也能构成合成形容词,如：<br>a two-faced fellow 一个两面派的家伙<br>a three-cornered hat 一顶三角帽</p></blockquote></li><li><p>由形容词或副词 + 分词构成的合成形容词</p><blockquote><p>a new-born baby 一个新生婴儿<br>a badly-lighted room 一间光线昏暗的房间<br>a well-meaning proposal 一条善意的建议<br>有时,名词+分词也能构成合成形容词,如：<br>peace-loving people 热爱和平的人民<br>a man-eating society 一个吃人的社会</p></blockquote></li><li><p>由名词、形容词或副词 + 形容词合成的形容词</p><blockquote><p>a snow-white wall 一堵雪白的墙<br>dark-blue ink 深蓝色墨水<br>ever-green bushes 常青灌木林</p></blockquote></li><li><p>由形容词、数词 + 名词合成的形容词</p><blockquote><p>a first－rate teacher 一位一流的教师<br>an eight－cylinder engine 一台八汽缸发动机</p></blockquote></li><li><p>由不同短语构成的合成形容词</p><blockquote><p>out-of-the-way 偏僻<br>face-to-face talk 面对面谈话<br>an out-and-out lie 彻头彻尾的谎言</p></blockquote></li><li><p>作者在表达一个意思时不拘形式,比较随便.他可以把句子中的一个短语,甚至是一个句子,其间用连字符一一连接起来,构成多词性合成形容词.</p><blockquote><p>With your nothing－can－be-done attitude,you can’t hope to accomplish<br>anything．你抱这种无所作为的态度,你就一事无成<br>never-to-be-forgotten 令人难忘<br>difficult-to-operate 难以操作</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### mobile-enabled</span><br><span class="line">名词 + 分词合成的形容词</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> English </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
            <tag> 词法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>atom 插件</title>
      <link href="2019/01/31/atom-%E6%8F%92%E4%BB%B6/"/>
      <url>2019/01/31/atom-%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h4 id="markdown-preview-plus"><a href="#markdown-preview-plus" class="headerlink" title="markdown-preview-plus"></a>markdown-preview-plus</h4><ol><li>command + shift + p</li><li>markdown preview toggle</li></ol><h4 id="platformio-ide-terminal"><a href="#platformio-ide-terminal" class="headerlink" title="platformio-ide-terminal"></a>platformio-ide-terminal</h4><ol><li>command + shift + p</li><li>terminal new / terminal close</li></ol><h4 id="docblockr"><a href="#docblockr" class="headerlink" title="docblockr"></a><a href="https://atom.io/packages/docblockr" target="_blank" rel="noopener">docblockr</a></h4><p>用于自动生成注释（annotation）</p><h4 id="authcompletePaths"><a href="#authcompletePaths" class="headerlink" title="authcompletePaths"></a>authcompletePaths</h4><p>自动补全 path</p><a id="more"></a><h4 id="emmet"><a href="#emmet" class="headerlink" title="emmet"></a>emmet</h4><p>高效编写 html/css，按约定编写代码，自动扩展补全，<a href="https://emmet.io/" target="_blank" rel="noopener">具体见文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> atom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo 坑</title>
      <link href="2019/01/31/hexo-%E5%9D%91/"/>
      <url>2019/01/31/hexo-%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo-deploy-没有反应"><a href="#hexo-deploy-没有反应" class="headerlink" title="hexo deploy 没有反应"></a>hexo deploy 没有反应</h2><p><code>检查</code> _config.yml 中 deploy 配置</p><h2 id="访问页面空白"><a href="#访问页面空白" class="headerlink" title="访问页面空白"></a>访问页面空白</h2><p><code>检查</code> themes</p><h2 id="断行，在首页展示缩略信息，该方法能被-hexo-更好识别"><a href="#断行，在首页展示缩略信息，该方法能被-hexo-更好识别" class="headerlink" title="断行，在首页展示缩略信息，该方法能被 hexo 更好识别"></a>断行，在首页展示缩略信息，该方法能被 hexo 更好识别</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">auto_excerpt:</span><br><span class="line">  enable: true</span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure><h2 id="ERROR-No-layout-index-html"><a href="#ERROR-No-layout-index-html" class="headerlink" title="ERROR - No layout: index.html"></a>ERROR - No layout: index.html</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo s</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.</span><br><span class="line">WARN  No layout: index.html</span><br></pre></td></tr></table></figure><a id="more"></a><p><code>解决办法：</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git clone https://github.com/zhwangart/hexo-theme-ocean.git themes/ocean</span><br></pre></td></tr></table></figure><blockquote><p>Modify theme setting in _config.yml to ocean<br><code>theme: ocean</code></p></blockquote><h2 id="ERROR-发布到-git-服务器访问出现空白页或无主题样式"><a href="#ERROR-发布到-git-服务器访问出现空白页或无主题样式" class="headerlink" title="ERROR - 发布到 git 服务器访问出现空白页或无主题样式"></a>ERROR - 发布到 git 服务器访问出现空白页或无主题样式</h2><blockquote><p>原因是发布到 github 上的项目名称要与个人github的用户名一致，且加后缀 .github.io，如 ‘helenzhanglp.github.io’</p></blockquote><h2 id="ERROR-博客中添加-gitalk"><a href="#ERROR-博客中添加-gitalk" class="headerlink" title="ERROR - 博客中添加 gitalk"></a>ERROR - 博客中添加 gitalk</h2><blockquote><p><em>## Error Error: Not Found. ##</em><br><code>解决办法：</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gitalk:</span><br><span class="line">  enable: true</span><br><span class="line">  clientID: 8e7e6dda81936172806e # GitHub Application Client ID</span><br><span class="line">  clientSecret: 97f71b6bbdf731bc650ec39212061882b8f36e71 # Client Secret</span><br><span class="line">  repo: &apos;blog&apos; # Repository name 仓库不能为私有仓库 Private Repository</span><br><span class="line">  owner: HelenZhangLP  # GitHub ID</span><br><span class="line">  admin: HelenZhangLP # GitHub ID</span><br></pre></td></tr></table></figure><h2 id="ERROR-theme-样式修改，先需要先提交至-github，再-deploy"><a href="#ERROR-theme-样式修改，先需要先提交至-github，再-deploy" class="headerlink" title="ERROR - theme 样式修改，先需要先提交至 github，再 deploy"></a>ERROR - theme 样式修改，先需要先提交至 github，再 deploy</h2><h2 id="Error-Spawn-failed"><a href="#Error-Spawn-failed" class="headerlink" title="Error: Spawn failed"></a>Error: Spawn failed</h2><blockquote><p>fatal: unable to access ‘<a href="https://github.com/HelenZhangLP/helenzhanglp.github.io.git/&#39;" target="_blank" rel="noopener">https://github.com/HelenZhangLP/helenzhanglp.github.io.git/&#39;</a>: Received HTTP code 502 from<br> proxy after CONNECT<br>FATAL Something’s wrong. Maybe you can find the solution here: <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">https://hexo.io/docs/troubleshooting.html</a></p></blockquote><p><code>解决办法：</code><br>_config.yml 中 修改 deploy，https 链接换成 ssh<br>deploy:<br>  type: git<br>  repo: <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:<em>/</em>.github.io.git</p><h2 id="hexo-中加入-sequence-diagram，安装-hexo-filter-sequence-后不显示"><a href="#hexo-中加入-sequence-diagram，安装-hexo-filter-sequence-后不显示" class="headerlink" title="hexo 中加入 sequence diagram，安装 hexo-filter-sequence 后不显示"></a>hexo 中加入 sequence diagram，安装 hexo-filter-sequence 后不显示</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sequence-diagram.js:792 Uncaught ReferenceError: Raphael is not defined</span><br><span class="line">    at sequence-diagram.js:792</span><br><span class="line">    at sequence-diagram.js:1468</span><br><span class="line">(anonymous) @ sequence-diagram.js:792</span><br><span class="line">(anonymous) @ sequence-diagram.js:1468</span><br><span class="line">(index):93 Uncaught ReferenceError: Diagram is not defined</span><br><span class="line">    at (index):93</span><br><span class="line">(anonymous) @ (index):93</span><br></pre></td></tr></table></figure><p><code>解决办法：</code><br>临时在头部加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if(config.sequence) &#123;%&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/lodash.js/4.17.20/lodash.core.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=&quot;https://cdn.bootcdn.net/ajax/libs/raphael/2.3.0/raphael.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>taro 坑系列</title>
      <link href="2019/01/25/taro/"/>
      <url>2019/01/25/taro/</url>
      
        <content type="html"><![CDATA[<h3 id="taro-坑"><a href="#taro-坑" class="headerlink" title="taro 坑"></a>taro 坑</h3><h4 id="坑-1"><a href="#坑-1" class="headerlink" title="坑 - 1"></a>坑 - 1</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/Users/lipingzhang/Project<span class="comment">/**/**/</span>src/pages/order/detail/index编译失败！</span><br><span class="line"><span class="built_in">TypeError</span> [ERR_INVALID_ARG_TYPE]: The <span class="string">"path"</span> argument must be <span class="keyword">of</span> type string</span><br><span class="line">    at assertPath (path.js:<span class="number">28</span>:<span class="number">11</span>)</span><br><span class="line">    at <span class="built_in">Object</span>.relative (path.js:<span class="number">1265</span>:<span class="number">5</span>)</span><br><span class="line">    at pageDepComponents.forEach.depComponent (<span class="regexp">/Users/</span>lipingzhang/.nvm/versions/node/v9<span class="number">.2</span><span class="number">.0</span>/lib/node_modules/@tarojs/cli/src/weapp.js:<span class="number">1326</span>:<span class="number">64</span>)</span><br><span class="line">    at <span class="built_in">Array</span>.forEach (<span class="xml"><span class="tag">&lt;<span class="name">anonymous</span>&gt;</span>)</span></span><br><span class="line"><span class="xml">    at componentMap.forEach.component (/Users/lipingzhang/.nvm/versions/node/v9.2.0/lib/node_modules/@tarojs/cli/src/weapp.js:1320:31)</span></span><br><span class="line">    at Array.forEach (&lt;anonymous&gt;)</span><br><span class="line">    at realComponentsPathList.forEach.component (/Users/lipingzhang/.nvm/versions/node/v9.2.0/lib/node_modules/@tarojs/cli/src/weapp.js:1319:24)</span><br><span class="line">    at Array.forEach (&lt;anonymous&gt;)</span><br><span class="line">    at buildSinglePage (/Users/jo32/.nvm/versions/lipingzhang/v9.2.0/lib/node_modules/@tarojs/cli/src/weapp.js:1316:30)</span><br><span class="line">    at &lt;anonymous&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="for-坑-1-原因"><a href="#for-坑-1-原因" class="headerlink" title="for 坑 - 1 - 原因"></a>for 坑 - 1 - 原因</h4><blockquote><p>组件 render 方法返回 null 时会引起编译错误<br><code>/order/detail/index</code> 该页面使用了组件 atCountDown，该组件编译错误</p></blockquote><h3 id="for-坑-1-解决方法"><a href="#for-坑-1-解决方法" class="headerlink" title="for 坑 - 1 - 解决方法"></a>for 坑 - 1 - 解决方法</h3><p>** 升级 tarojs tarojs-cli 为 1.8 **</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* npm install @tarojs@1.8 *</span><br><span class="line">* npm install @tarojs-cli@1.8 *</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 框架 </tag>
            
            <tag> taro </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
